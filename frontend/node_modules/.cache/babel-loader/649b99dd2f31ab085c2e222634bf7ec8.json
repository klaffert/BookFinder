{"ast":null,"code":"/*\n* # Semantic UI - 2.4.1\n* https://github.com/Semantic-Org/Semantic-UI\n* http://www.semantic-ui.com/\n*\n* Copyright 2014 Contributors\n* Released under the MIT license\n* http://opensource.org/licenses/MIT\n*\n*/\n\n/*!\n * # Semantic UI 2.4.1 - Site\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  $.site = $.fn.site = function (parameters) {\n    var time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.site.settings, parameters) : $.extend({}, $.site.settings),\n        namespace = settings.namespace,\n        error = settings.error,\n        eventNamespace = '.' + namespace,\n        moduleNamespace = 'module-' + namespace,\n        $document = $(document),\n        $module = $document,\n        element = this,\n        instance = $module.data(moduleNamespace),\n        module,\n        returnedValue;\n    module = {\n      initialize: function () {\n        module.instantiate();\n      },\n      instantiate: function () {\n        module.verbose('Storing instance of site', module);\n        instance = module;\n        $module.data(moduleNamespace, module);\n      },\n      normalize: function () {\n        module.fix.console();\n        module.fix.requestAnimationFrame();\n      },\n      fix: {\n        console: function () {\n          module.debug('Normalizing window.console');\n\n          if (console === undefined || console.log === undefined) {\n            module.verbose('Console not available, normalizing events');\n            module.disable.console();\n          }\n\n          if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {\n            module.verbose('Console group not available, normalizing events');\n\n            window.console.group = function () {};\n\n            window.console.groupEnd = function () {};\n\n            window.console.groupCollapsed = function () {};\n          }\n\n          if (typeof console.markTimeline == 'undefined') {\n            module.verbose('Mark timeline not available, normalizing events');\n\n            window.console.markTimeline = function () {};\n          }\n        },\n        consoleClear: function () {\n          module.debug('Disabling programmatic console clearing');\n\n          window.console.clear = function () {};\n        },\n        requestAnimationFrame: function () {\n          module.debug('Normalizing requestAnimationFrame');\n\n          if (window.requestAnimationFrame === undefined) {\n            module.debug('RequestAnimationFrame not available, normalizing event');\n\n            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n              setTimeout(callback, 0);\n            };\n          }\n        }\n      },\n      moduleExists: function (name) {\n        return $.fn[name] !== undefined && $.fn[name].settings !== undefined;\n      },\n      enabled: {\n        modules: function (modules) {\n          var enabledModules = [];\n          modules = modules || settings.modules;\n          $.each(modules, function (index, name) {\n            if (module.moduleExists(name)) {\n              enabledModules.push(name);\n            }\n          });\n          return enabledModules;\n        }\n      },\n      disabled: {\n        modules: function (modules) {\n          var disabledModules = [];\n          modules = modules || settings.modules;\n          $.each(modules, function (index, name) {\n            if (!module.moduleExists(name)) {\n              disabledModules.push(name);\n            }\n          });\n          return disabledModules;\n        }\n      },\n      change: {\n        setting: function (setting, value, modules, modifyExisting) {\n          modules = typeof modules === 'string' ? modules === 'all' ? settings.modules : [modules] : modules || settings.modules;\n          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;\n          $.each(modules, function (index, name) {\n            var namespace = module.moduleExists(name) ? $.fn[name].settings.namespace || false : true,\n                $existingModules;\n\n            if (module.moduleExists(name)) {\n              module.verbose('Changing default setting', setting, value, name);\n              $.fn[name].settings[setting] = value;\n\n              if (modifyExisting && namespace) {\n                $existingModules = $(':data(module-' + namespace + ')');\n\n                if ($existingModules.length > 0) {\n                  module.verbose('Modifying existing settings', $existingModules);\n                  $existingModules[name]('setting', setting, value);\n                }\n              }\n            }\n          });\n        },\n        settings: function (newSettings, modules, modifyExisting) {\n          modules = typeof modules === 'string' ? [modules] : modules || settings.modules;\n          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;\n          $.each(modules, function (index, name) {\n            var $existingModules;\n\n            if (module.moduleExists(name)) {\n              module.verbose('Changing default setting', newSettings, name);\n              $.extend(true, $.fn[name].settings, newSettings);\n\n              if (modifyExisting && namespace) {\n                $existingModules = $(':data(module-' + namespace + ')');\n\n                if ($existingModules.length > 0) {\n                  module.verbose('Modifying existing settings', $existingModules);\n                  $existingModules[name]('setting', newSettings);\n                }\n              }\n            }\n          });\n        }\n      },\n      enable: {\n        console: function () {\n          module.console(true);\n        },\n        debug: function (modules, modifyExisting) {\n          modules = modules || settings.modules;\n          module.debug('Enabling debug for modules', modules);\n          module.change.setting('debug', true, modules, modifyExisting);\n        },\n        verbose: function (modules, modifyExisting) {\n          modules = modules || settings.modules;\n          module.debug('Enabling verbose debug for modules', modules);\n          module.change.setting('verbose', true, modules, modifyExisting);\n        }\n      },\n      disable: {\n        console: function () {\n          module.console(false);\n        },\n        debug: function (modules, modifyExisting) {\n          modules = modules || settings.modules;\n          module.debug('Disabling debug for modules', modules);\n          module.change.setting('debug', false, modules, modifyExisting);\n        },\n        verbose: function (modules, modifyExisting) {\n          modules = modules || settings.modules;\n          module.debug('Disabling verbose debug for modules', modules);\n          module.change.setting('verbose', false, modules, modifyExisting);\n        }\n      },\n      console: function (enable) {\n        if (enable) {\n          if (instance.cache.console === undefined) {\n            module.error(error.console);\n            return;\n          }\n\n          module.debug('Restoring console function');\n          window.console = instance.cache.console;\n        } else {\n          module.debug('Disabling console function');\n          instance.cache.console = window.console;\n          window.console = {\n            clear: function () {},\n            error: function () {},\n            group: function () {},\n            groupCollapsed: function () {},\n            groupEnd: function () {},\n            info: function () {},\n            log: function () {},\n            markTimeline: function () {},\n            warn: function () {}\n          };\n        }\n      },\n      destroy: function () {\n        module.verbose('Destroying previous site for', $module);\n        $module.removeData(moduleNamespace);\n      },\n      cache: {},\n      setting: function (name, value) {\n        if ($.isPlainObject(name)) {\n          $.extend(true, settings, name);\n        } else if (value !== undefined) {\n          settings[name] = value;\n        } else {\n          return settings[name];\n        }\n      },\n      internal: function (name, value) {\n        if ($.isPlainObject(name)) {\n          $.extend(true, module, name);\n        } else if (value !== undefined) {\n          module[name] = value;\n        } else {\n          return module[name];\n        }\n      },\n      debug: function () {\n        if (settings.debug) {\n          if (settings.performance) {\n            module.performance.log(arguments);\n          } else {\n            module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n            module.debug.apply(console, arguments);\n          }\n        }\n      },\n      verbose: function () {\n        if (settings.verbose && settings.debug) {\n          if (settings.performance) {\n            module.performance.log(arguments);\n          } else {\n            module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n            module.verbose.apply(console, arguments);\n          }\n        }\n      },\n      error: function () {\n        module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n        module.error.apply(console, arguments);\n      },\n      performance: {\n        log: function (message) {\n          var currentTime, executionTime, previousTime;\n\n          if (settings.performance) {\n            currentTime = new Date().getTime();\n            previousTime = time || currentTime;\n            executionTime = currentTime - previousTime;\n            time = currentTime;\n            performance.push({\n              'Element': element,\n              'Name': message[0],\n              'Arguments': [].slice.call(message, 1) || '',\n              'Execution Time': executionTime\n            });\n          }\n\n          clearTimeout(module.performance.timer);\n          module.performance.timer = setTimeout(module.performance.display, 500);\n        },\n        display: function () {\n          var title = settings.name + ':',\n              totalTime = 0;\n          time = false;\n          clearTimeout(module.performance.timer);\n          $.each(performance, function (index, data) {\n            totalTime += data['Execution Time'];\n          });\n          title += ' ' + totalTime + 'ms';\n\n          if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n            console.groupCollapsed(title);\n\n            if (console.table) {\n              console.table(performance);\n            } else {\n              $.each(performance, function (index, data) {\n                console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n              });\n            }\n\n            console.groupEnd();\n          }\n\n          performance = [];\n        }\n      },\n      invoke: function (query, passedArguments, context) {\n        var object = instance,\n            maxDepth,\n            found,\n            response;\n        passedArguments = passedArguments || queryArguments;\n        context = element || context;\n\n        if (typeof query == 'string' && object !== undefined) {\n          query = query.split(/[\\. ]/);\n          maxDepth = query.length - 1;\n          $.each(query, function (depth, value) {\n            var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n            if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n              object = object[camelCaseValue];\n            } else if (object[camelCaseValue] !== undefined) {\n              found = object[camelCaseValue];\n              return false;\n            } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n              object = object[value];\n            } else if (object[value] !== undefined) {\n              found = object[value];\n              return false;\n            } else {\n              module.error(error.method, query);\n              return false;\n            }\n          });\n        }\n\n        if ($.isFunction(found)) {\n          response = found.apply(context, passedArguments);\n        } else if (found !== undefined) {\n          response = found;\n        }\n\n        if ($.isArray(returnedValue)) {\n          returnedValue.push(response);\n        } else if (returnedValue !== undefined) {\n          returnedValue = [returnedValue, response];\n        } else if (response !== undefined) {\n          returnedValue = response;\n        }\n\n        return found;\n      }\n    };\n\n    if (methodInvoked) {\n      if (instance === undefined) {\n        module.initialize();\n      }\n\n      module.invoke(query);\n    } else {\n      if (instance !== undefined) {\n        module.destroy();\n      }\n\n      module.initialize();\n    }\n\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.site.settings = {\n    name: 'Site',\n    namespace: 'site',\n    error: {\n      console: 'Console cannot be restored, most likely it was overwritten outside of module',\n      method: 'The method you called is not defined.'\n    },\n    debug: false,\n    verbose: false,\n    performance: true,\n    modules: ['accordion', 'api', 'checkbox', 'dimmer', 'dropdown', 'embed', 'form', 'modal', 'nag', 'popup', 'rating', 'shape', 'sidebar', 'state', 'sticky', 'tab', 'transition', 'visit', 'visibility'],\n    siteNamespace: 'site',\n    namespaceStub: {\n      cache: {},\n      config: {},\n      sections: {},\n      section: {},\n      utilities: {}\n    }\n  }; // allows for selection of elements with data attributes\n\n  $.extend($.expr[\":\"], {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : function (elem, i, match) {\n      // support: jQuery < 1.8\n      return !!$.data(elem, match[3]);\n    }\n  });\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Form Validation\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.form = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        legacyParameters = arguments[1],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var $module = $(this),\n          element = this,\n          formErrors = [],\n          keyHeldDown = false,\n          // set at run-time\n      $field,\n          $group,\n          $message,\n          $prompt,\n          $submit,\n          $clear,\n          $reset,\n          settings,\n          validation,\n          metadata,\n          selector,\n          className,\n          regExp,\n          error,\n          namespace,\n          moduleNamespace,\n          eventNamespace,\n          instance,\n          module;\n      module = {\n        initialize: function () {\n          // settings grabbed at run time\n          module.get.settings();\n\n          if (methodInvoked) {\n            if (instance === undefined) {\n              module.instantiate();\n            }\n\n            module.invoke(query);\n          } else {\n            if (instance !== undefined) {\n              instance.invoke('destroy');\n            }\n\n            module.verbose('Initializing form validation', $module, settings);\n            module.bindEvents();\n            module.set.defaults();\n            module.instantiate();\n          }\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module', instance);\n          module.removeEvents();\n          $module.removeData(moduleNamespace);\n        },\n        refresh: function () {\n          module.verbose('Refreshing selector cache');\n          $field = $module.find(selector.field);\n          $group = $module.find(selector.group);\n          $message = $module.find(selector.message);\n          $prompt = $module.find(selector.prompt);\n          $submit = $module.find(selector.submit);\n          $clear = $module.find(selector.clear);\n          $reset = $module.find(selector.reset);\n        },\n        submit: function () {\n          module.verbose('Submitting form', $module);\n          $module.submit();\n        },\n        attachEvents: function (selector, action) {\n          action = action || 'submit';\n          $(selector).on('click' + eventNamespace, function (event) {\n            module[action]();\n            event.preventDefault();\n          });\n        },\n        bindEvents: function () {\n          module.verbose('Attaching form events');\n          $module.on('submit' + eventNamespace, module.validate.form).on('blur' + eventNamespace, selector.field, module.event.field.blur).on('click' + eventNamespace, selector.submit, module.submit).on('click' + eventNamespace, selector.reset, module.reset).on('click' + eventNamespace, selector.clear, module.clear);\n\n          if (settings.keyboardShortcuts) {\n            $module.on('keydown' + eventNamespace, selector.field, module.event.field.keydown);\n          }\n\n          $field.each(function () {\n            var $input = $(this),\n                type = $input.prop('type'),\n                inputEvent = module.get.changeEvent(type, $input);\n            $(this).on(inputEvent + eventNamespace, module.event.field.change);\n          });\n        },\n        clear: function () {\n          $field.each(function () {\n            var $field = $(this),\n                $element = $field.parent(),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.find(selector.prompt),\n                defaultValue = $field.data(metadata.defaultValue) || '',\n                isCheckbox = $element.is(selector.uiCheckbox),\n                isDropdown = $element.is(selector.uiDropdown),\n                isErrored = $fieldGroup.hasClass(className.error);\n\n            if (isErrored) {\n              module.verbose('Resetting error on field', $fieldGroup);\n              $fieldGroup.removeClass(className.error);\n              $prompt.remove();\n            }\n\n            if (isDropdown) {\n              module.verbose('Resetting dropdown value', $element, defaultValue);\n              $element.dropdown('clear');\n            } else if (isCheckbox) {\n              $field.prop('checked', false);\n            } else {\n              module.verbose('Resetting field value', $field, defaultValue);\n              $field.val('');\n            }\n          });\n        },\n        reset: function () {\n          $field.each(function () {\n            var $field = $(this),\n                $element = $field.parent(),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.find(selector.prompt),\n                defaultValue = $field.data(metadata.defaultValue),\n                isCheckbox = $element.is(selector.uiCheckbox),\n                isDropdown = $element.is(selector.uiDropdown),\n                isErrored = $fieldGroup.hasClass(className.error);\n\n            if (defaultValue === undefined) {\n              return;\n            }\n\n            if (isErrored) {\n              module.verbose('Resetting error on field', $fieldGroup);\n              $fieldGroup.removeClass(className.error);\n              $prompt.remove();\n            }\n\n            if (isDropdown) {\n              module.verbose('Resetting dropdown value', $element, defaultValue);\n              $element.dropdown('restore defaults');\n            } else if (isCheckbox) {\n              module.verbose('Resetting checkbox value', $element, defaultValue);\n              $field.prop('checked', defaultValue);\n            } else {\n              module.verbose('Resetting field value', $field, defaultValue);\n              $field.val(defaultValue);\n            }\n          });\n        },\n        determine: {\n          isValid: function () {\n            var allValid = true;\n            $.each(validation, function (fieldName, field) {\n              if (!module.validate.field(field, fieldName, true)) {\n                allValid = false;\n              }\n            });\n            return allValid;\n          }\n        },\n        is: {\n          bracketedRule: function (rule) {\n            return rule.type && rule.type.match(settings.regExp.bracket);\n          },\n          shorthandFields: function (fields) {\n            var fieldKeys = Object.keys(fields),\n                firstRule = fields[fieldKeys[0]];\n            return module.is.shorthandRules(firstRule);\n          },\n          // duck type rule test\n          shorthandRules: function (rules) {\n            return typeof rules == 'string' || $.isArray(rules);\n          },\n          empty: function ($field) {\n            if (!$field || $field.length === 0) {\n              return true;\n            } else if ($field.is('input[type=\"checkbox\"]')) {\n              return !$field.is(':checked');\n            } else {\n              return module.is.blank($field);\n            }\n          },\n          blank: function ($field) {\n            return $.trim($field.val()) === '';\n          },\n          valid: function (field) {\n            var allValid = true;\n\n            if (field) {\n              module.verbose('Checking if field is valid', field);\n              return module.validate.field(validation[field], field, false);\n            } else {\n              module.verbose('Checking if form is valid');\n              $.each(validation, function (fieldName, field) {\n                if (!module.is.valid(fieldName)) {\n                  allValid = false;\n                }\n              });\n              return allValid;\n            }\n          }\n        },\n        removeEvents: function () {\n          $module.off(eventNamespace);\n          $field.off(eventNamespace);\n          $submit.off(eventNamespace);\n          $field.off(eventNamespace);\n        },\n        event: {\n          field: {\n            keydown: function (event) {\n              var $field = $(this),\n                  key = event.which,\n                  isInput = $field.is(selector.input),\n                  isCheckbox = $field.is(selector.checkbox),\n                  isInDropdown = $field.closest(selector.uiDropdown).length > 0,\n                  keyCode = {\n                enter: 13,\n                escape: 27\n              };\n\n              if (key == keyCode.escape) {\n                module.verbose('Escape key pressed blurring field');\n                $field.blur();\n              }\n\n              if (!event.ctrlKey && key == keyCode.enter && isInput && !isInDropdown && !isCheckbox) {\n                if (!keyHeldDown) {\n                  $field.one('keyup' + eventNamespace, module.event.field.keyup);\n                  module.submit();\n                  module.debug('Enter pressed on input submitting form');\n                }\n\n                keyHeldDown = true;\n              }\n            },\n            keyup: function () {\n              keyHeldDown = false;\n            },\n            blur: function (event) {\n              var $field = $(this),\n                  $fieldGroup = $field.closest($group),\n                  validationRules = module.get.validation($field);\n\n              if ($fieldGroup.hasClass(className.error)) {\n                module.debug('Revalidating field', $field, validationRules);\n\n                if (validationRules) {\n                  module.validate.field(validationRules);\n                }\n              } else if (settings.on == 'blur') {\n                if (validationRules) {\n                  module.validate.field(validationRules);\n                }\n              }\n            },\n            change: function (event) {\n              var $field = $(this),\n                  $fieldGroup = $field.closest($group),\n                  validationRules = module.get.validation($field);\n\n              if (validationRules && (settings.on == 'change' || $fieldGroup.hasClass(className.error) && settings.revalidate)) {\n                clearTimeout(module.timer);\n                module.timer = setTimeout(function () {\n                  module.debug('Revalidating field', $field, module.get.validation($field));\n                  module.validate.field(validationRules);\n                }, settings.delay);\n              }\n            }\n          }\n        },\n        get: {\n          ancillaryValue: function (rule) {\n            if (!rule.type || !rule.value && !module.is.bracketedRule(rule)) {\n              return false;\n            }\n\n            return rule.value !== undefined ? rule.value : rule.type.match(settings.regExp.bracket)[1] + '';\n          },\n          ruleName: function (rule) {\n            if (module.is.bracketedRule(rule)) {\n              return rule.type.replace(rule.type.match(settings.regExp.bracket)[0], '');\n            }\n\n            return rule.type;\n          },\n          changeEvent: function (type, $input) {\n            if (type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {\n              return 'change';\n            } else {\n              return module.get.inputEvent();\n            }\n          },\n          inputEvent: function () {\n            return document.createElement('input').oninput !== undefined ? 'input' : document.createElement('input').onpropertychange !== undefined ? 'propertychange' : 'keyup';\n          },\n          fieldsFromShorthand: function (fields) {\n            var fullFields = {};\n            $.each(fields, function (name, rules) {\n              if (typeof rules == 'string') {\n                rules = [rules];\n              }\n\n              fullFields[name] = {\n                rules: []\n              };\n              $.each(rules, function (index, rule) {\n                fullFields[name].rules.push({\n                  type: rule\n                });\n              });\n            });\n            return fullFields;\n          },\n          prompt: function (rule, field) {\n            var ruleName = module.get.ruleName(rule),\n                ancillary = module.get.ancillaryValue(rule),\n                $field = module.get.field(field.identifier),\n                value = $field.val(),\n                prompt = $.isFunction(rule.prompt) ? rule.prompt(value) : rule.prompt || settings.prompt[ruleName] || settings.text.unspecifiedRule,\n                requiresValue = prompt.search('{value}') !== -1,\n                requiresName = prompt.search('{name}') !== -1,\n                $label,\n                name;\n\n            if (requiresValue) {\n              prompt = prompt.replace('{value}', $field.val());\n            }\n\n            if (requiresName) {\n              $label = $field.closest(selector.group).find('label').eq(0);\n              name = $label.length == 1 ? $label.text() : $field.prop('placeholder') || settings.text.unspecifiedField;\n              prompt = prompt.replace('{name}', name);\n            }\n\n            prompt = prompt.replace('{identifier}', field.identifier);\n            prompt = prompt.replace('{ruleValue}', ancillary);\n\n            if (!rule.prompt) {\n              module.verbose('Using default validation prompt for type', prompt, ruleName);\n            }\n\n            return prompt;\n          },\n          settings: function () {\n            if ($.isPlainObject(parameters)) {\n              var keys = Object.keys(parameters),\n                  isLegacySettings = keys.length > 0 ? parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined : false,\n                  ruleKeys;\n\n              if (isLegacySettings) {\n                // 1.x (ducktyped)\n                settings = $.extend(true, {}, $.fn.form.settings, legacyParameters);\n                validation = $.extend({}, $.fn.form.settings.defaults, parameters);\n                module.error(settings.error.oldSyntax, element);\n                module.verbose('Extending settings from legacy parameters', validation, settings);\n              } else {\n                // 2.x\n                if (parameters.fields && module.is.shorthandFields(parameters.fields)) {\n                  parameters.fields = module.get.fieldsFromShorthand(parameters.fields);\n                }\n\n                settings = $.extend(true, {}, $.fn.form.settings, parameters);\n                validation = $.extend({}, $.fn.form.settings.defaults, settings.fields);\n                module.verbose('Extending settings', validation, settings);\n              }\n            } else {\n              settings = $.fn.form.settings;\n              validation = $.fn.form.settings.defaults;\n              module.verbose('Using default form validation', validation, settings);\n            } // shorthand\n\n\n            namespace = settings.namespace;\n            metadata = settings.metadata;\n            selector = settings.selector;\n            className = settings.className;\n            regExp = settings.regExp;\n            error = settings.error;\n            moduleNamespace = 'module-' + namespace;\n            eventNamespace = '.' + namespace; // grab instance\n\n            instance = $module.data(moduleNamespace); // refresh selector cache\n\n            module.refresh();\n          },\n          field: function (identifier) {\n            module.verbose('Finding field with identifier', identifier);\n            identifier = module.escape.string(identifier);\n\n            if ($field.filter('#' + identifier).length > 0) {\n              return $field.filter('#' + identifier);\n            } else if ($field.filter('[name=\"' + identifier + '\"]').length > 0) {\n              return $field.filter('[name=\"' + identifier + '\"]');\n            } else if ($field.filter('[name=\"' + identifier + '[]\"]').length > 0) {\n              return $field.filter('[name=\"' + identifier + '[]\"]');\n            } else if ($field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]').length > 0) {\n              return $field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]');\n            }\n\n            return $('<input/>');\n          },\n          fields: function (fields) {\n            var $fields = $();\n            $.each(fields, function (index, name) {\n              $fields = $fields.add(module.get.field(name));\n            });\n            return $fields;\n          },\n          validation: function ($field) {\n            var fieldValidation, identifier;\n\n            if (!validation) {\n              return false;\n            }\n\n            $.each(validation, function (fieldName, field) {\n              identifier = field.identifier || fieldName;\n\n              if (module.get.field(identifier)[0] == $field[0]) {\n                field.identifier = identifier;\n                fieldValidation = field;\n              }\n            });\n            return fieldValidation || false;\n          },\n          value: function (field) {\n            var fields = [],\n                results;\n            fields.push(field);\n            results = module.get.values.call(element, fields);\n            return results[field];\n          },\n          values: function (fields) {\n            var $fields = $.isArray(fields) ? module.get.fields(fields) : $field,\n                values = {};\n            $fields.each(function (index, field) {\n              var $field = $(field),\n                  type = $field.prop('type'),\n                  name = $field.prop('name'),\n                  value = $field.val(),\n                  isCheckbox = $field.is(selector.checkbox),\n                  isRadio = $field.is(selector.radio),\n                  isMultiple = name.indexOf('[]') !== -1,\n                  isChecked = isCheckbox ? $field.is(':checked') : false;\n\n              if (name) {\n                if (isMultiple) {\n                  name = name.replace('[]', '');\n\n                  if (!values[name]) {\n                    values[name] = [];\n                  }\n\n                  if (isCheckbox) {\n                    if (isChecked) {\n                      values[name].push(value || true);\n                    } else {\n                      values[name].push(false);\n                    }\n                  } else {\n                    values[name].push(value);\n                  }\n                } else {\n                  if (isRadio) {\n                    if (values[name] === undefined || values[name] == false) {\n                      values[name] = isChecked ? value || true : false;\n                    }\n                  } else if (isCheckbox) {\n                    if (isChecked) {\n                      values[name] = value || true;\n                    } else {\n                      values[name] = false;\n                    }\n                  } else {\n                    values[name] = value;\n                  }\n                }\n              }\n            });\n            return values;\n          }\n        },\n        has: {\n          field: function (identifier) {\n            module.verbose('Checking for existence of a field with identifier', identifier);\n            identifier = module.escape.string(identifier);\n\n            if (typeof identifier !== 'string') {\n              module.error(error.identifier, identifier);\n            }\n\n            if ($field.filter('#' + identifier).length > 0) {\n              return true;\n            } else if ($field.filter('[name=\"' + identifier + '\"]').length > 0) {\n              return true;\n            } else if ($field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]').length > 0) {\n              return true;\n            }\n\n            return false;\n          }\n        },\n        escape: {\n          string: function (text) {\n            text = String(text);\n            return text.replace(regExp.escape, '\\\\$&');\n          }\n        },\n        add: {\n          // alias\n          rule: function (name, rules) {\n            module.add.field(name, rules);\n          },\n          field: function (name, rules) {\n            var newValidation = {};\n\n            if (module.is.shorthandRules(rules)) {\n              rules = $.isArray(rules) ? rules : [rules];\n              newValidation[name] = {\n                rules: []\n              };\n              $.each(rules, function (index, rule) {\n                newValidation[name].rules.push({\n                  type: rule\n                });\n              });\n            } else {\n              newValidation[name] = rules;\n            }\n\n            validation = $.extend({}, validation, newValidation);\n            module.debug('Adding rules', newValidation, validation);\n          },\n          fields: function (fields) {\n            var newValidation;\n\n            if (fields && module.is.shorthandFields(fields)) {\n              newValidation = module.get.fieldsFromShorthand(fields);\n            } else {\n              newValidation = fields;\n            }\n\n            validation = $.extend({}, validation, newValidation);\n          },\n          prompt: function (identifier, errors) {\n            var $field = module.get.field(identifier),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.children(selector.prompt),\n                promptExists = $prompt.length !== 0;\n            errors = typeof errors == 'string' ? [errors] : errors;\n            module.verbose('Adding field error state', identifier);\n            $fieldGroup.addClass(className.error);\n\n            if (settings.inline) {\n              if (!promptExists) {\n                $prompt = settings.templates.prompt(errors);\n                $prompt.appendTo($fieldGroup);\n              }\n\n              $prompt.html(errors[0]);\n\n              if (!promptExists) {\n                if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                  module.verbose('Displaying error with css transition', settings.transition);\n                  $prompt.transition(settings.transition + ' in', settings.duration);\n                } else {\n                  module.verbose('Displaying error with fallback javascript animation');\n                  $prompt.fadeIn(settings.duration);\n                }\n              } else {\n                module.verbose('Inline errors are disabled, no inline error added', identifier);\n              }\n            }\n          },\n          errors: function (errors) {\n            module.debug('Adding form error messages', errors);\n            module.set.error();\n            $message.html(settings.templates.error(errors));\n          }\n        },\n        remove: {\n          rule: function (field, rule) {\n            var rules = $.isArray(rule) ? rule : [rule];\n\n            if (rule == undefined) {\n              module.debug('Removed all rules');\n              validation[field].rules = [];\n              return;\n            }\n\n            if (validation[field] == undefined || !$.isArray(validation[field].rules)) {\n              return;\n            }\n\n            $.each(validation[field].rules, function (index, rule) {\n              if (rules.indexOf(rule.type) !== -1) {\n                module.debug('Removed rule', rule.type);\n                validation[field].rules.splice(index, 1);\n              }\n            });\n          },\n          field: function (field) {\n            var fields = $.isArray(field) ? field : [field];\n            $.each(fields, function (index, field) {\n              module.remove.rule(field);\n            });\n          },\n          // alias\n          rules: function (field, rules) {\n            if ($.isArray(field)) {\n              $.each(fields, function (index, field) {\n                module.remove.rule(field, rules);\n              });\n            } else {\n              module.remove.rule(field, rules);\n            }\n          },\n          fields: function (fields) {\n            module.remove.field(fields);\n          },\n          prompt: function (identifier) {\n            var $field = module.get.field(identifier),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.children(selector.prompt);\n            $fieldGroup.removeClass(className.error);\n\n            if (settings.inline && $prompt.is(':visible')) {\n              module.verbose('Removing prompt for field', identifier);\n\n              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                $prompt.transition(settings.transition + ' out', settings.duration, function () {\n                  $prompt.remove();\n                });\n              } else {\n                $prompt.fadeOut(settings.duration, function () {\n                  $prompt.remove();\n                });\n              }\n            }\n          }\n        },\n        set: {\n          success: function () {\n            $module.removeClass(className.error).addClass(className.success);\n          },\n          defaults: function () {\n            $field.each(function () {\n              var $field = $(this),\n                  isCheckbox = $field.filter(selector.checkbox).length > 0,\n                  value = isCheckbox ? $field.is(':checked') : $field.val();\n              $field.data(metadata.defaultValue, value);\n            });\n          },\n          error: function () {\n            $module.removeClass(className.success).addClass(className.error);\n          },\n          value: function (field, value) {\n            var fields = {};\n            fields[field] = value;\n            return module.set.values.call(element, fields);\n          },\n          values: function (fields) {\n            if ($.isEmptyObject(fields)) {\n              return;\n            }\n\n            $.each(fields, function (key, value) {\n              var $field = module.get.field(key),\n                  $element = $field.parent(),\n                  isMultiple = $.isArray(value),\n                  isCheckbox = $element.is(selector.uiCheckbox),\n                  isDropdown = $element.is(selector.uiDropdown),\n                  isRadio = $field.is(selector.radio) && isCheckbox,\n                  fieldExists = $field.length > 0,\n                  $multipleField;\n\n              if (fieldExists) {\n                if (isMultiple && isCheckbox) {\n                  module.verbose('Selecting multiple', value, $field);\n                  $element.checkbox('uncheck');\n                  $.each(value, function (index, value) {\n                    $multipleField = $field.filter('[value=\"' + value + '\"]');\n                    $element = $multipleField.parent();\n\n                    if ($multipleField.length > 0) {\n                      $element.checkbox('check');\n                    }\n                  });\n                } else if (isRadio) {\n                  module.verbose('Selecting radio value', value, $field);\n                  $field.filter('[value=\"' + value + '\"]').parent(selector.uiCheckbox).checkbox('check');\n                } else if (isCheckbox) {\n                  module.verbose('Setting checkbox value', value, $element);\n\n                  if (value === true) {\n                    $element.checkbox('check');\n                  } else {\n                    $element.checkbox('uncheck');\n                  }\n                } else if (isDropdown) {\n                  module.verbose('Setting dropdown value', value, $element);\n                  $element.dropdown('set selected', value);\n                } else {\n                  module.verbose('Setting field value', value, $field);\n                  $field.val(value);\n                }\n              }\n            });\n          }\n        },\n        validate: {\n          form: function (event, ignoreCallbacks) {\n            var values = module.get.values(),\n                apiRequest; // input keydown event will fire submit repeatedly by browser default\n\n            if (keyHeldDown) {\n              return false;\n            } // reset errors\n\n\n            formErrors = [];\n\n            if (module.determine.isValid()) {\n              module.debug('Form has no validation errors, submitting');\n              module.set.success();\n\n              if (ignoreCallbacks !== true) {\n                return settings.onSuccess.call(element, event, values);\n              }\n            } else {\n              module.debug('Form has errors');\n              module.set.error();\n\n              if (!settings.inline) {\n                module.add.errors(formErrors);\n              } // prevent ajax submit\n\n\n              if ($module.data('moduleApi') !== undefined) {\n                event.stopImmediatePropagation();\n              }\n\n              if (ignoreCallbacks !== true) {\n                return settings.onFailure.call(element, formErrors, values);\n              }\n            }\n          },\n          // takes a validation object and returns whether field passes validation\n          field: function (field, fieldName, showErrors) {\n            showErrors = showErrors !== undefined ? showErrors : true;\n\n            if (typeof field == 'string') {\n              module.verbose('Validating field', field);\n              fieldName = field;\n              field = validation[field];\n            }\n\n            var identifier = field.identifier || fieldName,\n                $field = module.get.field(identifier),\n                $dependsField = field.depends ? module.get.field(field.depends) : false,\n                fieldValid = true,\n                fieldErrors = [];\n\n            if (!field.identifier) {\n              module.debug('Using field name as identifier', identifier);\n              field.identifier = identifier;\n            }\n\n            if ($field.prop('disabled')) {\n              module.debug('Field is disabled. Skipping', identifier);\n              fieldValid = true;\n            } else if (field.optional && module.is.blank($field)) {\n              module.debug('Field is optional and blank. Skipping', identifier);\n              fieldValid = true;\n            } else if (field.depends && module.is.empty($dependsField)) {\n              module.debug('Field depends on another value that is not present or empty. Skipping', $dependsField);\n              fieldValid = true;\n            } else if (field.rules !== undefined) {\n              $.each(field.rules, function (index, rule) {\n                if (module.has.field(identifier) && !module.validate.rule(field, rule)) {\n                  module.debug('Field is invalid', identifier, rule.type);\n                  fieldErrors.push(module.get.prompt(rule, field));\n                  fieldValid = false;\n                }\n              });\n            }\n\n            if (fieldValid) {\n              if (showErrors) {\n                module.remove.prompt(identifier, fieldErrors);\n                settings.onValid.call($field);\n              }\n            } else {\n              if (showErrors) {\n                formErrors = formErrors.concat(fieldErrors);\n                module.add.prompt(identifier, fieldErrors);\n                settings.onInvalid.call($field, fieldErrors);\n              }\n\n              return false;\n            }\n\n            return true;\n          },\n          // takes validation rule and returns whether field passes rule\n          rule: function (field, rule) {\n            var $field = module.get.field(field.identifier),\n                type = rule.type,\n                value = $field.val(),\n                isValid = true,\n                ancillary = module.get.ancillaryValue(rule),\n                ruleName = module.get.ruleName(rule),\n                ruleFunction = settings.rules[ruleName];\n\n            if (!$.isFunction(ruleFunction)) {\n              module.error(error.noRule, ruleName);\n              return;\n            } // cast to string avoiding encoding special values\n\n\n            value = value === undefined || value === '' || value === null ? '' : $.trim(value + '');\n            return ruleFunction.call($field, value, ancillary);\n          }\n        },\n        setting: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n      module.initialize();\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.form.settings = {\n    name: 'Form',\n    namespace: 'form',\n    debug: false,\n    verbose: false,\n    performance: true,\n    fields: false,\n    keyboardShortcuts: true,\n    on: 'submit',\n    inline: false,\n    delay: 200,\n    revalidate: true,\n    transition: 'scale',\n    duration: 200,\n    onValid: function () {},\n    onInvalid: function () {},\n    onSuccess: function () {\n      return true;\n    },\n    onFailure: function () {\n      return false;\n    },\n    metadata: {\n      defaultValue: 'default',\n      validate: 'validate'\n    },\n    regExp: {\n      htmlID: /^[a-zA-Z][\\w:.-]*$/g,\n      bracket: /\\[(.*)\\]/i,\n      decimal: /^\\d+\\.?\\d*$/,\n      email: /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,\n      escape: /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\n      flags: /^\\/(.*)\\/(.*)?/,\n      integer: /^\\-?\\d+$/,\n      number: /^\\-?\\d*(\\.\\d+)?$/,\n      url: /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/i\n    },\n    text: {\n      unspecifiedRule: 'Please enter a valid value',\n      unspecifiedField: 'This field'\n    },\n    prompt: {\n      empty: '{name} must have a value',\n      checked: '{name} must be checked',\n      email: '{name} must be a valid e-mail',\n      url: '{name} must be a valid url',\n      regExp: '{name} is not formatted correctly',\n      integer: '{name} must be an integer',\n      decimal: '{name} must be a decimal number',\n      number: '{name} must be set to a number',\n      is: '{name} must be \"{ruleValue}\"',\n      isExactly: '{name} must be exactly \"{ruleValue}\"',\n      not: '{name} cannot be set to \"{ruleValue}\"',\n      notExactly: '{name} cannot be set to exactly \"{ruleValue}\"',\n      contain: '{name} must contain \"{ruleValue}\"',\n      containExactly: '{name} must contain exactly \"{ruleValue}\"',\n      doesntContain: '{name} cannot contain  \"{ruleValue}\"',\n      doesntContainExactly: '{name} cannot contain exactly \"{ruleValue}\"',\n      minLength: '{name} must be at least {ruleValue} characters',\n      length: '{name} must be at least {ruleValue} characters',\n      exactLength: '{name} must be exactly {ruleValue} characters',\n      maxLength: '{name} cannot be longer than {ruleValue} characters',\n      match: '{name} must match {ruleValue} field',\n      different: '{name} must have a different value than {ruleValue} field',\n      creditCard: '{name} must be a valid credit card number',\n      minCount: '{name} must have at least {ruleValue} choices',\n      exactCount: '{name} must have exactly {ruleValue} choices',\n      maxCount: '{name} must have {ruleValue} or less choices'\n    },\n    selector: {\n      checkbox: 'input[type=\"checkbox\"], input[type=\"radio\"]',\n      clear: '.clear',\n      field: 'input, textarea, select',\n      group: '.field',\n      input: 'input',\n      message: '.error.message',\n      prompt: '.prompt.label',\n      radio: 'input[type=\"radio\"]',\n      reset: '.reset:not([type=\"reset\"])',\n      submit: '.submit:not([type=\"submit\"])',\n      uiCheckbox: '.ui.checkbox',\n      uiDropdown: '.ui.dropdown'\n    },\n    className: {\n      error: 'error',\n      label: 'ui prompt label',\n      pressed: 'down',\n      success: 'success'\n    },\n    error: {\n      identifier: 'You must specify a string identifier for each field',\n      method: 'The method you called is not defined.',\n      noRule: 'There is no rule matching the one you specified',\n      oldSyntax: 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.'\n    },\n    templates: {\n      // template that produces error message\n      error: function (errors) {\n        var html = '<ul class=\"list\">';\n        $.each(errors, function (index, value) {\n          html += '<li>' + value + '</li>';\n        });\n        html += '</ul>';\n        return $(html);\n      },\n      // template that produces label\n      prompt: function (errors) {\n        return $('<div/>').addClass('ui basic red pointing prompt label').html(errors[0]);\n      }\n    },\n    rules: {\n      // is not empty or blank string\n      empty: function (value) {\n        return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);\n      },\n      // checkbox checked\n      checked: function () {\n        return $(this).filter(':checked').length > 0;\n      },\n      // is most likely an email\n      email: function (value) {\n        return $.fn.form.settings.regExp.email.test(value);\n      },\n      // value is most likely url\n      url: function (value) {\n        return $.fn.form.settings.regExp.url.test(value);\n      },\n      // matches specified regExp\n      regExp: function (value, regExp) {\n        if (regExp instanceof RegExp) {\n          return value.match(regExp);\n        }\n\n        var regExpParts = regExp.match($.fn.form.settings.regExp.flags),\n            flags; // regular expression specified as /baz/gi (flags)\n\n        if (regExpParts) {\n          regExp = regExpParts.length >= 2 ? regExpParts[1] : regExp;\n          flags = regExpParts.length >= 3 ? regExpParts[2] : '';\n        }\n\n        return value.match(new RegExp(regExp, flags));\n      },\n      // is valid integer or matches range\n      integer: function (value, range) {\n        var intRegExp = $.fn.form.settings.regExp.integer,\n            min,\n            max,\n            parts;\n\n        if (!range || ['', '..'].indexOf(range) !== -1) {// do nothing\n        } else if (range.indexOf('..') == -1) {\n          if (intRegExp.test(range)) {\n            min = max = range - 0;\n          }\n        } else {\n          parts = range.split('..', 2);\n\n          if (intRegExp.test(parts[0])) {\n            min = parts[0] - 0;\n          }\n\n          if (intRegExp.test(parts[1])) {\n            max = parts[1] - 0;\n          }\n        }\n\n        return intRegExp.test(value) && (min === undefined || value >= min) && (max === undefined || value <= max);\n      },\n      // is valid number (with decimal)\n      decimal: function (value) {\n        return $.fn.form.settings.regExp.decimal.test(value);\n      },\n      // is valid number\n      number: function (value) {\n        return $.fn.form.settings.regExp.number.test(value);\n      },\n      // is value (case insensitive)\n      is: function (value, text) {\n        text = typeof text == 'string' ? text.toLowerCase() : text;\n        value = typeof value == 'string' ? value.toLowerCase() : value;\n        return value == text;\n      },\n      // is value\n      isExactly: function (value, text) {\n        return value == text;\n      },\n      // value is not another value (case insensitive)\n      not: function (value, notValue) {\n        value = typeof value == 'string' ? value.toLowerCase() : value;\n        notValue = typeof notValue == 'string' ? notValue.toLowerCase() : notValue;\n        return value != notValue;\n      },\n      // value is not another value (case sensitive)\n      notExactly: function (value, notValue) {\n        return value != notValue;\n      },\n      // value contains text (insensitive)\n      contains: function (value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text, 'i')) !== -1;\n      },\n      // value contains text (case sensitive)\n      containsExactly: function (value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text)) !== -1;\n      },\n      // value contains text (insensitive)\n      doesntContain: function (value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text, 'i')) === -1;\n      },\n      // value contains text (case sensitive)\n      doesntContainExactly: function (value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text)) === -1;\n      },\n      // is at least string length\n      minLength: function (value, requiredLength) {\n        return value !== undefined ? value.length >= requiredLength : false;\n      },\n      // see rls notes for 2.0.6 (this is a duplicate of minLength)\n      length: function (value, requiredLength) {\n        return value !== undefined ? value.length >= requiredLength : false;\n      },\n      // is exactly length\n      exactLength: function (value, requiredLength) {\n        return value !== undefined ? value.length == requiredLength : false;\n      },\n      // is less than length\n      maxLength: function (value, maxLength) {\n        return value !== undefined ? value.length <= maxLength : false;\n      },\n      // matches another field\n      match: function (value, identifier) {\n        var $form = $(this),\n            matchingValue;\n\n        if ($('[data-validate=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[data-validate=\"' + identifier + '\"]').val();\n        } else if ($('#' + identifier).length > 0) {\n          matchingValue = $('#' + identifier).val();\n        } else if ($('[name=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '\"]').val();\n        } else if ($('[name=\"' + identifier + '[]\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '[]\"]');\n        }\n\n        return matchingValue !== undefined ? value.toString() == matchingValue.toString() : false;\n      },\n      // different than another field\n      different: function (value, identifier) {\n        // use either id or name of field\n        var $form = $(this),\n            matchingValue;\n\n        if ($('[data-validate=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[data-validate=\"' + identifier + '\"]').val();\n        } else if ($('#' + identifier).length > 0) {\n          matchingValue = $('#' + identifier).val();\n        } else if ($('[name=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '\"]').val();\n        } else if ($('[name=\"' + identifier + '[]\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '[]\"]');\n        }\n\n        return matchingValue !== undefined ? value.toString() !== matchingValue.toString() : false;\n      },\n      creditCard: function (cardNumber, cardTypes) {\n        var cards = {\n          visa: {\n            pattern: /^4/,\n            length: [16]\n          },\n          amex: {\n            pattern: /^3[47]/,\n            length: [15]\n          },\n          mastercard: {\n            pattern: /^5[1-5]/,\n            length: [16]\n          },\n          discover: {\n            pattern: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,\n            length: [16]\n          },\n          unionPay: {\n            pattern: /^(62|88)/,\n            length: [16, 17, 18, 19]\n          },\n          jcb: {\n            pattern: /^35(2[89]|[3-8][0-9])/,\n            length: [16]\n          },\n          maestro: {\n            pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,\n            length: [12, 13, 14, 15, 16, 17, 18, 19]\n          },\n          dinersClub: {\n            pattern: /^(30[0-5]|^36)/,\n            length: [14]\n          },\n          laser: {\n            pattern: /^(6304|670[69]|6771)/,\n            length: [16, 17, 18, 19]\n          },\n          visaElectron: {\n            pattern: /^(4026|417500|4508|4844|491(3|7))/,\n            length: [16]\n          }\n        },\n            valid = {},\n            validCard = false,\n            requiredTypes = typeof cardTypes == 'string' ? cardTypes.split(',') : false,\n            unionPay,\n            validation;\n\n        if (typeof cardNumber !== 'string' || cardNumber.length === 0) {\n          return;\n        } // allow dashes in card\n\n\n        cardNumber = cardNumber.replace(/[\\-]/g, ''); // verify card types\n\n        if (requiredTypes) {\n          $.each(requiredTypes, function (index, type) {\n            // verify each card type\n            validation = cards[type];\n\n            if (validation) {\n              valid = {\n                length: $.inArray(cardNumber.length, validation.length) !== -1,\n                pattern: cardNumber.search(validation.pattern) !== -1\n              };\n\n              if (valid.length && valid.pattern) {\n                validCard = true;\n              }\n            }\n          });\n\n          if (!validCard) {\n            return false;\n          }\n        } // skip luhn for UnionPay\n\n\n        unionPay = {\n          number: $.inArray(cardNumber.length, cards.unionPay.length) !== -1,\n          pattern: cardNumber.search(cards.unionPay.pattern) !== -1\n        };\n\n        if (unionPay.number && unionPay.pattern) {\n          return true;\n        } // verify luhn, adapted from  <https://gist.github.com/2134376>\n\n\n        var length = cardNumber.length,\n            multiple = 0,\n            producedValue = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n            sum = 0;\n\n        while (length--) {\n          sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];\n          multiple ^= 1;\n        }\n\n        return sum % 10 === 0 && sum > 0;\n      },\n      minCount: function (value, minCount) {\n        if (minCount == 0) {\n          return true;\n        }\n\n        if (minCount == 1) {\n          return value !== '';\n        }\n\n        return value.split(',').length >= minCount;\n      },\n      exactCount: function (value, exactCount) {\n        if (exactCount == 0) {\n          return value === '';\n        }\n\n        if (exactCount == 1) {\n          return value !== '' && value.search(',') === -1;\n        }\n\n        return value.split(',').length == exactCount;\n      },\n      maxCount: function (value, maxCount) {\n        if (maxCount == 0) {\n          return false;\n        }\n\n        if (maxCount == 1) {\n          return value.search(',') === -1;\n        }\n\n        return value.split(',').length <= maxCount;\n      }\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Accordion\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.accordion = function (parameters) {\n    var $allModules = $(this),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.accordion.settings, parameters) : $.extend({}, $.fn.accordion.settings),\n          className = settings.className,\n          namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          moduleSelector = $allModules.selector || '',\n          $module = $(this),\n          $title = $module.find(selector.title),\n          $content = $module.find(selector.content),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          observer,\n          module;\n      module = {\n        initialize: function () {\n          module.debug('Initializing', $module);\n          module.bind.events();\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.debug('Destroying previous instance', $module);\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        refresh: function () {\n          $title = $module.find(selector.title);\n          $content = $module.find(selector.content);\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            observer = new MutationObserver(function (mutations) {\n              module.debug('DOM tree modified, updating selector cache');\n              module.refresh();\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        bind: {\n          events: function () {\n            module.debug('Binding delegated events');\n            $module.on(settings.on + eventNamespace, selector.trigger, module.event.click);\n          }\n        },\n        event: {\n          click: function () {\n            module.toggle.call(this);\n          }\n        },\n        toggle: function (query) {\n          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),\n              $activeContent = $activeTitle.next($content),\n              isAnimating = $activeContent.hasClass(className.animating),\n              isActive = $activeContent.hasClass(className.active),\n              isOpen = isActive && !isAnimating,\n              isOpening = !isActive && isAnimating;\n          module.debug('Toggling visibility of content', $activeTitle);\n\n          if (isOpen || isOpening) {\n            if (settings.collapsible) {\n              module.close.call($activeTitle);\n            } else {\n              module.debug('Cannot close accordion content collapsing is disabled');\n            }\n          } else {\n            module.open.call($activeTitle);\n          }\n        },\n        open: function (query) {\n          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),\n              $activeContent = $activeTitle.next($content),\n              isAnimating = $activeContent.hasClass(className.animating),\n              isActive = $activeContent.hasClass(className.active),\n              isOpen = isActive || isAnimating;\n\n          if (isOpen) {\n            module.debug('Accordion already open, skipping', $activeContent);\n            return;\n          }\n\n          module.debug('Opening accordion content', $activeTitle);\n          settings.onOpening.call($activeContent);\n          settings.onChanging.call($activeContent);\n\n          if (settings.exclusive) {\n            module.closeOthers.call($activeTitle);\n          }\n\n          $activeTitle.addClass(className.active);\n          $activeContent.stop(true, true).addClass(className.animating);\n\n          if (settings.animateChildren) {\n            if ($.fn.transition !== undefined && $module.transition('is supported')) {\n              $activeContent.children().transition({\n                animation: 'fade in',\n                queue: false,\n                useFailSafe: true,\n                debug: settings.debug,\n                verbose: settings.verbose,\n                duration: settings.duration\n              });\n            } else {\n              $activeContent.children().stop(true, true).animate({\n                opacity: 1\n              }, settings.duration, module.resetOpacity);\n            }\n          }\n\n          $activeContent.slideDown(settings.duration, settings.easing, function () {\n            $activeContent.removeClass(className.animating).addClass(className.active);\n            module.reset.display.call(this);\n            settings.onOpen.call(this);\n            settings.onChange.call(this);\n          });\n        },\n        close: function (query) {\n          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),\n              $activeContent = $activeTitle.next($content),\n              isAnimating = $activeContent.hasClass(className.animating),\n              isActive = $activeContent.hasClass(className.active),\n              isOpening = !isActive && isAnimating,\n              isClosing = isActive && isAnimating;\n\n          if ((isActive || isOpening) && !isClosing) {\n            module.debug('Closing accordion content', $activeContent);\n            settings.onClosing.call($activeContent);\n            settings.onChanging.call($activeContent);\n            $activeTitle.removeClass(className.active);\n            $activeContent.stop(true, true).addClass(className.animating);\n\n            if (settings.animateChildren) {\n              if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $activeContent.children().transition({\n                  animation: 'fade out',\n                  queue: false,\n                  useFailSafe: true,\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  duration: settings.duration\n                });\n              } else {\n                $activeContent.children().stop(true, true).animate({\n                  opacity: 0\n                }, settings.duration, module.resetOpacity);\n              }\n            }\n\n            $activeContent.slideUp(settings.duration, settings.easing, function () {\n              $activeContent.removeClass(className.animating).removeClass(className.active);\n              module.reset.display.call(this);\n              settings.onClose.call(this);\n              settings.onChange.call(this);\n            });\n          }\n        },\n        closeOthers: function (index) {\n          var $activeTitle = index !== undefined ? $title.eq(index) : $(this).closest(selector.title),\n              $parentTitles = $activeTitle.parents(selector.content).prev(selector.title),\n              $activeAccordion = $activeTitle.closest(selector.accordion),\n              activeSelector = selector.title + '.' + className.active + ':visible',\n              activeContent = selector.content + '.' + className.active + ':visible',\n              $openTitles,\n              $nestedTitles,\n              $openContents;\n\n          if (settings.closeNested) {\n            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);\n            $openContents = $openTitles.next($content);\n          } else {\n            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);\n            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);\n            $openTitles = $openTitles.not($nestedTitles);\n            $openContents = $openTitles.next($content);\n          }\n\n          if ($openTitles.length > 0) {\n            module.debug('Exclusive enabled, closing other content', $openTitles);\n            $openTitles.removeClass(className.active);\n            $openContents.removeClass(className.animating).stop(true, true);\n\n            if (settings.animateChildren) {\n              if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $openContents.children().transition({\n                  animation: 'fade out',\n                  useFailSafe: true,\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  duration: settings.duration\n                });\n              } else {\n                $openContents.children().stop(true, true).animate({\n                  opacity: 0\n                }, settings.duration, module.resetOpacity);\n              }\n            }\n\n            $openContents.slideUp(settings.duration, settings.easing, function () {\n              $(this).removeClass(className.active);\n              module.reset.display.call(this);\n            });\n          }\n        },\n        reset: {\n          display: function () {\n            module.verbose('Removing inline display from element', this);\n            $(this).css('display', '');\n\n            if ($(this).attr('style') === '') {\n              $(this).attr('style', '').removeAttr('style');\n            }\n          },\n          opacity: function () {\n            module.verbose('Removing inline opacity from element', this);\n            $(this).css('opacity', '');\n\n            if ($(this).attr('style') === '') {\n              $(this).attr('style', '').removeAttr('style');\n            }\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          module.debug('Changing internal', name, value);\n\n          if (value !== undefined) {\n            if ($.isPlainObject(name)) {\n              $.extend(true, module, name);\n            } else {\n              module[name] = value;\n            }\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.accordion.settings = {\n    name: 'Accordion',\n    namespace: 'accordion',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    on: 'click',\n    // event on title that opens accordion\n    observeChanges: true,\n    // whether accordion should automatically refresh on DOM insertion\n    exclusive: true,\n    // whether a single accordion content panel should be open at once\n    collapsible: true,\n    // whether accordion content can be closed\n    closeNested: false,\n    // whether nested content should be closed when a panel is closed\n    animateChildren: true,\n    // whether children opacity should be animated\n    duration: 350,\n    // duration of animation\n    easing: 'easeOutQuad',\n    // easing equation for animation\n    onOpening: function () {},\n    // callback before open animation\n    onClosing: function () {},\n    // callback before closing animation\n    onChanging: function () {},\n    // callback before closing or opening animation\n    onOpen: function () {},\n    // callback after open animation\n    onClose: function () {},\n    // callback after closing animation\n    onChange: function () {},\n    // callback after closing or opening animation\n    error: {\n      method: 'The method you called is not defined'\n    },\n    className: {\n      active: 'active',\n      animating: 'animating'\n    },\n    selector: {\n      accordion: '.accordion',\n      title: '.title',\n      trigger: '.title',\n      content: '.content'\n    }\n  }; // Adds easing\n\n  $.extend($.easing, {\n    easeOutQuad: function (x, t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    }\n  });\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Checkbox\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.checkbox = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.extend(true, {}, $.fn.checkbox.settings, parameters),\n          className = settings.className,\n          namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $label = $(this).children(selector.label),\n          $input = $(this).children(selector.input),\n          input = $input[0],\n          initialLoad = false,\n          shortcutPressed = false,\n          instance = $module.data(moduleNamespace),\n          observer,\n          element = this,\n          module;\n      module = {\n        initialize: function () {\n          module.verbose('Initializing checkbox', settings);\n          module.create.label();\n          module.bind.events();\n          module.set.tabbable();\n          module.hide.input();\n          module.observeChanges();\n          module.instantiate();\n          module.setup();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying module');\n          module.unbind.events();\n          module.show.input();\n          $module.removeData(moduleNamespace);\n        },\n        fix: {\n          reference: function () {\n            if ($module.is(selector.input)) {\n              module.debug('Behavior called on <input> adjusting invoked element');\n              $module = $module.closest(selector.checkbox);\n              module.refresh();\n            }\n          }\n        },\n        setup: function () {\n          module.set.initialLoad();\n\n          if (module.is.indeterminate()) {\n            module.debug('Initial value is indeterminate');\n            module.indeterminate();\n          } else if (module.is.checked()) {\n            module.debug('Initial value is checked');\n            module.check();\n          } else {\n            module.debug('Initial value is unchecked');\n            module.uncheck();\n          }\n\n          module.remove.initialLoad();\n        },\n        refresh: function () {\n          $label = $module.children(selector.label);\n          $input = $module.children(selector.input);\n          input = $input[0];\n        },\n        hide: {\n          input: function () {\n            module.verbose('Modifying <input> z-index to be unselectable');\n            $input.addClass(className.hidden);\n          }\n        },\n        show: {\n          input: function () {\n            module.verbose('Modifying <input> z-index to be selectable');\n            $input.removeClass(className.hidden);\n          }\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            observer = new MutationObserver(function (mutations) {\n              module.debug('DOM tree modified, updating selector cache');\n              module.refresh();\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        attachEvents: function (selector, event) {\n          var $element = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($element.length > 0) {\n            module.debug('Attaching checkbox events to element', selector, event);\n            $element.on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound);\n          }\n        },\n        event: {\n          click: function (event) {\n            var $target = $(event.target);\n\n            if ($target.is(selector.input)) {\n              module.verbose('Using default check action on initialized checkbox');\n              return;\n            }\n\n            if ($target.is(selector.link)) {\n              module.debug('Clicking link inside checkbox, skipping toggle');\n              return;\n            }\n\n            module.toggle();\n            $input.focus();\n            event.preventDefault();\n          },\n          keydown: function (event) {\n            var key = event.which,\n                keyCode = {\n              enter: 13,\n              space: 32,\n              escape: 27\n            };\n\n            if (key == keyCode.escape) {\n              module.verbose('Escape key pressed blurring field');\n              $input.blur();\n              shortcutPressed = true;\n            } else if (!event.ctrlKey && (key == keyCode.space || key == keyCode.enter)) {\n              module.verbose('Enter/space key pressed, toggling checkbox');\n              module.toggle();\n              shortcutPressed = true;\n            } else {\n              shortcutPressed = false;\n            }\n          },\n          keyup: function (event) {\n            if (shortcutPressed) {\n              event.preventDefault();\n            }\n          }\n        },\n        check: function () {\n          if (!module.should.allowCheck()) {\n            return;\n          }\n\n          module.debug('Checking checkbox', $input);\n          module.set.checked();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onChecked.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        uncheck: function () {\n          if (!module.should.allowUncheck()) {\n            return;\n          }\n\n          module.debug('Unchecking checkbox');\n          module.set.unchecked();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onUnchecked.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        indeterminate: function () {\n          if (module.should.allowIndeterminate()) {\n            module.debug('Checkbox is already indeterminate');\n            return;\n          }\n\n          module.debug('Making checkbox indeterminate');\n          module.set.indeterminate();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onIndeterminate.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        determinate: function () {\n          if (module.should.allowDeterminate()) {\n            module.debug('Checkbox is already determinate');\n            return;\n          }\n\n          module.debug('Making checkbox determinate');\n          module.set.determinate();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onDeterminate.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        enable: function () {\n          if (module.is.enabled()) {\n            module.debug('Checkbox is already enabled');\n            return;\n          }\n\n          module.debug('Enabling checkbox');\n          module.set.enabled();\n          settings.onEnable.call(input); // preserve legacy callbacks\n\n          settings.onEnabled.call(input);\n        },\n        disable: function () {\n          if (module.is.disabled()) {\n            module.debug('Checkbox is already disabled');\n            return;\n          }\n\n          module.debug('Disabling checkbox');\n          module.set.disabled();\n          settings.onDisable.call(input); // preserve legacy callbacks\n\n          settings.onDisabled.call(input);\n        },\n        get: {\n          radios: function () {\n            var name = module.get.name();\n            return $('input[name=\"' + name + '\"]').closest(selector.checkbox);\n          },\n          otherRadios: function () {\n            return module.get.radios().not($module);\n          },\n          name: function () {\n            return $input.attr('name');\n          }\n        },\n        is: {\n          initialLoad: function () {\n            return initialLoad;\n          },\n          radio: function () {\n            return $input.hasClass(className.radio) || $input.attr('type') == 'radio';\n          },\n          indeterminate: function () {\n            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');\n          },\n          checked: function () {\n            return $input.prop('checked') !== undefined && $input.prop('checked');\n          },\n          disabled: function () {\n            return $input.prop('disabled') !== undefined && $input.prop('disabled');\n          },\n          enabled: function () {\n            return !module.is.disabled();\n          },\n          determinate: function () {\n            return !module.is.indeterminate();\n          },\n          unchecked: function () {\n            return !module.is.checked();\n          }\n        },\n        should: {\n          allowCheck: function () {\n            if (module.is.determinate() && module.is.checked() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow check, checkbox is already checked');\n              return false;\n            }\n\n            if (settings.beforeChecked.apply(input) === false) {\n              module.debug('Should not allow check, beforeChecked cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowUncheck: function () {\n            if (module.is.determinate() && module.is.unchecked() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow uncheck, checkbox is already unchecked');\n              return false;\n            }\n\n            if (settings.beforeUnchecked.apply(input) === false) {\n              module.debug('Should not allow uncheck, beforeUnchecked cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowIndeterminate: function () {\n            if (module.is.indeterminate() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow indeterminate, checkbox is already indeterminate');\n              return false;\n            }\n\n            if (settings.beforeIndeterminate.apply(input) === false) {\n              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowDeterminate: function () {\n            if (module.is.determinate() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow determinate, checkbox is already determinate');\n              return false;\n            }\n\n            if (settings.beforeDeterminate.apply(input) === false) {\n              module.debug('Should not allow determinate, beforeDeterminate cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          forceCallbacks: function () {\n            return module.is.initialLoad() && settings.fireOnInit;\n          },\n          ignoreCallbacks: function () {\n            return initialLoad && !settings.fireOnInit;\n          }\n        },\n        can: {\n          change: function () {\n            return !($module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly'));\n          },\n          uncheck: function () {\n            return typeof settings.uncheckable === 'boolean' ? settings.uncheckable : !module.is.radio();\n          }\n        },\n        set: {\n          initialLoad: function () {\n            initialLoad = true;\n          },\n          checked: function () {\n            module.verbose('Setting class to checked');\n            $module.removeClass(className.indeterminate).addClass(className.checked);\n\n            if (module.is.radio()) {\n              module.uncheckOthers();\n            }\n\n            if (!module.is.indeterminate() && module.is.checked()) {\n              module.debug('Input is already checked, skipping input property change');\n              return;\n            }\n\n            module.verbose('Setting state to checked', input);\n            $input.prop('indeterminate', false).prop('checked', true);\n            module.trigger.change();\n          },\n          unchecked: function () {\n            module.verbose('Removing checked class');\n            $module.removeClass(className.indeterminate).removeClass(className.checked);\n\n            if (!module.is.indeterminate() && module.is.unchecked()) {\n              module.debug('Input is already unchecked');\n              return;\n            }\n\n            module.debug('Setting state to unchecked');\n            $input.prop('indeterminate', false).prop('checked', false);\n            module.trigger.change();\n          },\n          indeterminate: function () {\n            module.verbose('Setting class to indeterminate');\n            $module.addClass(className.indeterminate);\n\n            if (module.is.indeterminate()) {\n              module.debug('Input is already indeterminate, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to indeterminate');\n            $input.prop('indeterminate', true);\n            module.trigger.change();\n          },\n          determinate: function () {\n            module.verbose('Removing indeterminate class');\n            $module.removeClass(className.indeterminate);\n\n            if (module.is.determinate()) {\n              module.debug('Input is already determinate, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to determinate');\n            $input.prop('indeterminate', false);\n          },\n          disabled: function () {\n            module.verbose('Setting class to disabled');\n            $module.addClass(className.disabled);\n\n            if (module.is.disabled()) {\n              module.debug('Input is already disabled, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to disabled');\n            $input.prop('disabled', 'disabled');\n            module.trigger.change();\n          },\n          enabled: function () {\n            module.verbose('Removing disabled class');\n            $module.removeClass(className.disabled);\n\n            if (module.is.enabled()) {\n              module.debug('Input is already enabled, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to enabled');\n            $input.prop('disabled', false);\n            module.trigger.change();\n          },\n          tabbable: function () {\n            module.verbose('Adding tabindex to checkbox');\n\n            if ($input.attr('tabindex') === undefined) {\n              $input.attr('tabindex', 0);\n            }\n          }\n        },\n        remove: {\n          initialLoad: function () {\n            initialLoad = false;\n          }\n        },\n        trigger: {\n          change: function () {\n            var events = document.createEvent('HTMLEvents'),\n                inputElement = $input[0];\n\n            if (inputElement) {\n              module.verbose('Triggering native change event');\n              events.initEvent('change', true, false);\n              inputElement.dispatchEvent(events);\n            }\n          }\n        },\n        create: {\n          label: function () {\n            if ($input.prevAll(selector.label).length > 0) {\n              $input.prev(selector.label).detach().insertAfter($input);\n              module.debug('Moving existing label', $label);\n            } else if (!module.has.label()) {\n              $label = $('<label>').insertAfter($input);\n              module.debug('Creating label', $label);\n            }\n          }\n        },\n        has: {\n          label: function () {\n            return $label.length > 0;\n          }\n        },\n        bind: {\n          events: function () {\n            module.verbose('Attaching checkbox events');\n            $module.on('click' + eventNamespace, module.event.click).on('keydown' + eventNamespace, selector.input, module.event.keydown).on('keyup' + eventNamespace, selector.input, module.event.keyup);\n          }\n        },\n        unbind: {\n          events: function () {\n            module.debug('Removing events');\n            $module.off(eventNamespace);\n          }\n        },\n        uncheckOthers: function () {\n          var $radios = module.get.otherRadios();\n          module.debug('Unchecking other radios', $radios);\n          $radios.removeClass(className.checked);\n        },\n        toggle: function () {\n          if (!module.can.change()) {\n            if (!module.is.radio()) {\n              module.debug('Checkbox is read-only or disabled, ignoring toggle');\n            }\n\n            return;\n          }\n\n          if (module.is.indeterminate() || module.is.unchecked()) {\n            module.debug('Currently unchecked');\n            module.check();\n          } else if (module.is.checked() && module.can.uncheck()) {\n            module.debug('Currently checked');\n            module.uncheck();\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.checkbox.settings = {\n    name: 'Checkbox',\n    namespace: 'checkbox',\n    silent: false,\n    debug: false,\n    verbose: true,\n    performance: true,\n    // delegated event context\n    uncheckable: 'auto',\n    fireOnInit: false,\n    onChange: function () {},\n    beforeChecked: function () {},\n    beforeUnchecked: function () {},\n    beforeDeterminate: function () {},\n    beforeIndeterminate: function () {},\n    onChecked: function () {},\n    onUnchecked: function () {},\n    onDeterminate: function () {},\n    onIndeterminate: function () {},\n    onEnable: function () {},\n    onDisable: function () {},\n    // preserve misspelled callbacks (will be removed in 3.0)\n    onEnabled: function () {},\n    onDisabled: function () {},\n    className: {\n      checked: 'checked',\n      indeterminate: 'indeterminate',\n      disabled: 'disabled',\n      hidden: 'hidden',\n      radio: 'radio',\n      readOnly: 'read-only'\n    },\n    error: {\n      method: 'The method you called is not defined'\n    },\n    selector: {\n      checkbox: '.ui.checkbox',\n      label: 'label, .box',\n      input: 'input[type=\"checkbox\"], input[type=\"radio\"]',\n      link: 'a[href]'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Dimmer\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.dimmer = function (parameters) {\n    var $allModules = $(this),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dimmer.settings, parameters) : $.extend({}, $.fn.dimmer.settings),\n          selector = settings.selector,\n          namespace = settings.namespace,\n          className = settings.className,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          moduleSelector = $allModules.selector || '',\n          clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click',\n          $module = $(this),\n          $dimmer,\n          $dimmable,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        preinitialize: function () {\n          if (module.is.dimmer()) {\n            $dimmable = $module.parent();\n            $dimmer = $module;\n          } else {\n            $dimmable = $module;\n\n            if (module.has.dimmer()) {\n              if (settings.dimmerName) {\n                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);\n              } else {\n                $dimmer = $dimmable.find(selector.dimmer);\n              }\n            } else {\n              $dimmer = module.create();\n            }\n          }\n        },\n        initialize: function () {\n          module.debug('Initializing dimmer', settings);\n          module.bind.events();\n          module.set.dimmable();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module', $dimmer);\n          module.unbind.events();\n          module.remove.variation();\n          $dimmable.off(eventNamespace);\n        },\n        bind: {\n          events: function () {\n            if (settings.on == 'hover') {\n              $dimmable.on('mouseenter' + eventNamespace, module.show).on('mouseleave' + eventNamespace, module.hide);\n            } else if (settings.on == 'click') {\n              $dimmable.on(clickEvent + eventNamespace, module.toggle);\n            }\n\n            if (module.is.page()) {\n              module.debug('Setting as a page dimmer', $dimmable);\n              module.set.pageDimmer();\n            }\n\n            if (module.is.closable()) {\n              module.verbose('Adding dimmer close event', $dimmer);\n              $dimmable.on(clickEvent + eventNamespace, selector.dimmer, module.event.click);\n            }\n          }\n        },\n        unbind: {\n          events: function () {\n            $module.removeData(moduleNamespace);\n            $dimmable.off(eventNamespace);\n          }\n        },\n        event: {\n          click: function (event) {\n            module.verbose('Determining if event occured on dimmer', event);\n\n            if ($dimmer.find(event.target).length === 0 || $(event.target).is(selector.content)) {\n              module.hide();\n              event.stopImmediatePropagation();\n            }\n          }\n        },\n        addContent: function (element) {\n          var $content = $(element);\n          module.debug('Add content to dimmer', $content);\n\n          if ($content.parent()[0] !== $dimmer[0]) {\n            $content.detach().appendTo($dimmer);\n          }\n        },\n        create: function () {\n          var $element = $(settings.template.dimmer());\n\n          if (settings.dimmerName) {\n            module.debug('Creating named dimmer', settings.dimmerName);\n            $element.addClass(settings.dimmerName);\n          }\n\n          $element.appendTo($dimmable);\n          return $element;\n        },\n        show: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.debug('Showing dimmer', $dimmer, settings);\n          module.set.variation();\n\n          if ((!module.is.dimmed() || module.is.animating()) && module.is.enabled()) {\n            module.animate.show(callback);\n            settings.onShow.call(element);\n            settings.onChange.call(element);\n          } else {\n            module.debug('Dimmer is already shown or disabled');\n          }\n        },\n        hide: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.dimmed() || module.is.animating()) {\n            module.debug('Hiding dimmer', $dimmer);\n            module.animate.hide(callback);\n            settings.onHide.call(element);\n            settings.onChange.call(element);\n          } else {\n            module.debug('Dimmer is not visible');\n          }\n        },\n        toggle: function () {\n          module.verbose('Toggling dimmer visibility', $dimmer);\n\n          if (!module.is.dimmed()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        animate: {\n          show: function (callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\n              if (settings.useFlex) {\n                module.debug('Using flex dimmer');\n                module.remove.legacy();\n              } else {\n                module.debug('Using legacy non-flex dimmer');\n                module.set.legacy();\n              }\n\n              if (settings.opacity !== 'auto') {\n                module.set.opacity();\n              }\n\n              $dimmer.transition({\n                displayType: settings.useFlex ? 'flex' : 'block',\n                animation: settings.transition + ' in',\n                queue: false,\n                duration: module.get.duration(),\n                useFailSafe: true,\n                onStart: function () {\n                  module.set.dimmed();\n                },\n                onComplete: function () {\n                  module.set.active();\n                  callback();\n                }\n              });\n            } else {\n              module.verbose('Showing dimmer animation with javascript');\n              module.set.dimmed();\n\n              if (settings.opacity == 'auto') {\n                settings.opacity = 0.8;\n              }\n\n              $dimmer.stop().css({\n                opacity: 0,\n                width: '100%',\n                height: '100%'\n              }).fadeTo(module.get.duration(), settings.opacity, function () {\n                $dimmer.removeAttr('style');\n                module.set.active();\n                callback();\n              });\n            }\n          },\n          hide: function (callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\n              module.verbose('Hiding dimmer with css');\n              $dimmer.transition({\n                displayType: settings.useFlex ? 'flex' : 'block',\n                animation: settings.transition + ' out',\n                queue: false,\n                duration: module.get.duration(),\n                useFailSafe: true,\n                onStart: function () {\n                  module.remove.dimmed();\n                },\n                onComplete: function () {\n                  module.remove.variation();\n                  module.remove.active();\n                  callback();\n                }\n              });\n            } else {\n              module.verbose('Hiding dimmer with javascript');\n              module.remove.dimmed();\n              $dimmer.stop().fadeOut(module.get.duration(), function () {\n                module.remove.active();\n                $dimmer.removeAttr('style');\n                callback();\n              });\n            }\n          }\n        },\n        get: {\n          dimmer: function () {\n            return $dimmer;\n          },\n          duration: function () {\n            if (typeof settings.duration == 'object') {\n              if (module.is.active()) {\n                return settings.duration.hide;\n              } else {\n                return settings.duration.show;\n              }\n            }\n\n            return settings.duration;\n          }\n        },\n        has: {\n          dimmer: function () {\n            if (settings.dimmerName) {\n              return $module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0;\n            } else {\n              return $module.find(selector.dimmer).length > 0;\n            }\n          }\n        },\n        is: {\n          active: function () {\n            return $dimmer.hasClass(className.active);\n          },\n          animating: function () {\n            return $dimmer.is(':animated') || $dimmer.hasClass(className.animating);\n          },\n          closable: function () {\n            if (settings.closable == 'auto') {\n              if (settings.on == 'hover') {\n                return false;\n              }\n\n              return true;\n            }\n\n            return settings.closable;\n          },\n          dimmer: function () {\n            return $module.hasClass(className.dimmer);\n          },\n          dimmable: function () {\n            return $module.hasClass(className.dimmable);\n          },\n          dimmed: function () {\n            return $dimmable.hasClass(className.dimmed);\n          },\n          disabled: function () {\n            return $dimmable.hasClass(className.disabled);\n          },\n          enabled: function () {\n            return !module.is.disabled();\n          },\n          page: function () {\n            return $dimmable.is('body');\n          },\n          pageDimmer: function () {\n            return $dimmer.hasClass(className.pageDimmer);\n          }\n        },\n        can: {\n          show: function () {\n            return !$dimmer.hasClass(className.disabled);\n          }\n        },\n        set: {\n          opacity: function (opacity) {\n            var color = $dimmer.css('background-color'),\n                colorArray = color.split(','),\n                isRGB = colorArray && colorArray.length == 3,\n                isRGBA = colorArray && colorArray.length == 4;\n            opacity = settings.opacity === 0 ? 0 : settings.opacity || opacity;\n\n            if (isRGB || isRGBA) {\n              colorArray[3] = opacity + ')';\n              color = colorArray.join(',');\n            } else {\n              color = 'rgba(0, 0, 0, ' + opacity + ')';\n            }\n\n            module.debug('Setting opacity to', opacity);\n            $dimmer.css('background-color', color);\n          },\n          legacy: function () {\n            $dimmer.addClass(className.legacy);\n          },\n          active: function () {\n            $dimmer.addClass(className.active);\n          },\n          dimmable: function () {\n            $dimmable.addClass(className.dimmable);\n          },\n          dimmed: function () {\n            $dimmable.addClass(className.dimmed);\n          },\n          pageDimmer: function () {\n            $dimmer.addClass(className.pageDimmer);\n          },\n          disabled: function () {\n            $dimmer.addClass(className.disabled);\n          },\n          variation: function (variation) {\n            variation = variation || settings.variation;\n\n            if (variation) {\n              $dimmer.addClass(variation);\n            }\n          }\n        },\n        remove: {\n          active: function () {\n            $dimmer.removeClass(className.active);\n          },\n          legacy: function () {\n            $dimmer.removeClass(className.legacy);\n          },\n          dimmed: function () {\n            $dimmable.removeClass(className.dimmed);\n          },\n          disabled: function () {\n            $dimmer.removeClass(className.disabled);\n          },\n          variation: function (variation) {\n            variation = variation || settings.variation;\n\n            if (variation) {\n              $dimmer.removeClass(variation);\n            }\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n      module.preinitialize();\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.dimmer.settings = {\n    name: 'Dimmer',\n    namespace: 'dimmer',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    // whether should use flex layout\n    useFlex: true,\n    // name to distinguish between multiple dimmers in context\n    dimmerName: false,\n    // whether to add a variation type\n    variation: false,\n    // whether to bind close events\n    closable: 'auto',\n    // whether to use css animations\n    useCSS: true,\n    // css animation to use\n    transition: 'fade',\n    // event to bind to\n    on: false,\n    // overriding opacity value\n    opacity: 'auto',\n    // transition durations\n    duration: {\n      show: 500,\n      hide: 500\n    },\n    onChange: function () {},\n    onShow: function () {},\n    onHide: function () {},\n    error: {\n      method: 'The method you called is not defined.'\n    },\n    className: {\n      active: 'active',\n      animating: 'animating',\n      dimmable: 'dimmable',\n      dimmed: 'dimmed',\n      dimmer: 'dimmer',\n      disabled: 'disabled',\n      hide: 'hide',\n      legacy: 'legacy',\n      pageDimmer: 'page',\n      show: 'show'\n    },\n    selector: {\n      dimmer: '> .ui.dimmer',\n      content: '.ui.dimmer > .content, .ui.dimmer > .content > .center'\n    },\n    template: {\n      dimmer: function () {\n        return $('<div />').attr('class', 'ui dimmer');\n      }\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Dropdown\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.dropdown = function (parameters) {\n    var $allModules = $(this),\n        $document = $(document),\n        moduleSelector = $allModules.selector || '',\n        hasTouch = 'ontouchstart' in document.documentElement,\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function (elementIndex) {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dropdown.settings, parameters) : $.extend({}, $.fn.dropdown.settings),\n          className = settings.className,\n          message = settings.message,\n          fields = settings.fields,\n          keys = settings.keys,\n          metadata = settings.metadata,\n          namespace = settings.namespace,\n          regExp = settings.regExp,\n          selector = settings.selector,\n          error = settings.error,\n          templates = settings.templates,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $text = $module.find(selector.text),\n          $search = $module.find(selector.search),\n          $sizer = $module.find(selector.sizer),\n          $input = $module.find(selector.input),\n          $icon = $module.find(selector.icon),\n          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev(),\n          $menu = $module.children(selector.menu),\n          $item = $menu.find(selector.item),\n          activated = false,\n          itemActivated = false,\n          internalChange = false,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          initialLoad,\n          pageLostFocus,\n          willRefocus,\n          elementNamespace,\n          id,\n          selectObserver,\n          menuObserver,\n          module;\n      module = {\n        initialize: function () {\n          module.debug('Initializing dropdown', settings);\n\n          if (module.is.alreadySetup()) {\n            module.setup.reference();\n          } else {\n            module.setup.layout();\n\n            if (settings.values) {\n              module.change.values(settings.values);\n            }\n\n            module.refreshData();\n            module.save.defaults();\n            module.restore.selected();\n            module.create.id();\n            module.bind.events();\n            module.observeChanges();\n            module.instantiate();\n          }\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of dropdown', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous dropdown', $module);\n          module.remove.tabbable();\n          $module.off(eventNamespace).removeData(moduleNamespace);\n          $menu.off(eventNamespace);\n          $document.off(elementNamespace);\n          module.disconnect.menuObserver();\n          module.disconnect.selectObserver();\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            selectObserver = new MutationObserver(module.event.select.mutation);\n            menuObserver = new MutationObserver(module.event.menu.mutation);\n            module.debug('Setting up mutation observer', selectObserver, menuObserver);\n            module.observe.select();\n            module.observe.menu();\n          }\n        },\n        disconnect: {\n          menuObserver: function () {\n            if (menuObserver) {\n              menuObserver.disconnect();\n            }\n          },\n          selectObserver: function () {\n            if (selectObserver) {\n              selectObserver.disconnect();\n            }\n          }\n        },\n        observe: {\n          select: function () {\n            if (module.has.input()) {\n              selectObserver.observe($module[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          },\n          menu: function () {\n            if (module.has.menu()) {\n              menuObserver.observe($menu[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          }\n        },\n        create: {\n          id: function () {\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementNamespace = '.' + id;\n            module.verbose('Creating unique id for element', id);\n          },\n          userChoice: function (values) {\n            var $userChoices, $userChoice, isUserValue, html;\n            values = values || module.get.userValues();\n\n            if (!values) {\n              return false;\n            }\n\n            values = $.isArray(values) ? values : [values];\n            $.each(values, function (index, value) {\n              if (module.get.item(value) === false) {\n                html = settings.templates.addition(module.add.variables(message.addResult, value));\n                $userChoice = $('<div />').html(html).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).addClass(className.addition).addClass(className.item);\n\n                if (settings.hideAdditions) {\n                  $userChoice.addClass(className.hidden);\n                }\n\n                $userChoices = $userChoices === undefined ? $userChoice : $userChoices.add($userChoice);\n                module.verbose('Creating user choices for value', value, $userChoice);\n              }\n            });\n            return $userChoices;\n          },\n          userLabels: function (value) {\n            var userValues = module.get.userValues();\n\n            if (userValues) {\n              module.debug('Adding user labels', userValues);\n              $.each(userValues, function (index, value) {\n                module.verbose('Adding custom user value');\n                module.add.label(value, value);\n              });\n            }\n          },\n          menu: function () {\n            $menu = $('<div />').addClass(className.menu).appendTo($module);\n          },\n          sizer: function () {\n            $sizer = $('<span />').addClass(className.sizer).insertAfter($search);\n          }\n        },\n        search: function (query) {\n          query = query !== undefined ? query : module.get.query();\n          module.verbose('Searching for query', query);\n\n          if (module.has.minCharacters(query)) {\n            module.filter(query);\n          } else {\n            module.hide();\n          }\n        },\n        select: {\n          firstUnfiltered: function () {\n            module.verbose('Selecting first non-filtered element');\n            module.remove.selectedItem();\n            $item.not(selector.unselectable).not(selector.addition + selector.hidden).eq(0).addClass(className.selected);\n          },\n          nextAvailable: function ($selected) {\n            $selected = $selected.eq(0);\n            var $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\n                $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\n                hasNext = $nextAvailable.length > 0;\n\n            if (hasNext) {\n              module.verbose('Moving selection to', $nextAvailable);\n              $nextAvailable.addClass(className.selected);\n            } else {\n              module.verbose('Moving selection to', $prevAvailable);\n              $prevAvailable.addClass(className.selected);\n            }\n          }\n        },\n        setup: {\n          api: function () {\n            var apiSettings = {\n              debug: settings.debug,\n              urlData: {\n                value: module.get.value(),\n                query: module.get.query()\n              },\n              on: false\n            };\n            module.verbose('First request, initializing API');\n            $module.api(apiSettings);\n          },\n          layout: function () {\n            if ($module.is('select')) {\n              module.setup.select();\n              module.setup.returnedObject();\n            }\n\n            if (!module.has.menu()) {\n              module.create.menu();\n            }\n\n            if (module.is.search() && !module.has.search()) {\n              module.verbose('Adding search input');\n              $search = $('<input />').addClass(className.search).prop('autocomplete', 'off').insertBefore($text);\n            }\n\n            if (module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {\n              module.create.sizer();\n            }\n\n            if (settings.allowTab) {\n              module.set.tabbable();\n            }\n          },\n          select: function () {\n            var selectValues = module.get.selectValues();\n            module.debug('Dropdown initialized on a select', selectValues);\n\n            if ($module.is('select')) {\n              $input = $module;\n            } // see if select is placed correctly already\n\n\n            if ($input.parent(selector.dropdown).length > 0) {\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\n              $module = $input.closest(selector.dropdown);\n\n              if (!module.has.menu()) {\n                module.create.menu();\n              }\n\n              $menu = $module.children(selector.menu);\n              module.setup.menu(selectValues);\n            } else {\n              module.debug('Creating entire dropdown from select');\n              $module = $('<div />').attr('class', $input.attr('class')).addClass(className.selection).addClass(className.dropdown).html(templates.dropdown(selectValues)).insertBefore($input);\n\n              if ($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\n                module.error(error.missingMultiple);\n                $input.prop('multiple', true);\n              }\n\n              if ($input.is('[multiple]')) {\n                module.set.multiple();\n              }\n\n              if ($input.prop('disabled')) {\n                module.debug('Disabling dropdown');\n                $module.addClass(className.disabled);\n              }\n\n              $input.removeAttr('class').detach().prependTo($module);\n            }\n\n            module.refresh();\n          },\n          menu: function (values) {\n            $menu.html(templates.menu(values, fields));\n            $item = $menu.find(selector.item);\n          },\n          reference: function () {\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown'); // replace module reference\n\n            $module = $module.parent(selector.dropdown);\n            instance = $module.data(moduleNamespace);\n            element = $module.get(0);\n            module.refresh();\n            module.setup.returnedObject();\n          },\n          returnedObject: function () {\n            var $firstModules = $allModules.slice(0, elementIndex),\n                $lastModules = $allModules.slice(elementIndex + 1); // adjust all modules to use correct reference\n\n            $allModules = $firstModules.add($module).add($lastModules);\n          }\n        },\n        refresh: function () {\n          module.refreshSelectors();\n          module.refreshData();\n        },\n        refreshItems: function () {\n          $item = $menu.find(selector.item);\n        },\n        refreshSelectors: function () {\n          module.verbose('Refreshing selector cache');\n          $text = $module.find(selector.text);\n          $search = $module.find(selector.search);\n          $input = $module.find(selector.input);\n          $icon = $module.find(selector.icon);\n          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev();\n          $menu = $module.children(selector.menu);\n          $item = $menu.find(selector.item);\n        },\n        refreshData: function () {\n          module.verbose('Refreshing cached metadata');\n          $item.removeData(metadata.text).removeData(metadata.value);\n        },\n        clearData: function () {\n          module.verbose('Clearing metadata');\n          $item.removeData(metadata.text).removeData(metadata.value);\n          $module.removeData(metadata.defaultText).removeData(metadata.defaultValue).removeData(metadata.placeholderText);\n        },\n        toggle: function () {\n          module.verbose('Toggling menu visibility');\n\n          if (!module.is.active()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        show: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (!module.can.show() && module.is.remote()) {\n            module.debug('No API results retrieved, searching before show');\n            module.queryRemote(module.get.query(), module.show);\n          }\n\n          if (module.can.show() && !module.is.active()) {\n            module.debug('Showing dropdown');\n\n            if (module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered())) {\n              module.remove.message();\n            }\n\n            if (module.is.allFiltered()) {\n              return true;\n            }\n\n            if (settings.onShow.call(element) !== false) {\n              module.animate.show(function () {\n                if (module.can.click()) {\n                  module.bind.intent();\n                }\n\n                if (module.has.menuSearch()) {\n                  module.focusSearch();\n                }\n\n                module.set.visible();\n                callback.call(element);\n              });\n            }\n          }\n        },\n        hide: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.active() && !module.is.animatingOutward()) {\n            module.debug('Hiding dropdown');\n\n            if (settings.onHide.call(element) !== false) {\n              module.animate.hide(function () {\n                module.remove.visible();\n                callback.call(element);\n              });\n            }\n          }\n        },\n        hideOthers: function () {\n          module.verbose('Finding other dropdowns to hide');\n          $allModules.not($module).has(selector.menu + '.' + className.visible).dropdown('hide');\n        },\n        hideMenu: function () {\n          module.verbose('Hiding menu  instantaneously');\n          module.remove.active();\n          module.remove.visible();\n          $menu.transition('hide');\n        },\n        hideSubMenus: function () {\n          var $subMenus = $menu.children(selector.item).find(selector.menu);\n          module.verbose('Hiding sub menus', $subMenus);\n          $subMenus.transition('hide');\n        },\n        bind: {\n          events: function () {\n            if (hasTouch) {\n              module.bind.touchEvents();\n            }\n\n            module.bind.keyboardEvents();\n            module.bind.inputEvents();\n            module.bind.mouseEvents();\n          },\n          touchEvents: function () {\n            module.debug('Touch device detected binding additional touch events');\n\n            if (module.is.searchSelection()) {// do nothing special yet\n            } else if (module.is.single()) {\n              $module.on('touchstart' + eventNamespace, module.event.test.toggle);\n            }\n\n            $menu.on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter);\n          },\n          keyboardEvents: function () {\n            module.verbose('Binding keyboard events');\n            $module.on('keydown' + eventNamespace, module.event.keydown);\n\n            if (module.has.search()) {\n              $module.on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input);\n            }\n\n            if (module.is.multiple()) {\n              $document.on('keydown' + elementNamespace, module.event.document.keydown);\n            }\n          },\n          inputEvents: function () {\n            module.verbose('Binding input change events');\n            $module.on('change' + eventNamespace, selector.input, module.event.change);\n          },\n          mouseEvents: function () {\n            module.verbose('Binding mouse events');\n\n            if (module.is.multiple()) {\n              $module.on('click' + eventNamespace, selector.label, module.event.label.click).on('click' + eventNamespace, selector.remove, module.event.remove.click);\n            }\n\n            if (module.is.searchSelection()) {\n              $module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('mousedown' + eventNamespace, selector.menu, module.event.menu.mousedown).on('mouseup' + eventNamespace, selector.menu, module.event.menu.mouseup).on('click' + eventNamespace, selector.icon, module.event.icon.click).on('focus' + eventNamespace, selector.search, module.event.search.focus).on('click' + eventNamespace, selector.search, module.event.search.focus).on('blur' + eventNamespace, selector.search, module.event.search.blur).on('click' + eventNamespace, selector.text, module.event.text.focus);\n\n              if (module.is.multiple()) {\n                $module.on('click' + eventNamespace, module.event.click);\n              }\n            } else {\n              if (settings.on == 'click') {\n                $module.on('click' + eventNamespace, module.event.test.toggle);\n              } else if (settings.on == 'hover') {\n                $module.on('mouseenter' + eventNamespace, module.delay.show).on('mouseleave' + eventNamespace, module.delay.hide);\n              } else {\n                $module.on(settings.on + eventNamespace, module.toggle);\n              }\n\n              $module.on('click' + eventNamespace, selector.icon, module.event.icon.click).on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('focus' + eventNamespace, module.event.focus);\n\n              if (module.has.menuSearch()) {\n                $module.on('blur' + eventNamespace, selector.search, module.event.search.blur);\n              } else {\n                $module.on('blur' + eventNamespace, module.event.blur);\n              }\n            }\n\n            $menu.on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter).on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave).on('click' + eventNamespace, selector.item, module.event.item.click);\n          },\n          intent: function () {\n            module.verbose('Binding hide intent event to document');\n\n            if (hasTouch) {\n              $document.on('touchstart' + elementNamespace, module.event.test.touch).on('touchmove' + elementNamespace, module.event.test.touch);\n            }\n\n            $document.on('click' + elementNamespace, module.event.test.hide);\n          }\n        },\n        unbind: {\n          intent: function () {\n            module.verbose('Removing hide intent event from document');\n\n            if (hasTouch) {\n              $document.off('touchstart' + elementNamespace).off('touchmove' + elementNamespace);\n            }\n\n            $document.off('click' + elementNamespace);\n          }\n        },\n        filter: function (query) {\n          var searchTerm = query !== undefined ? query : module.get.query(),\n              afterFiltered = function () {\n            if (module.is.multiple()) {\n              module.filterActive();\n            }\n\n            if (query || !query && module.get.activeItem().length == 0) {\n              module.select.firstUnfiltered();\n            }\n\n            if (module.has.allResultsFiltered()) {\n              if (settings.onNoResults.call(element, searchTerm)) {\n                if (settings.allowAdditions) {\n                  if (settings.hideAdditions) {\n                    module.verbose('User addition with no menu, setting empty style');\n                    module.set.empty();\n                    module.hideMenu();\n                  }\n                } else {\n                  module.verbose('All items filtered, showing message', searchTerm);\n                  module.add.message(message.noResults);\n                }\n              } else {\n                module.verbose('All items filtered, hiding dropdown', searchTerm);\n                module.hideMenu();\n              }\n            } else {\n              module.remove.empty();\n              module.remove.message();\n            }\n\n            if (settings.allowAdditions) {\n              module.add.userSuggestion(query);\n            }\n\n            if (module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch()) {\n              module.show();\n            }\n          };\n\n          if (settings.useLabels && module.has.maxSelections()) {\n            return;\n          }\n\n          if (settings.apiSettings) {\n            if (module.can.useAPI()) {\n              module.queryRemote(searchTerm, function () {\n                if (settings.filterRemoteData) {\n                  module.filterItems(searchTerm);\n                }\n\n                afterFiltered();\n              });\n            } else {\n              module.error(error.noAPI);\n            }\n          } else {\n            module.filterItems(searchTerm);\n            afterFiltered();\n          }\n        },\n        queryRemote: function (query, callback) {\n          var apiSettings = {\n            errorDuration: false,\n            cache: 'local',\n            throttle: settings.throttle,\n            urlData: {\n              query: query\n            },\n            onError: function () {\n              module.add.message(message.serverError);\n              callback();\n            },\n            onFailure: function () {\n              module.add.message(message.serverError);\n              callback();\n            },\n            onSuccess: function (response) {\n              var values = response[fields.remoteValues],\n                  hasRemoteValues = $.isArray(values) && values.length > 0;\n\n              if (hasRemoteValues) {\n                module.remove.message();\n                module.setup.menu({\n                  values: response[fields.remoteValues]\n                });\n              } else {\n                module.add.message(message.noResults);\n              }\n\n              callback();\n            }\n          };\n\n          if (!$module.api('get request')) {\n            module.setup.api();\n          }\n\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\n          $module.api('setting', apiSettings).api('query');\n        },\n        filterItems: function (query) {\n          var searchTerm = query !== undefined ? query : module.get.query(),\n              results = null,\n              escapedTerm = module.escape.string(searchTerm),\n              beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm'); // avoid loop if we're matching nothing\n\n          if (module.has.query()) {\n            results = [];\n            module.verbose('Searching for matching values', searchTerm);\n            $item.each(function () {\n              var $choice = $(this),\n                  text,\n                  value;\n\n              if (settings.match == 'both' || settings.match == 'text') {\n                text = String(module.get.choiceText($choice, false));\n\n                if (text.search(beginsWithRegExp) !== -1) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {\n                  results.push(this);\n                  return true;\n                }\n              }\n\n              if (settings.match == 'both' || settings.match == 'value') {\n                value = String(module.get.choiceValue($choice, text));\n\n                if (value.search(beginsWithRegExp) !== -1) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {\n                  results.push(this);\n                  return true;\n                }\n              }\n            });\n          }\n\n          module.debug('Showing only matched items', searchTerm);\n          module.remove.filteredItem();\n\n          if (results) {\n            $item.not(results).addClass(className.filtered);\n          }\n        },\n        fuzzySearch: function (query, term) {\n          var termLength = term.length,\n              queryLength = query.length;\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (queryLength > termLength) {\n            return false;\n          }\n\n          if (queryLength === termLength) {\n            return query === term;\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n            var queryCharacter = query.charCodeAt(characterIndex);\n\n            while (nextCharacterIndex < termLength) {\n              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n                continue search;\n              }\n            }\n\n            return false;\n          }\n\n          return true;\n        },\n        exactSearch: function (query, term) {\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (term.indexOf(query) > -1) {\n            return true;\n          }\n\n          return false;\n        },\n        filterActive: function () {\n          if (settings.useLabels) {\n            $item.filter('.' + className.active).addClass(className.filtered);\n          }\n        },\n        focusSearch: function (skipHandler) {\n          if (module.has.search() && !module.is.focusedOnSearch()) {\n            if (skipHandler) {\n              $module.off('focus' + eventNamespace, selector.search);\n              $search.focus();\n              $module.on('focus' + eventNamespace, selector.search, module.event.search.focus);\n            } else {\n              $search.focus();\n            }\n          }\n        },\n        forceSelection: function () {\n          var $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\n              $activeItem = $item.not(className.filtered).filter('.' + className.active).eq(0),\n              $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,\n              hasSelected = $selectedItem.length > 0;\n\n          if (hasSelected && !module.is.multiple()) {\n            module.debug('Forcing partial selection to selected item', $selectedItem);\n            module.event.item.click.call($selectedItem, {}, true);\n            return;\n          } else {\n            if (settings.allowAdditions) {\n              module.set.selected(module.get.query());\n              module.remove.searchTerm();\n            } else {\n              module.remove.searchTerm();\n            }\n          }\n        },\n        change: {\n          values: function (values) {\n            if (!settings.allowAdditions) {\n              module.clear();\n            }\n\n            module.debug('Creating dropdown with specified values', values);\n            module.setup.menu({\n              values: values\n            });\n            $.each(values, function (index, item) {\n              if (item.selected == true) {\n                module.debug('Setting initial selection to', item.value);\n                module.set.selected(item.value);\n                return true;\n              }\n            });\n          }\n        },\n        event: {\n          change: function () {\n            if (!internalChange) {\n              module.debug('Input changed, updating selection');\n              module.set.selected();\n            }\n          },\n          focus: function () {\n            if (settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\n              module.show();\n            }\n          },\n          blur: function (event) {\n            pageLostFocus = document.activeElement === this;\n\n            if (!activated && !pageLostFocus) {\n              module.remove.activeLabel();\n              module.hide();\n            }\n          },\n          mousedown: function () {\n            if (module.is.searchSelection()) {\n              // prevent menu hiding on immediate re-focus\n              willRefocus = true;\n            } else {\n              // prevents focus callback from occurring on mousedown\n              activated = true;\n            }\n          },\n          mouseup: function () {\n            if (module.is.searchSelection()) {\n              // prevent menu hiding on immediate re-focus\n              willRefocus = false;\n            } else {\n              activated = false;\n            }\n          },\n          click: function (event) {\n            var $target = $(event.target); // focus search\n\n            if ($target.is($module)) {\n              if (!module.is.focusedOnSearch()) {\n                module.focusSearch();\n              } else {\n                module.show();\n              }\n            }\n          },\n          search: {\n            focus: function () {\n              activated = true;\n\n              if (module.is.multiple()) {\n                module.remove.activeLabel();\n              }\n\n              if (settings.showOnFocus) {\n                module.search();\n              }\n            },\n            blur: function (event) {\n              pageLostFocus = document.activeElement === this;\n\n              if (module.is.searchSelection() && !willRefocus) {\n                if (!itemActivated && !pageLostFocus) {\n                  if (settings.forceSelection) {\n                    module.forceSelection();\n                  }\n\n                  module.hide();\n                }\n              }\n\n              willRefocus = false;\n            }\n          },\n          icon: {\n            click: function (event) {\n              if ($icon.hasClass(className.clear)) {\n                module.clear();\n              } else if (module.can.click()) {\n                module.toggle();\n              }\n            }\n          },\n          text: {\n            focus: function (event) {\n              activated = true;\n              module.focusSearch();\n            }\n          },\n          input: function (event) {\n            if (module.is.multiple() || module.is.searchSelection()) {\n              module.set.filtered();\n            }\n\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.search, settings.delay.search);\n          },\n          label: {\n            click: function (event) {\n              var $label = $(this),\n                  $labels = $module.find(selector.label),\n                  $activeLabels = $labels.filter('.' + className.active),\n                  $nextActive = $label.nextAll('.' + className.active),\n                  $prevActive = $label.prevAll('.' + className.active),\n                  $range = $nextActive.length > 0 ? $label.nextUntil($nextActive).add($activeLabels).add($label) : $label.prevUntil($prevActive).add($activeLabels).add($label);\n\n              if (event.shiftKey) {\n                $activeLabels.removeClass(className.active);\n                $range.addClass(className.active);\n              } else if (event.ctrlKey) {\n                $label.toggleClass(className.active);\n              } else {\n                $activeLabels.removeClass(className.active);\n                $label.addClass(className.active);\n              }\n\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\n            }\n          },\n          remove: {\n            click: function () {\n              var $label = $(this).parent();\n\n              if ($label.hasClass(className.active)) {\n                // remove all selected labels\n                module.remove.activeLabels();\n              } else {\n                // remove this label only\n                module.remove.activeLabels($label);\n              }\n            }\n          },\n          test: {\n            toggle: function (event) {\n              var toggleBehavior = module.is.multiple() ? module.show : module.toggle;\n\n              if (module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {\n                return;\n              }\n\n              if (module.determine.eventOnElement(event, toggleBehavior)) {\n                event.preventDefault();\n              }\n            },\n            touch: function (event) {\n              module.determine.eventOnElement(event, function () {\n                if (event.type == 'touchstart') {\n                  module.timer = setTimeout(function () {\n                    module.hide();\n                  }, settings.delay.touch);\n                } else if (event.type == 'touchmove') {\n                  clearTimeout(module.timer);\n                }\n              });\n              event.stopPropagation();\n            },\n            hide: function (event) {\n              module.determine.eventInModule(event, module.hide);\n            }\n          },\n          select: {\n            mutation: function (mutations) {\n              module.debug('<select> modified, recreating menu');\n              var isSelectMutation = false;\n              $.each(mutations, function (index, mutation) {\n                if ($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {\n                  isSelectMutation = true;\n                  return true;\n                }\n              });\n\n              if (isSelectMutation) {\n                module.disconnect.selectObserver();\n                module.refresh();\n                module.setup.select();\n                module.set.selected();\n                module.observe.select();\n              }\n            }\n          },\n          menu: {\n            mutation: function (mutations) {\n              var mutation = mutations[0],\n                  $addedNode = mutation.addedNodes ? $(mutation.addedNodes[0]) : $(false),\n                  $removedNode = mutation.removedNodes ? $(mutation.removedNodes[0]) : $(false),\n                  $changedNodes = $addedNode.add($removedNode),\n                  isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,\n                  isMessage = $changedNodes.is(selector.message) || $changedNodes.closest(selector.message).length > 0;\n\n              if (isUserAddition || isMessage) {\n                module.debug('Updating item selector cache');\n                module.refreshItems();\n              } else {\n                module.debug('Menu modified, updating selector cache');\n                module.refresh();\n              }\n            },\n            mousedown: function () {\n              itemActivated = true;\n            },\n            mouseup: function () {\n              itemActivated = false;\n            }\n          },\n          item: {\n            mouseenter: function (event) {\n              var $target = $(event.target),\n                  $item = $(this),\n                  $subMenu = $item.children(selector.menu),\n                  $otherMenus = $item.siblings(selector.item).children(selector.menu),\n                  hasSubMenu = $subMenu.length > 0,\n                  isBubbledEvent = $subMenu.find($target).length > 0;\n\n              if (!isBubbledEvent && hasSubMenu) {\n                clearTimeout(module.itemTimer);\n                module.itemTimer = setTimeout(function () {\n                  module.verbose('Showing sub-menu', $subMenu);\n                  $.each($otherMenus, function () {\n                    module.animate.hide(false, $(this));\n                  });\n                  module.animate.show(false, $subMenu);\n                }, settings.delay.show);\n                event.preventDefault();\n              }\n            },\n            mouseleave: function (event) {\n              var $subMenu = $(this).children(selector.menu);\n\n              if ($subMenu.length > 0) {\n                clearTimeout(module.itemTimer);\n                module.itemTimer = setTimeout(function () {\n                  module.verbose('Hiding sub-menu', $subMenu);\n                  module.animate.hide(false, $subMenu);\n                }, settings.delay.hide);\n              }\n            },\n            click: function (event, skipRefocus) {\n              var $choice = $(this),\n                  $target = event ? $(event.target) : $(''),\n                  $subMenu = $choice.find(selector.menu),\n                  text = module.get.choiceText($choice),\n                  value = module.get.choiceValue($choice, text),\n                  hasSubMenu = $subMenu.length > 0,\n                  isBubbledEvent = $subMenu.find($target).length > 0; // prevents IE11 bug where menu receives focus even though `tabindex=-1`\n\n              if (module.has.menuSearch()) {\n                $(document.activeElement).blur();\n              }\n\n              if (!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\n                if (module.is.searchSelection()) {\n                  if (settings.allowAdditions) {\n                    module.remove.userAddition();\n                  }\n\n                  module.remove.searchTerm();\n\n                  if (!module.is.focusedOnSearch() && !(skipRefocus == true)) {\n                    module.focusSearch(true);\n                  }\n                }\n\n                if (!settings.useLabels) {\n                  module.remove.filteredItem();\n                  module.set.scrollPosition($choice);\n                }\n\n                module.determine.selectAction.call(this, text, value);\n              }\n            }\n          },\n          document: {\n            // label selection should occur even when element has no focus\n            keydown: function (event) {\n              var pressedKey = event.which,\n                  isShortcutKey = module.is.inObject(pressedKey, keys);\n\n              if (isShortcutKey) {\n                var $label = $module.find(selector.label),\n                    $activeLabel = $label.filter('.' + className.active),\n                    activeValue = $activeLabel.data(metadata.value),\n                    labelIndex = $label.index($activeLabel),\n                    labelCount = $label.length,\n                    hasActiveLabel = $activeLabel.length > 0,\n                    hasMultipleActive = $activeLabel.length > 1,\n                    isFirstLabel = labelIndex === 0,\n                    isLastLabel = labelIndex + 1 == labelCount,\n                    isSearch = module.is.searchSelection(),\n                    isFocusedOnSearch = module.is.focusedOnSearch(),\n                    isFocused = module.is.focused(),\n                    caretAtStart = isFocusedOnSearch && module.get.caretPosition() === 0,\n                    $nextLabel;\n\n                if (isSearch && !hasActiveLabel && !isFocusedOnSearch) {\n                  return;\n                }\n\n                if (pressedKey == keys.leftArrow) {\n                  // activate previous label\n                  if ((isFocused || caretAtStart) && !hasActiveLabel) {\n                    module.verbose('Selecting previous label');\n                    $label.last().addClass(className.active);\n                  } else if (hasActiveLabel) {\n                    if (!event.shiftKey) {\n                      module.verbose('Selecting previous label');\n                      $label.removeClass(className.active);\n                    } else {\n                      module.verbose('Adding previous label to selection');\n                    }\n\n                    if (isFirstLabel && !hasMultipleActive) {\n                      $activeLabel.addClass(className.active);\n                    } else {\n                      $activeLabel.prev(selector.siblingLabel).addClass(className.active).end();\n                    }\n\n                    event.preventDefault();\n                  }\n                } else if (pressedKey == keys.rightArrow) {\n                  // activate first label\n                  if (isFocused && !hasActiveLabel) {\n                    $label.first().addClass(className.active);\n                  } // activate next label\n\n\n                  if (hasActiveLabel) {\n                    if (!event.shiftKey) {\n                      module.verbose('Selecting next label');\n                      $label.removeClass(className.active);\n                    } else {\n                      module.verbose('Adding next label to selection');\n                    }\n\n                    if (isLastLabel) {\n                      if (isSearch) {\n                        if (!isFocusedOnSearch) {\n                          module.focusSearch();\n                        } else {\n                          $label.removeClass(className.active);\n                        }\n                      } else if (hasMultipleActive) {\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\n                      } else {\n                        $activeLabel.addClass(className.active);\n                      }\n                    } else {\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\n                    }\n\n                    event.preventDefault();\n                  }\n                } else if (pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\n                  if (hasActiveLabel) {\n                    module.verbose('Removing active labels');\n\n                    if (isLastLabel) {\n                      if (isSearch && !isFocusedOnSearch) {\n                        module.focusSearch();\n                      }\n                    }\n\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\n                    module.remove.activeLabels($activeLabel);\n                    event.preventDefault();\n                  } else if (caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\n                    module.verbose('Removing last label on input backspace');\n                    $activeLabel = $label.last().addClass(className.active);\n                    module.remove.activeLabels($activeLabel);\n                  }\n                } else {\n                  $activeLabel.removeClass(className.active);\n                }\n              }\n            }\n          },\n          keydown: function (event) {\n            var pressedKey = event.which,\n                isShortcutKey = module.is.inObject(pressedKey, keys);\n\n            if (isShortcutKey) {\n              var $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\n                  $activeItem = $menu.children('.' + className.active).eq(0),\n                  $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,\n                  $visibleItems = $selectedItem.length > 0 ? $selectedItem.siblings(':not(.' + className.filtered + ')').addBack() : $menu.children(':not(.' + className.filtered + ')'),\n                  $subMenu = $selectedItem.children(selector.menu),\n                  $parentMenu = $selectedItem.closest(selector.menu),\n                  inVisibleMenu = $parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0,\n                  hasSubMenu = $subMenu.length > 0,\n                  hasSelectedItem = $selectedItem.length > 0,\n                  selectedIsSelectable = $selectedItem.not(selector.unselectable).length > 0,\n                  delimiterPressed = pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple(),\n                  isAdditionWithoutMenu = settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable,\n                  $nextItem,\n                  isSubMenuItem,\n                  newIndex; // allow selection with menu closed\n\n              if (isAdditionWithoutMenu) {\n                module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n                module.event.item.click.call($selectedItem, event);\n\n                if (module.is.searchSelection()) {\n                  module.remove.searchTerm();\n                }\n              } // visible menu keyboard shortcuts\n\n\n              if (module.is.visible()) {\n                // enter (select or open sub-menu)\n                if (pressedKey == keys.enter || delimiterPressed) {\n                  if (pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\n                    pressedKey = keys.rightArrow;\n                  } else if (selectedIsSelectable) {\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n                    module.event.item.click.call($selectedItem, event);\n\n                    if (module.is.searchSelection()) {\n                      module.remove.searchTerm();\n                    }\n                  }\n\n                  event.preventDefault();\n                } // sub-menu actions\n\n\n                if (hasSelectedItem) {\n                  if (pressedKey == keys.leftArrow) {\n                    isSubMenuItem = $parentMenu[0] !== $menu[0];\n\n                    if (isSubMenuItem) {\n                      module.verbose('Left key pressed, closing sub-menu');\n                      module.animate.hide(false, $parentMenu);\n                      $selectedItem.removeClass(className.selected);\n                      $parentMenu.closest(selector.item).addClass(className.selected);\n                      event.preventDefault();\n                    }\n                  } // right arrow (show sub-menu)\n\n\n                  if (pressedKey == keys.rightArrow) {\n                    if (hasSubMenu) {\n                      module.verbose('Right key pressed, opening sub-menu');\n                      module.animate.show(false, $subMenu);\n                      $selectedItem.removeClass(className.selected);\n                      $subMenu.find(selector.item).eq(0).addClass(className.selected);\n                      event.preventDefault();\n                    }\n                  }\n                } // up arrow (traverse menu up)\n\n\n                if (pressedKey == keys.upArrow) {\n                  $nextItem = hasSelectedItem && inVisibleMenu ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);\n\n                  if ($visibleItems.index($nextItem) < 0) {\n                    module.verbose('Up key pressed but reached top of current menu');\n                    event.preventDefault();\n                    return;\n                  } else {\n                    module.verbose('Up key pressed, changing active item');\n                    $selectedItem.removeClass(className.selected);\n                    $nextItem.addClass(className.selected);\n                    module.set.scrollPosition($nextItem);\n\n                    if (settings.selectOnKeydown && module.is.single()) {\n                      module.set.selectedItem($nextItem);\n                    }\n                  }\n\n                  event.preventDefault();\n                } // down arrow (traverse menu down)\n\n\n                if (pressedKey == keys.downArrow) {\n                  $nextItem = hasSelectedItem && inVisibleMenu ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);\n\n                  if ($nextItem.length === 0) {\n                    module.verbose('Down key pressed but reached bottom of current menu');\n                    event.preventDefault();\n                    return;\n                  } else {\n                    module.verbose('Down key pressed, changing active item');\n                    $item.removeClass(className.selected);\n                    $nextItem.addClass(className.selected);\n                    module.set.scrollPosition($nextItem);\n\n                    if (settings.selectOnKeydown && module.is.single()) {\n                      module.set.selectedItem($nextItem);\n                    }\n                  }\n\n                  event.preventDefault();\n                } // page down (show next page)\n\n\n                if (pressedKey == keys.pageUp) {\n                  module.scrollPage('up');\n                  event.preventDefault();\n                }\n\n                if (pressedKey == keys.pageDown) {\n                  module.scrollPage('down');\n                  event.preventDefault();\n                } // escape (close menu)\n\n\n                if (pressedKey == keys.escape) {\n                  module.verbose('Escape key pressed, closing dropdown');\n                  module.hide();\n                }\n              } else {\n                // delimiter key\n                if (delimiterPressed) {\n                  event.preventDefault();\n                } // down arrow (open menu)\n\n\n                if (pressedKey == keys.downArrow && !module.is.visible()) {\n                  module.verbose('Down key pressed, showing dropdown');\n                  module.show();\n                  event.preventDefault();\n                }\n              }\n            } else {\n              if (!module.has.search()) {\n                module.set.selectedLetter(String.fromCharCode(pressedKey));\n              }\n            }\n          }\n        },\n        trigger: {\n          change: function () {\n            var events = document.createEvent('HTMLEvents'),\n                inputElement = $input[0];\n\n            if (inputElement) {\n              module.verbose('Triggering native change event');\n              events.initEvent('change', true, false);\n              inputElement.dispatchEvent(events);\n            }\n          }\n        },\n        determine: {\n          selectAction: function (text, value) {\n            module.verbose('Determining action', settings.action);\n\n            if ($.isFunction(module.action[settings.action])) {\n              module.verbose('Triggering preset action', settings.action, text, value);\n              module.action[settings.action].call(element, text, value, this);\n            } else if ($.isFunction(settings.action)) {\n              module.verbose('Triggering user action', settings.action, text, value);\n              settings.action.call(element, text, value, this);\n            } else {\n              module.error(error.action, settings.action);\n            }\n          },\n          eventInModule: function (event, callback) {\n            var $target = $(event.target),\n                inDocument = $target.closest(document.documentElement).length > 0,\n                inModule = $target.closest($module).length > 0;\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (inDocument && !inModule) {\n              module.verbose('Triggering event', callback);\n              callback();\n              return true;\n            } else {\n              module.verbose('Event occurred in dropdown, canceling callback');\n              return false;\n            }\n          },\n          eventOnElement: function (event, callback) {\n            var $target = $(event.target),\n                $label = $target.closest(selector.siblingLabel),\n                inVisibleDOM = document.body.contains(event.target),\n                notOnLabel = $module.find($label).length === 0,\n                notInMenu = $target.closest($menu).length === 0;\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (inVisibleDOM && notOnLabel && notInMenu) {\n              module.verbose('Triggering event', callback);\n              callback();\n              return true;\n            } else {\n              module.verbose('Event occurred in dropdown menu, canceling callback');\n              return false;\n            }\n          }\n        },\n        action: {\n          nothing: function () {},\n          activate: function (text, value, element) {\n            value = value !== undefined ? value : text;\n\n            if (module.can.activate($(element))) {\n              module.set.selected(value, $(element));\n\n              if (module.is.multiple() && !module.is.allFiltered()) {\n                return;\n              } else {\n                module.hideAndClear();\n              }\n            }\n          },\n          select: function (text, value, element) {\n            value = value !== undefined ? value : text;\n\n            if (module.can.activate($(element))) {\n              module.set.value(value, text, $(element));\n\n              if (module.is.multiple() && !module.is.allFiltered()) {\n                return;\n              } else {\n                module.hideAndClear();\n              }\n            }\n          },\n          combo: function (text, value, element) {\n            value = value !== undefined ? value : text;\n            module.set.selected(value, $(element));\n            module.hideAndClear();\n          },\n          hide: function (text, value, element) {\n            module.set.value(value, text, $(element));\n            module.hideAndClear();\n          }\n        },\n        get: {\n          id: function () {\n            return id;\n          },\n          defaultText: function () {\n            return $module.data(metadata.defaultText);\n          },\n          defaultValue: function () {\n            return $module.data(metadata.defaultValue);\n          },\n          placeholderText: function () {\n            if (settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {\n              return settings.placeholder;\n            }\n\n            return $module.data(metadata.placeholderText) || '';\n          },\n          text: function () {\n            return $text.text();\n          },\n          query: function () {\n            return $.trim($search.val());\n          },\n          searchWidth: function (value) {\n            value = value !== undefined ? value : $search.val();\n            $sizer.text(value); // prevent rounding issues\n\n            return Math.ceil($sizer.width() + 1);\n          },\n          selectionCount: function () {\n            var values = module.get.values(),\n                count;\n            count = module.is.multiple() ? $.isArray(values) ? values.length : 0 : module.get.value() !== '' ? 1 : 0;\n            return count;\n          },\n          transition: function ($subMenu) {\n            return settings.transition == 'auto' ? module.is.upward($subMenu) ? 'slide up' : 'slide down' : settings.transition;\n          },\n          userValues: function () {\n            var values = module.get.values();\n\n            if (!values) {\n              return false;\n            }\n\n            values = $.isArray(values) ? values : [values];\n            return $.grep(values, function (value) {\n              return module.get.item(value) === false;\n            });\n          },\n          uniqueArray: function (array) {\n            return $.grep(array, function (value, index) {\n              return $.inArray(value, array) === index;\n            });\n          },\n          caretPosition: function () {\n            var input = $search.get(0),\n                range,\n                rangeLength;\n\n            if ('selectionStart' in input) {\n              return input.selectionStart;\n            } else if (document.selection) {\n              input.focus();\n              range = document.selection.createRange();\n              rangeLength = range.text.length;\n              range.moveStart('character', -input.value.length);\n              return range.text.length - rangeLength;\n            }\n          },\n          value: function () {\n            var value = $input.length > 0 ? $input.val() : $module.data(metadata.value),\n                isEmptyMultiselect = $.isArray(value) && value.length === 1 && value[0] === ''; // prevents placeholder element from being selected when multiple\n\n            return value === undefined || isEmptyMultiselect ? '' : value;\n          },\n          values: function () {\n            var value = module.get.value();\n\n            if (value === '') {\n              return '';\n            }\n\n            return !module.has.selectInput() && module.is.multiple() ? typeof value == 'string' ? // delimited string\n            value.split(settings.delimiter) : '' : value;\n          },\n          remoteValues: function () {\n            var values = module.get.values(),\n                remoteValues = false;\n\n            if (values) {\n              if (typeof values == 'string') {\n                values = [values];\n              }\n\n              $.each(values, function (index, value) {\n                var name = module.read.remoteData(value);\n                module.verbose('Restoring value from session data', name, value);\n\n                if (name) {\n                  if (!remoteValues) {\n                    remoteValues = {};\n                  }\n\n                  remoteValues[value] = name;\n                }\n              });\n            }\n\n            return remoteValues;\n          },\n          choiceText: function ($choice, preserveHTML) {\n            preserveHTML = preserveHTML !== undefined ? preserveHTML : settings.preserveHTML;\n\n            if ($choice) {\n              if ($choice.find(selector.menu).length > 0) {\n                module.verbose('Retrieving text of element with sub-menu');\n                $choice = $choice.clone();\n                $choice.find(selector.menu).remove();\n                $choice.find(selector.menuIcon).remove();\n              }\n\n              return $choice.data(metadata.text) !== undefined ? $choice.data(metadata.text) : preserveHTML ? $.trim($choice.html()) : $.trim($choice.text());\n            }\n          },\n          choiceValue: function ($choice, choiceText) {\n            choiceText = choiceText || module.get.choiceText($choice);\n\n            if (!$choice) {\n              return false;\n            }\n\n            return $choice.data(metadata.value) !== undefined ? String($choice.data(metadata.value)) : typeof choiceText === 'string' ? $.trim(choiceText.toLowerCase()) : String(choiceText);\n          },\n          inputEvent: function () {\n            var input = $search[0];\n\n            if (input) {\n              return input.oninput !== undefined ? 'input' : input.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n            }\n\n            return false;\n          },\n          selectValues: function () {\n            var select = {};\n            select.values = [];\n            $module.find('option').each(function () {\n              var $option = $(this),\n                  name = $option.html(),\n                  disabled = $option.attr('disabled'),\n                  value = $option.attr('value') !== undefined ? $option.attr('value') : name;\n\n              if (settings.placeholder === 'auto' && value === '') {\n                select.placeholder = name;\n              } else {\n                select.values.push({\n                  name: name,\n                  value: value,\n                  disabled: disabled\n                });\n              }\n            });\n\n            if (settings.placeholder && settings.placeholder !== 'auto') {\n              module.debug('Setting placeholder value to', settings.placeholder);\n              select.placeholder = settings.placeholder;\n            }\n\n            if (settings.sortSelect) {\n              select.values.sort(function (a, b) {\n                return a.name > b.name ? 1 : -1;\n              });\n              module.debug('Retrieved and sorted values from select', select);\n            } else {\n              module.debug('Retrieved values from select', select);\n            }\n\n            return select;\n          },\n          activeItem: function () {\n            return $item.filter('.' + className.active);\n          },\n          selectedItem: function () {\n            var $selectedItem = $item.not(selector.unselectable).filter('.' + className.selected);\n            return $selectedItem.length > 0 ? $selectedItem : $item.eq(0);\n          },\n          itemWithAdditions: function (value) {\n            var $items = module.get.item(value),\n                $userItems = module.create.userChoice(value),\n                hasUserItems = $userItems && $userItems.length > 0;\n\n            if (hasUserItems) {\n              $items = $items.length > 0 ? $items.add($userItems) : $userItems;\n            }\n\n            return $items;\n          },\n          item: function (value, strict) {\n            var $selectedItem = false,\n                shouldSearch,\n                isMultiple;\n            value = value !== undefined ? value : module.get.values() !== undefined ? module.get.values() : module.get.text();\n            shouldSearch = isMultiple ? value.length > 0 : value !== undefined && value !== null;\n            isMultiple = module.is.multiple() && $.isArray(value);\n            strict = value === '' || value === 0 ? true : strict || false;\n\n            if (shouldSearch) {\n              $item.each(function () {\n                var $choice = $(this),\n                    optionText = module.get.choiceText($choice),\n                    optionValue = module.get.choiceValue($choice, optionText); // safe early exit\n\n                if (optionValue === null || optionValue === undefined) {\n                  return;\n                }\n\n                if (isMultiple) {\n                  if ($.inArray(String(optionValue), value) !== -1 || $.inArray(optionText, value) !== -1) {\n                    $selectedItem = $selectedItem ? $selectedItem.add($choice) : $choice;\n                  }\n                } else if (strict) {\n                  module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\n\n                  if (optionValue === value || optionText === value) {\n                    $selectedItem = $choice;\n                    return true;\n                  }\n                } else {\n                  if (String(optionValue) == String(value) || optionText == value) {\n                    module.verbose('Found select item by value', optionValue, value);\n                    $selectedItem = $choice;\n                    return true;\n                  }\n                }\n              });\n            }\n\n            return $selectedItem;\n          }\n        },\n        check: {\n          maxSelections: function (selectionCount) {\n            if (settings.maxSelections) {\n              selectionCount = selectionCount !== undefined ? selectionCount : module.get.selectionCount();\n\n              if (selectionCount >= settings.maxSelections) {\n                module.debug('Maximum selection count reached');\n\n                if (settings.useLabels) {\n                  $item.addClass(className.filtered);\n                  module.add.message(message.maxSelections);\n                }\n\n                return true;\n              } else {\n                module.verbose('No longer at maximum selection count');\n                module.remove.message();\n                module.remove.filteredItem();\n\n                if (module.is.searchSelection()) {\n                  module.filterItems();\n                }\n\n                return false;\n              }\n            }\n\n            return true;\n          }\n        },\n        restore: {\n          defaults: function () {\n            module.clear();\n            module.restore.defaultText();\n            module.restore.defaultValue();\n          },\n          defaultText: function () {\n            var defaultText = module.get.defaultText(),\n                placeholderText = module.get.placeholderText;\n\n            if (defaultText === placeholderText) {\n              module.debug('Restoring default placeholder text', defaultText);\n              module.set.placeholderText(defaultText);\n            } else {\n              module.debug('Restoring default text', defaultText);\n              module.set.text(defaultText);\n            }\n          },\n          placeholderText: function () {\n            module.set.placeholderText();\n          },\n          defaultValue: function () {\n            var defaultValue = module.get.defaultValue();\n\n            if (defaultValue !== undefined) {\n              module.debug('Restoring default value', defaultValue);\n\n              if (defaultValue !== '') {\n                module.set.value(defaultValue);\n                module.set.selected();\n              } else {\n                module.remove.activeItem();\n                module.remove.selectedItem();\n              }\n            }\n          },\n          labels: function () {\n            if (settings.allowAdditions) {\n              if (!settings.useLabels) {\n                module.error(error.labels);\n                settings.useLabels = true;\n              }\n\n              module.debug('Restoring selected values');\n              module.create.userLabels();\n            }\n\n            module.check.maxSelections();\n          },\n          selected: function () {\n            module.restore.values();\n\n            if (module.is.multiple()) {\n              module.debug('Restoring previously selected values and labels');\n              module.restore.labels();\n            } else {\n              module.debug('Restoring previously selected values');\n            }\n          },\n          values: function () {\n            // prevents callbacks from occurring on initial load\n            module.set.initialLoad();\n\n            if (settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {\n              module.restore.remoteValues();\n            } else {\n              module.set.selected();\n            }\n\n            module.remove.initialLoad();\n          },\n          remoteValues: function () {\n            var values = module.get.remoteValues();\n            module.debug('Recreating selected from session data', values);\n\n            if (values) {\n              if (module.is.single()) {\n                $.each(values, function (value, name) {\n                  module.set.text(name);\n                });\n              } else {\n                $.each(values, function (value, name) {\n                  module.add.label(value, name);\n                });\n              }\n            }\n          }\n        },\n        read: {\n          remoteData: function (value) {\n            var name;\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            name = sessionStorage.getItem(value);\n            return name !== undefined ? name : false;\n          }\n        },\n        save: {\n          defaults: function () {\n            module.save.defaultText();\n            module.save.placeholderText();\n            module.save.defaultValue();\n          },\n          defaultValue: function () {\n            var value = module.get.value();\n            module.verbose('Saving default value as', value);\n            $module.data(metadata.defaultValue, value);\n          },\n          defaultText: function () {\n            var text = module.get.text();\n            module.verbose('Saving default text as', text);\n            $module.data(metadata.defaultText, text);\n          },\n          placeholderText: function () {\n            var text;\n\n            if (settings.placeholder !== false && $text.hasClass(className.placeholder)) {\n              text = module.get.text();\n              module.verbose('Saving placeholder text as', text);\n              $module.data(metadata.placeholderText, text);\n            }\n          },\n          remoteData: function (name, value) {\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            module.verbose('Saving remote data to session storage', value, name);\n            sessionStorage.setItem(value, name);\n          }\n        },\n        clear: function () {\n          if (module.is.multiple() && settings.useLabels) {\n            module.remove.labels();\n          } else {\n            module.remove.activeItem();\n            module.remove.selectedItem();\n          }\n\n          module.set.placeholderText();\n          module.clearValue();\n        },\n        clearValue: function () {\n          module.set.value('');\n        },\n        scrollPage: function (direction, $selectedItem) {\n          var $currentItem = $selectedItem || module.get.selectedItem(),\n              $menu = $currentItem.closest(selector.menu),\n              menuHeight = $menu.outerHeight(),\n              currentScroll = $menu.scrollTop(),\n              itemHeight = $item.eq(0).outerHeight(),\n              itemsPerPage = Math.floor(menuHeight / itemHeight),\n              maxScroll = $menu.prop('scrollHeight'),\n              newScroll = direction == 'up' ? currentScroll - itemHeight * itemsPerPage : currentScroll + itemHeight * itemsPerPage,\n              $selectableItem = $item.not(selector.unselectable),\n              isWithinRange,\n              $nextSelectedItem,\n              elementIndex;\n          elementIndex = direction == 'up' ? $selectableItem.index($currentItem) - itemsPerPage : $selectableItem.index($currentItem) + itemsPerPage;\n          isWithinRange = direction == 'up' ? elementIndex >= 0 : elementIndex < $selectableItem.length;\n          $nextSelectedItem = isWithinRange ? $selectableItem.eq(elementIndex) : direction == 'up' ? $selectableItem.first() : $selectableItem.last();\n\n          if ($nextSelectedItem.length > 0) {\n            module.debug('Scrolling page', direction, $nextSelectedItem);\n            $currentItem.removeClass(className.selected);\n            $nextSelectedItem.addClass(className.selected);\n\n            if (settings.selectOnKeydown && module.is.single()) {\n              module.set.selectedItem($nextSelectedItem);\n            }\n\n            $menu.scrollTop(newScroll);\n          }\n        },\n        set: {\n          filtered: function () {\n            var isMultiple = module.is.multiple(),\n                isSearch = module.is.searchSelection(),\n                isSearchMultiple = isMultiple && isSearch,\n                searchValue = isSearch ? module.get.query() : '',\n                hasSearchValue = typeof searchValue === 'string' && searchValue.length > 0,\n                searchWidth = module.get.searchWidth(),\n                valueIsSet = searchValue !== '';\n\n            if (isMultiple && hasSearchValue) {\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\n              $search.css('width', searchWidth);\n            }\n\n            if (hasSearchValue || isSearchMultiple && valueIsSet) {\n              module.verbose('Hiding placeholder text');\n              $text.addClass(className.filtered);\n            } else if (!isMultiple || isSearchMultiple && !valueIsSet) {\n              module.verbose('Showing placeholder text');\n              $text.removeClass(className.filtered);\n            }\n          },\n          empty: function () {\n            $module.addClass(className.empty);\n          },\n          loading: function () {\n            $module.addClass(className.loading);\n          },\n          placeholderText: function (text) {\n            text = text || module.get.placeholderText();\n            module.debug('Setting placeholder text', text);\n            module.set.text(text);\n            $text.addClass(className.placeholder);\n          },\n          tabbable: function () {\n            if (module.is.searchSelection()) {\n              module.debug('Added tabindex to searchable dropdown');\n              $search.val('').attr('tabindex', 0);\n              $menu.attr('tabindex', -1);\n            } else {\n              module.debug('Added tabindex to dropdown');\n\n              if ($module.attr('tabindex') === undefined) {\n                $module.attr('tabindex', 0);\n                $menu.attr('tabindex', -1);\n              }\n            }\n          },\n          initialLoad: function () {\n            module.verbose('Setting initial load');\n            initialLoad = true;\n          },\n          activeItem: function ($item) {\n            if (settings.allowAdditions && $item.filter(selector.addition).length > 0) {\n              $item.addClass(className.filtered);\n            } else {\n              $item.addClass(className.active);\n            }\n          },\n          partialSearch: function (text) {\n            var length = module.get.query().length;\n            $search.val(text.substr(0, length));\n          },\n          scrollPosition: function ($item, forceScroll) {\n            var edgeTolerance = 5,\n                $menu,\n                hasActive,\n                offset,\n                itemHeight,\n                itemOffset,\n                menuOffset,\n                menuScroll,\n                menuHeight,\n                abovePage,\n                belowPage;\n            $item = $item || module.get.selectedItem();\n            $menu = $item.closest(selector.menu);\n            hasActive = $item && $item.length > 0;\n            forceScroll = forceScroll !== undefined ? forceScroll : false;\n\n            if ($item && $menu.length > 0 && hasActive) {\n              itemOffset = $item.position().top;\n              $menu.addClass(className.loading);\n              menuScroll = $menu.scrollTop();\n              menuOffset = $menu.offset().top;\n              itemOffset = $item.offset().top;\n              offset = menuScroll - menuOffset + itemOffset;\n\n              if (!forceScroll) {\n                menuHeight = $menu.height();\n                belowPage = menuScroll + menuHeight < offset + edgeTolerance;\n                abovePage = offset - edgeTolerance < menuScroll;\n              }\n\n              module.debug('Scrolling to active item', offset);\n\n              if (forceScroll || abovePage || belowPage) {\n                $menu.scrollTop(offset);\n              }\n\n              $menu.removeClass(className.loading);\n            }\n          },\n          text: function (text) {\n            if (settings.action !== 'select') {\n              if (settings.action == 'combo') {\n                module.debug('Changing combo button text', text, $combo);\n\n                if (settings.preserveHTML) {\n                  $combo.html(text);\n                } else {\n                  $combo.text(text);\n                }\n              } else {\n                if (text !== module.get.placeholderText()) {\n                  $text.removeClass(className.placeholder);\n                }\n\n                module.debug('Changing text', text, $text);\n                $text.removeClass(className.filtered);\n\n                if (settings.preserveHTML) {\n                  $text.html(text);\n                } else {\n                  $text.text(text);\n                }\n              }\n            }\n          },\n          selectedItem: function ($item) {\n            var value = module.get.choiceValue($item),\n                searchText = module.get.choiceText($item, false),\n                text = module.get.choiceText($item, true);\n            module.debug('Setting user selection to item', $item);\n            module.remove.activeItem();\n            module.set.partialSearch(searchText);\n            module.set.activeItem($item);\n            module.set.selected(value, $item);\n            module.set.text(text);\n          },\n          selectedLetter: function (letter) {\n            var $selectedItem = $item.filter('.' + className.selected),\n                alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\n                $nextValue = false,\n                $nextItem; // check next of same letter\n\n            if (alreadySelectedLetter) {\n              $nextItem = $selectedItem.nextAll($item).eq(0);\n\n              if (module.has.firstLetter($nextItem, letter)) {\n                $nextValue = $nextItem;\n              }\n            } // check all values\n\n\n            if (!$nextValue) {\n              $item.each(function () {\n                if (module.has.firstLetter($(this), letter)) {\n                  $nextValue = $(this);\n                  return false;\n                }\n              });\n            } // set next value\n\n\n            if ($nextValue) {\n              module.verbose('Scrolling to next value with letter', letter);\n              module.set.scrollPosition($nextValue);\n              $selectedItem.removeClass(className.selected);\n              $nextValue.addClass(className.selected);\n\n              if (settings.selectOnKeydown && module.is.single()) {\n                module.set.selectedItem($nextValue);\n              }\n            }\n          },\n          direction: function ($menu) {\n            if (settings.direction == 'auto') {\n              // reset position\n              module.remove.upward();\n\n              if (module.can.openDownward($menu)) {\n                module.remove.upward($menu);\n              } else {\n                module.set.upward($menu);\n              }\n\n              if (!module.is.leftward($menu) && !module.can.openRightward($menu)) {\n                module.set.leftward($menu);\n              }\n            } else if (settings.direction == 'upward') {\n              module.set.upward($menu);\n            }\n          },\n          upward: function ($currentMenu) {\n            var $element = $currentMenu || $module;\n            $element.addClass(className.upward);\n          },\n          leftward: function ($currentMenu) {\n            var $element = $currentMenu || $menu;\n            $element.addClass(className.leftward);\n          },\n          value: function (value, text, $selected) {\n            var escapedValue = module.escape.value(value),\n                hasInput = $input.length > 0,\n                currentValue = module.get.values(),\n                stringValue = value !== undefined ? String(value) : value,\n                newValue;\n\n            if (hasInput) {\n              if (!settings.allowReselection && stringValue == currentValue) {\n                module.verbose('Skipping value update already same value', value, currentValue);\n\n                if (!module.is.initialLoad()) {\n                  return;\n                }\n              }\n\n              if (module.is.single() && module.has.selectInput() && module.can.extendSelect()) {\n                module.debug('Adding user option', value);\n                module.add.optionValue(value);\n              }\n\n              module.debug('Updating input value', escapedValue, currentValue);\n              internalChange = true;\n              $input.val(escapedValue);\n\n              if (settings.fireOnInit === false && module.is.initialLoad()) {\n                module.debug('Input native change event ignored on initial load');\n              } else {\n                module.trigger.change();\n              }\n\n              internalChange = false;\n            } else {\n              module.verbose('Storing value in metadata', escapedValue, $input);\n\n              if (escapedValue !== currentValue) {\n                $module.data(metadata.value, stringValue);\n              }\n            }\n\n            if (module.is.single() && settings.clearable) {\n              // treat undefined or '' as empty\n              if (!escapedValue) {\n                module.remove.clearable();\n              } else {\n                module.set.clearable();\n              }\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('No callback on initial load', settings.onChange);\n            } else {\n              settings.onChange.call(element, value, text, $selected);\n            }\n          },\n          active: function () {\n            $module.addClass(className.active);\n          },\n          multiple: function () {\n            $module.addClass(className.multiple);\n          },\n          visible: function () {\n            $module.addClass(className.visible);\n          },\n          exactly: function (value, $selectedItem) {\n            module.debug('Setting selected to exact values');\n            module.clear();\n            module.set.selected(value, $selectedItem);\n          },\n          selected: function (value, $selectedItem) {\n            var isMultiple = module.is.multiple(),\n                $userSelectedItem;\n            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);\n\n            if (!$selectedItem) {\n              return;\n            }\n\n            module.debug('Setting selected menu item to', $selectedItem);\n\n            if (module.is.multiple()) {\n              module.remove.searchWidth();\n            }\n\n            if (module.is.single()) {\n              module.remove.activeItem();\n              module.remove.selectedItem();\n            } else if (settings.useLabels) {\n              module.remove.selectedItem();\n            } // select each item\n\n\n            $selectedItem.each(function () {\n              var $selected = $(this),\n                  selectedText = module.get.choiceText($selected),\n                  selectedValue = module.get.choiceValue($selected, selectedText),\n                  isFiltered = $selected.hasClass(className.filtered),\n                  isActive = $selected.hasClass(className.active),\n                  isUserValue = $selected.hasClass(className.addition),\n                  shouldAnimate = isMultiple && $selectedItem.length == 1;\n\n              if (isMultiple) {\n                if (!isActive || isUserValue) {\n                  if (settings.apiSettings && settings.saveRemoteData) {\n                    module.save.remoteData(selectedText, selectedValue);\n                  }\n\n                  if (settings.useLabels) {\n                    module.add.label(selectedValue, selectedText, shouldAnimate);\n                    module.add.value(selectedValue, selectedText, $selected);\n                    module.set.activeItem($selected);\n                    module.filterActive();\n                    module.select.nextAvailable($selectedItem);\n                  } else {\n                    module.add.value(selectedValue, selectedText, $selected);\n                    module.set.text(module.add.variables(message.count));\n                    module.set.activeItem($selected);\n                  }\n                } else if (!isFiltered) {\n                  module.debug('Selected active value, removing label');\n                  module.remove.selected(selectedValue);\n                }\n              } else {\n                if (settings.apiSettings && settings.saveRemoteData) {\n                  module.save.remoteData(selectedText, selectedValue);\n                }\n\n                module.set.text(selectedText);\n                module.set.value(selectedValue, selectedText, $selected);\n                $selected.addClass(className.active).addClass(className.selected);\n              }\n            });\n          },\n          clearable: function () {\n            $icon.addClass(className.clear);\n          }\n        },\n        add: {\n          label: function (value, text, shouldAnimate) {\n            var $next = module.is.searchSelection() ? $search : $text,\n                escapedValue = module.escape.value(value),\n                $label;\n\n            if (settings.ignoreCase) {\n              escapedValue = escapedValue.toLowerCase();\n            }\n\n            $label = $('<a />').addClass(className.label).attr('data-' + metadata.value, escapedValue).html(templates.label(escapedValue, text));\n            $label = settings.onLabelCreate.call($label, escapedValue, text);\n\n            if (module.has.label(value)) {\n              module.debug('User selection already exists, skipping', escapedValue);\n              return;\n            }\n\n            if (settings.label.variation) {\n              $label.addClass(settings.label.variation);\n            }\n\n            if (shouldAnimate === true) {\n              module.debug('Animating in label', $label);\n              $label.addClass(className.hidden).insertBefore($next).transition(settings.label.transition, settings.label.duration);\n            } else {\n              module.debug('Adding selection label', $label);\n              $label.insertBefore($next);\n            }\n          },\n          message: function (message) {\n            var $message = $menu.children(selector.message),\n                html = settings.templates.message(module.add.variables(message));\n\n            if ($message.length > 0) {\n              $message.html(html);\n            } else {\n              $message = $('<div/>').html(html).addClass(className.message).appendTo($menu);\n            }\n          },\n          optionValue: function (value) {\n            var escapedValue = module.escape.value(value),\n                $option = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n                hasOption = $option.length > 0;\n\n            if (hasOption) {\n              return;\n            } // temporarily disconnect observer\n\n\n            module.disconnect.selectObserver();\n\n            if (module.is.single()) {\n              module.verbose('Removing previous user addition');\n              $input.find('option.' + className.addition).remove();\n            }\n\n            $('<option/>').prop('value', escapedValue).addClass(className.addition).html(value).appendTo($input);\n            module.verbose('Adding user addition as an <option>', value);\n            module.observe.select();\n          },\n          userSuggestion: function (value) {\n            var $addition = $menu.children(selector.addition),\n                $existingItem = module.get.item(value),\n                alreadyHasValue = $existingItem && $existingItem.not(selector.addition).length,\n                hasUserSuggestion = $addition.length > 0,\n                html;\n\n            if (settings.useLabels && module.has.maxSelections()) {\n              return;\n            }\n\n            if (value === '' || alreadyHasValue) {\n              $addition.remove();\n              return;\n            }\n\n            if (hasUserSuggestion) {\n              $addition.data(metadata.value, value).data(metadata.text, value).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).removeClass(className.filtered);\n\n              if (!settings.hideAdditions) {\n                html = settings.templates.addition(module.add.variables(message.addResult, value));\n                $addition.html(html);\n              }\n\n              module.verbose('Replacing user suggestion with new value', $addition);\n            } else {\n              $addition = module.create.userChoice(value);\n              $addition.prependTo($menu);\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\n            }\n\n            if (!settings.hideAdditions || module.is.allFiltered()) {\n              $addition.addClass(className.selected).siblings().removeClass(className.selected);\n            }\n\n            module.refreshItems();\n          },\n          variables: function (message, term) {\n            var hasCount = message.search('{count}') !== -1,\n                hasMaxCount = message.search('{maxCount}') !== -1,\n                hasTerm = message.search('{term}') !== -1,\n                values,\n                count,\n                query;\n            module.verbose('Adding templated variables to message', message);\n\n            if (hasCount) {\n              count = module.get.selectionCount();\n              message = message.replace('{count}', count);\n            }\n\n            if (hasMaxCount) {\n              count = module.get.selectionCount();\n              message = message.replace('{maxCount}', settings.maxSelections);\n            }\n\n            if (hasTerm) {\n              query = term || module.get.query();\n              message = message.replace('{term}', query);\n            }\n\n            return message;\n          },\n          value: function (addedValue, addedText, $selectedItem) {\n            var currentValue = module.get.values(),\n                newValue;\n\n            if (module.has.value(addedValue)) {\n              module.debug('Value already selected');\n              return;\n            }\n\n            if (addedValue === '') {\n              module.debug('Cannot select blank values from multiselect');\n              return;\n            } // extend current array\n\n\n            if ($.isArray(currentValue)) {\n              newValue = currentValue.concat([addedValue]);\n              newValue = module.get.uniqueArray(newValue);\n            } else {\n              newValue = [addedValue];\n            } // add values\n\n\n            if (module.has.selectInput()) {\n              if (module.can.extendSelect()) {\n                module.debug('Adding value to select', addedValue, newValue, $input);\n                module.add.optionValue(addedValue);\n              }\n            } else {\n              newValue = newValue.join(settings.delimiter);\n              module.debug('Setting hidden input to delimited value', newValue, $input);\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\n            } else {\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\n            }\n\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\n            module.check.maxSelections();\n          }\n        },\n        remove: {\n          active: function () {\n            $module.removeClass(className.active);\n          },\n          activeLabel: function () {\n            $module.find(selector.label).removeClass(className.active);\n          },\n          empty: function () {\n            $module.removeClass(className.empty);\n          },\n          loading: function () {\n            $module.removeClass(className.loading);\n          },\n          initialLoad: function () {\n            initialLoad = false;\n          },\n          upward: function ($currentMenu) {\n            var $element = $currentMenu || $module;\n            $element.removeClass(className.upward);\n          },\n          leftward: function ($currentMenu) {\n            var $element = $currentMenu || $menu;\n            $element.removeClass(className.leftward);\n          },\n          visible: function () {\n            $module.removeClass(className.visible);\n          },\n          activeItem: function () {\n            $item.removeClass(className.active);\n          },\n          filteredItem: function () {\n            if (settings.useLabels && module.has.maxSelections()) {\n              return;\n            }\n\n            if (settings.useLabels && module.is.multiple()) {\n              $item.not('.' + className.active).removeClass(className.filtered);\n            } else {\n              $item.removeClass(className.filtered);\n            }\n\n            module.remove.empty();\n          },\n          optionValue: function (value) {\n            var escapedValue = module.escape.value(value),\n                $option = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n                hasOption = $option.length > 0;\n\n            if (!hasOption || !$option.hasClass(className.addition)) {\n              return;\n            } // temporarily disconnect observer\n\n\n            if (selectObserver) {\n              selectObserver.disconnect();\n              module.verbose('Temporarily disconnecting mutation observer');\n            }\n\n            $option.remove();\n            module.verbose('Removing user addition as an <option>', escapedValue);\n\n            if (selectObserver) {\n              selectObserver.observe($input[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          },\n          message: function () {\n            $menu.children(selector.message).remove();\n          },\n          searchWidth: function () {\n            $search.css('width', '');\n          },\n          searchTerm: function () {\n            module.verbose('Cleared search term');\n            $search.val('');\n            module.set.filtered();\n          },\n          userAddition: function () {\n            $item.filter(selector.addition).remove();\n          },\n          selected: function (value, $selectedItem) {\n            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);\n\n            if (!$selectedItem) {\n              return false;\n            }\n\n            $selectedItem.each(function () {\n              var $selected = $(this),\n                  selectedText = module.get.choiceText($selected),\n                  selectedValue = module.get.choiceValue($selected, selectedText);\n\n              if (module.is.multiple()) {\n                if (settings.useLabels) {\n                  module.remove.value(selectedValue, selectedText, $selected);\n                  module.remove.label(selectedValue);\n                } else {\n                  module.remove.value(selectedValue, selectedText, $selected);\n\n                  if (module.get.selectionCount() === 0) {\n                    module.set.placeholderText();\n                  } else {\n                    module.set.text(module.add.variables(message.count));\n                  }\n                }\n              } else {\n                module.remove.value(selectedValue, selectedText, $selected);\n              }\n\n              $selected.removeClass(className.filtered).removeClass(className.active);\n\n              if (settings.useLabels) {\n                $selected.removeClass(className.selected);\n              }\n            });\n          },\n          selectedItem: function () {\n            $item.removeClass(className.selected);\n          },\n          value: function (removedValue, removedText, $removedItem) {\n            var values = module.get.values(),\n                newValue;\n\n            if (module.has.selectInput()) {\n              module.verbose('Input is <select> removing selected option', removedValue);\n              newValue = module.remove.arrayValue(removedValue, values);\n              module.remove.optionValue(removedValue);\n            } else {\n              module.verbose('Removing from delimited values', removedValue);\n              newValue = module.remove.arrayValue(removedValue, values);\n              newValue = newValue.join(settings.delimiter);\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('No callback on initial load', settings.onRemove);\n            } else {\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\n            }\n\n            module.set.value(newValue, removedText, $removedItem);\n            module.check.maxSelections();\n          },\n          arrayValue: function (removedValue, values) {\n            if (!$.isArray(values)) {\n              values = [values];\n            }\n\n            values = $.grep(values, function (value) {\n              return removedValue != value;\n            });\n            module.verbose('Removed value from delimited string', removedValue, values);\n            return values;\n          },\n          label: function (value, shouldAnimate) {\n            var $labels = $module.find(selector.label),\n                $removedLabel = $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(value) + '\"]');\n            module.verbose('Removing label', $removedLabel);\n            $removedLabel.remove();\n          },\n          activeLabels: function ($activeLabels) {\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\n            module.verbose('Removing active label selections', $activeLabels);\n            module.remove.labels($activeLabels);\n          },\n          labels: function ($labels) {\n            $labels = $labels || $module.find(selector.label);\n            module.verbose('Removing labels', $labels);\n            $labels.each(function () {\n              var $label = $(this),\n                  value = $label.data(metadata.value),\n                  stringValue = value !== undefined ? String(value) : value,\n                  isUserValue = module.is.userValue(stringValue);\n\n              if (settings.onLabelRemove.call($label, value) === false) {\n                module.debug('Label remove callback cancelled removal');\n                return;\n              }\n\n              module.remove.message();\n\n              if (isUserValue) {\n                module.remove.value(stringValue);\n                module.remove.label(stringValue);\n              } else {\n                // selected will also remove label\n                module.remove.selected(stringValue);\n              }\n            });\n          },\n          tabbable: function () {\n            if (module.is.searchSelection()) {\n              module.debug('Searchable dropdown initialized');\n              $search.removeAttr('tabindex');\n              $menu.removeAttr('tabindex');\n            } else {\n              module.debug('Simple selection dropdown initialized');\n              $module.removeAttr('tabindex');\n              $menu.removeAttr('tabindex');\n            }\n          },\n          clearable: function () {\n            $icon.removeClass(className.clear);\n          }\n        },\n        has: {\n          menuSearch: function () {\n            return module.has.search() && $search.closest($menu).length > 0;\n          },\n          search: function () {\n            return $search.length > 0;\n          },\n          sizer: function () {\n            return $sizer.length > 0;\n          },\n          selectInput: function () {\n            return $input.is('select');\n          },\n          minCharacters: function (searchTerm) {\n            if (settings.minCharacters) {\n              searchTerm = searchTerm !== undefined ? String(searchTerm) : String(module.get.query());\n              return searchTerm.length >= settings.minCharacters;\n            }\n\n            return true;\n          },\n          firstLetter: function ($item, letter) {\n            var text, firstLetter;\n\n            if (!$item || $item.length === 0 || typeof letter !== 'string') {\n              return false;\n            }\n\n            text = module.get.choiceText($item, false);\n            letter = letter.toLowerCase();\n            firstLetter = String(text).charAt(0).toLowerCase();\n            return letter == firstLetter;\n          },\n          input: function () {\n            return $input.length > 0;\n          },\n          items: function () {\n            return $item.length > 0;\n          },\n          menu: function () {\n            return $menu.length > 0;\n          },\n          message: function () {\n            return $menu.children(selector.message).length !== 0;\n          },\n          label: function (value) {\n            var escapedValue = module.escape.value(value),\n                $labels = $module.find(selector.label);\n\n            if (settings.ignoreCase) {\n              escapedValue = escapedValue.toLowerCase();\n            }\n\n            return $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(escapedValue) + '\"]').length > 0;\n          },\n          maxSelections: function () {\n            return settings.maxSelections && module.get.selectionCount() >= settings.maxSelections;\n          },\n          allResultsFiltered: function () {\n            var $normalResults = $item.not(selector.addition);\n            return $normalResults.filter(selector.unselectable).length === $normalResults.length;\n          },\n          userSuggestion: function () {\n            return $menu.children(selector.addition).length > 0;\n          },\n          query: function () {\n            return module.get.query() !== '';\n          },\n          value: function (value) {\n            return settings.ignoreCase ? module.has.valueIgnoringCase(value) : module.has.valueMatchingCase(value);\n          },\n          valueMatchingCase: function (value) {\n            var values = module.get.values(),\n                hasValue = $.isArray(values) ? values && $.inArray(value, values) !== -1 : values == value;\n            return hasValue ? true : false;\n          },\n          valueIgnoringCase: function (value) {\n            var values = module.get.values(),\n                hasValue = false;\n\n            if (!$.isArray(values)) {\n              values = [values];\n            }\n\n            $.each(values, function (index, existingValue) {\n              if (String(value).toLowerCase() == String(existingValue).toLowerCase()) {\n                hasValue = true;\n                return false;\n              }\n            });\n            return hasValue;\n          }\n        },\n        is: {\n          active: function () {\n            return $module.hasClass(className.active);\n          },\n          animatingInward: function () {\n            return $menu.transition('is inward');\n          },\n          animatingOutward: function () {\n            return $menu.transition('is outward');\n          },\n          bubbledLabelClick: function (event) {\n            return $(event.target).is('select, input') && $module.closest('label').length > 0;\n          },\n          bubbledIconClick: function (event) {\n            return $(event.target).closest($icon).length > 0;\n          },\n          alreadySetup: function () {\n            return $module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0;\n          },\n          animating: function ($subMenu) {\n            return $subMenu ? $subMenu.transition && $subMenu.transition('is animating') : $menu.transition && $menu.transition('is animating');\n          },\n          leftward: function ($subMenu) {\n            var $selectedMenu = $subMenu || $menu;\n            return $selectedMenu.hasClass(className.leftward);\n          },\n          disabled: function () {\n            return $module.hasClass(className.disabled);\n          },\n          focused: function () {\n            return document.activeElement === $module[0];\n          },\n          focusedOnSearch: function () {\n            return document.activeElement === $search[0];\n          },\n          allFiltered: function () {\n            return (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered();\n          },\n          hidden: function ($subMenu) {\n            return !module.is.visible($subMenu);\n          },\n          initialLoad: function () {\n            return initialLoad;\n          },\n          inObject: function (needle, object) {\n            var found = false;\n            $.each(object, function (index, property) {\n              if (property == needle) {\n                found = true;\n                return true;\n              }\n            });\n            return found;\n          },\n          multiple: function () {\n            return $module.hasClass(className.multiple);\n          },\n          remote: function () {\n            return settings.apiSettings && module.can.useAPI();\n          },\n          single: function () {\n            return !module.is.multiple();\n          },\n          selectMutation: function (mutations) {\n            var selectChanged = false;\n            $.each(mutations, function (index, mutation) {\n              if (mutation.target && $(mutation.target).is('select')) {\n                selectChanged = true;\n                return true;\n              }\n            });\n            return selectChanged;\n          },\n          search: function () {\n            return $module.hasClass(className.search);\n          },\n          searchSelection: function () {\n            return module.has.search() && $search.parent(selector.dropdown).length === 1;\n          },\n          selection: function () {\n            return $module.hasClass(className.selection);\n          },\n          userValue: function (value) {\n            return $.inArray(value, module.get.userValues()) !== -1;\n          },\n          upward: function ($menu) {\n            var $element = $menu || $module;\n            return $element.hasClass(className.upward);\n          },\n          visible: function ($subMenu) {\n            return $subMenu ? $subMenu.hasClass(className.visible) : $menu.hasClass(className.visible);\n          },\n          verticallyScrollableContext: function () {\n            var overflowY = $context.get(0) !== window ? $context.css('overflow-y') : false;\n            return overflowY == 'auto' || overflowY == 'scroll';\n          },\n          horizontallyScrollableContext: function () {\n            var overflowX = $context.get(0) !== window ? $context.css('overflow-X') : false;\n            return overflowX == 'auto' || overflowX == 'scroll';\n          }\n        },\n        can: {\n          activate: function ($item) {\n            if (settings.useLabels) {\n              return true;\n            }\n\n            if (!module.has.maxSelections()) {\n              return true;\n            }\n\n            if (module.has.maxSelections() && $item.hasClass(className.active)) {\n              return true;\n            }\n\n            return false;\n          },\n          openDownward: function ($subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                canOpenDownward = true,\n                onScreen = {},\n                calculations;\n            $currentMenu.addClass(className.loading);\n            calculations = {\n              context: {\n                offset: $context.get(0) === window ? {\n                  top: 0,\n                  left: 0\n                } : $context.offset(),\n                scrollTop: $context.scrollTop(),\n                height: $context.outerHeight()\n              },\n              menu: {\n                offset: $currentMenu.offset(),\n                height: $currentMenu.outerHeight()\n              }\n            };\n\n            if (module.is.verticallyScrollableContext()) {\n              calculations.menu.offset.top += calculations.context.scrollTop;\n            }\n\n            onScreen = {\n              above: calculations.context.scrollTop <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,\n              below: calculations.context.scrollTop + calculations.context.height >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height\n            };\n\n            if (onScreen.below) {\n              module.verbose('Dropdown can fit in context downward', onScreen);\n              canOpenDownward = true;\n            } else if (!onScreen.below && !onScreen.above) {\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\n              canOpenDownward = true;\n            } else {\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\n              canOpenDownward = false;\n            }\n\n            $currentMenu.removeClass(className.loading);\n            return canOpenDownward;\n          },\n          openRightward: function ($subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                canOpenRightward = true,\n                isOffscreenRight = false,\n                calculations;\n            $currentMenu.addClass(className.loading);\n            calculations = {\n              context: {\n                offset: $context.get(0) === window ? {\n                  top: 0,\n                  left: 0\n                } : $context.offset(),\n                scrollLeft: $context.scrollLeft(),\n                width: $context.outerWidth()\n              },\n              menu: {\n                offset: $currentMenu.offset(),\n                width: $currentMenu.outerWidth()\n              }\n            };\n\n            if (module.is.horizontallyScrollableContext()) {\n              calculations.menu.offset.left += calculations.context.scrollLeft;\n            }\n\n            isOffscreenRight = calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width;\n\n            if (isOffscreenRight) {\n              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);\n              canOpenRightward = false;\n            }\n\n            $currentMenu.removeClass(className.loading);\n            return canOpenRightward;\n          },\n          click: function () {\n            return hasTouch || settings.on == 'click';\n          },\n          extendSelect: function () {\n            return settings.allowAdditions || settings.apiSettings;\n          },\n          show: function () {\n            return !module.is.disabled() && (module.has.items() || module.has.message());\n          },\n          useAPI: function () {\n            return $.fn.api !== undefined;\n          }\n        },\n        animate: {\n          show: function (callback, $subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                start = $subMenu ? function () {} : function () {\n              module.hideSubMenus();\n              module.hideOthers();\n              module.set.active();\n            },\n                transition;\n            callback = $.isFunction(callback) ? callback : function () {};\n            module.verbose('Doing menu show animation', $currentMenu);\n            module.set.direction($subMenu);\n            transition = module.get.transition($subMenu);\n\n            if (module.is.selection()) {\n              module.set.scrollPosition(module.get.selectedItem(), true);\n            }\n\n            if (module.is.hidden($currentMenu) || module.is.animating($currentMenu)) {\n              if (transition == 'none') {\n                start();\n                $currentMenu.transition('show');\n                callback.call(element);\n              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $currentMenu.transition({\n                  animation: transition + ' in',\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  duration: settings.duration,\n                  queue: true,\n                  onStart: start,\n                  onComplete: function () {\n                    callback.call(element);\n                  }\n                });\n              } else {\n                module.error(error.noTransition, transition);\n              }\n            }\n          },\n          hide: function (callback, $subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                duration = $subMenu ? settings.duration * 0.9 : settings.duration,\n                start = $subMenu ? function () {} : function () {\n              if (module.can.click()) {\n                module.unbind.intent();\n              }\n\n              module.remove.active();\n            },\n                transition = module.get.transition($subMenu);\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (module.is.visible($currentMenu) || module.is.animating($currentMenu)) {\n              module.verbose('Doing menu hide animation', $currentMenu);\n\n              if (transition == 'none') {\n                start();\n                $currentMenu.transition('hide');\n                callback.call(element);\n              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $currentMenu.transition({\n                  animation: transition + ' out',\n                  duration: settings.duration,\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  queue: false,\n                  onStart: start,\n                  onComplete: function () {\n                    callback.call(element);\n                  }\n                });\n              } else {\n                module.error(error.transition);\n              }\n            }\n          }\n        },\n        hideAndClear: function () {\n          module.remove.searchTerm();\n\n          if (module.has.maxSelections()) {\n            return;\n          }\n\n          if (module.has.search()) {\n            module.hide(function () {\n              module.remove.filteredItem();\n            });\n          } else {\n            module.hide();\n          }\n        },\n        delay: {\n          show: function () {\n            module.verbose('Delaying show event to ensure user intent');\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.show, settings.delay.show);\n          },\n          hide: function () {\n            module.verbose('Delaying hide event to ensure user intent');\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.hide, settings.delay.hide);\n          }\n        },\n        escape: {\n          value: function (value) {\n            var multipleValues = $.isArray(value),\n                stringValue = typeof value === 'string',\n                isUnparsable = !stringValue && !multipleValues,\n                hasQuotes = stringValue && value.search(regExp.quote) !== -1,\n                values = [];\n\n            if (isUnparsable || !hasQuotes) {\n              return value;\n            }\n\n            module.debug('Encoding quote values for use in select', value);\n\n            if (multipleValues) {\n              $.each(value, function (index, value) {\n                values.push(value.replace(regExp.quote, '&quot;'));\n              });\n              return values;\n            }\n\n            return value.replace(regExp.quote, '&quot;');\n          },\n          string: function (text) {\n            text = String(text);\n            return text.replace(regExp.escape, '\\\\$&');\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : $allModules;\n  };\n\n  $.fn.dropdown.settings = {\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    on: 'click',\n    // what event should show menu action on item selection\n    action: 'activate',\n    // action on item selection (nothing, activate, select, combo, hide, function(){})\n    values: false,\n    // specify values to use for dropdown\n    clearable: false,\n    // whether the value of the dropdown can be cleared\n    apiSettings: false,\n    selectOnKeydown: true,\n    // Whether selection should occur automatically when keyboard shortcuts used\n    minCharacters: 0,\n    // Minimum characters required to trigger API call\n    filterRemoteData: false,\n    // Whether API results should be filtered after being returned for query term\n    saveRemoteData: true,\n    // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh\n    throttle: 200,\n    // How long to wait after last user input to search remotely\n    context: window,\n    // Context to use when determining if on screen\n    direction: 'auto',\n    // Whether dropdown should always open in one direction\n    keepOnScreen: true,\n    // Whether dropdown should check whether it is on screen before showing\n    match: 'both',\n    // what to match against with search selection (both, text, or label)\n    fullTextSearch: false,\n    // search anywhere in value (set to 'exact' to require exact matches)\n    placeholder: 'auto',\n    // whether to convert blank <select> values to placeholder text\n    preserveHTML: true,\n    // preserve html when selecting value\n    sortSelect: false,\n    // sort selection on init\n    forceSelection: true,\n    // force a choice on blur with search selection\n    allowAdditions: false,\n    // whether multiple select should allow user added values\n    ignoreCase: false,\n    // whether to consider values not matching in case to be the same\n    hideAdditions: true,\n    // whether or not to hide special message prompting a user they can enter a value\n    maxSelections: false,\n    // When set to a number limits the number of selections to this count\n    useLabels: true,\n    // whether multiple select should filter currently active selections from choices\n    delimiter: ',',\n    // when multiselect uses normal <input> the values will be delimited with this character\n    showOnFocus: true,\n    // show menu on focus\n    allowReselection: false,\n    // whether current value should trigger callbacks when reselected\n    allowTab: true,\n    // add tabindex to element\n    allowCategorySelection: false,\n    // allow elements with sub-menus to be selected\n    fireOnInit: false,\n    // Whether callbacks should fire when initializing dropdown values\n    transition: 'auto',\n    // auto transition will slide down or up based on direction\n    duration: 200,\n    // duration of transition\n    glyphWidth: 1.037,\n    // widest glyph width in em (W is 1.037 em) used to calculate multiselect input width\n    // label settings on multi-select\n    label: {\n      transition: 'scale',\n      duration: 200,\n      variation: false\n    },\n    // delay before event\n    delay: {\n      hide: 300,\n      show: 200,\n      search: 20,\n      touch: 50\n    },\n\n    /* Callbacks */\n    onChange: function (value, text, $selected) {},\n    onAdd: function (value, text, $selected) {},\n    onRemove: function (value, text, $selected) {},\n    onLabelSelect: function ($selectedLabels) {},\n    onLabelCreate: function (value, text) {\n      return $(this);\n    },\n    onLabelRemove: function (value) {\n      return true;\n    },\n    onNoResults: function (searchTerm) {\n      return true;\n    },\n    onShow: function () {},\n    onHide: function () {},\n\n    /* Component */\n    name: 'Dropdown',\n    namespace: 'dropdown',\n    message: {\n      addResult: 'Add <b>{term}</b>',\n      count: '{count} selected',\n      maxSelections: 'Max {maxCount} selections',\n      noResults: 'No results found.',\n      serverError: 'There was an error contacting the server'\n    },\n    error: {\n      action: 'You called a dropdown action that was not defined',\n      alreadySetup: 'Once a select has been initialized behaviors must be called on the created ui dropdown',\n      labels: 'Allowing user additions currently requires the use of labels.',\n      missingMultiple: '<select> requires multiple property to be set to correctly preserve multiple values',\n      method: 'The method you called is not defined.',\n      noAPI: 'The API module is required to load resources remotely',\n      noStorage: 'Saving remote data requires session storage',\n      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'\n    },\n    regExp: {\n      escape: /[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\n      quote: /\"/g\n    },\n    metadata: {\n      defaultText: 'defaultText',\n      defaultValue: 'defaultValue',\n      placeholderText: 'placeholder',\n      text: 'text',\n      value: 'value'\n    },\n    // property names for remote query\n    fields: {\n      remoteValues: 'results',\n      // grouping for api results\n      values: 'values',\n      // grouping for all dropdown values\n      disabled: 'disabled',\n      // whether value should be disabled\n      name: 'name',\n      // displayed dropdown text\n      value: 'value',\n      // actual dropdown value\n      text: 'text' // displayed text when selected\n\n    },\n    keys: {\n      backspace: 8,\n      delimiter: 188,\n      // comma\n      deleteKey: 46,\n      enter: 13,\n      escape: 27,\n      pageUp: 33,\n      pageDown: 34,\n      leftArrow: 37,\n      upArrow: 38,\n      rightArrow: 39,\n      downArrow: 40\n    },\n    selector: {\n      addition: '.addition',\n      dropdown: '.ui.dropdown',\n      hidden: '.hidden',\n      icon: '> .dropdown.icon',\n      input: '> input[type=\"hidden\"], > select',\n      item: '.item',\n      label: '> .label',\n      remove: '> .label > .delete.icon',\n      siblingLabel: '.label',\n      menu: '.menu',\n      message: '.message',\n      menuIcon: '.dropdown.icon',\n      search: 'input.search, .menu > .search > input, .menu input.search',\n      sizer: '> input.sizer',\n      text: '> .text:not(.icon)',\n      unselectable: '.disabled, .filtered'\n    },\n    className: {\n      active: 'active',\n      addition: 'addition',\n      animating: 'animating',\n      clear: 'clear',\n      disabled: 'disabled',\n      empty: 'empty',\n      dropdown: 'ui dropdown',\n      filtered: 'filtered',\n      hidden: 'hidden transition',\n      item: 'item',\n      label: 'ui label',\n      loading: 'loading',\n      menu: 'menu',\n      message: 'message',\n      multiple: 'multiple',\n      placeholder: 'default',\n      sizer: 'sizer',\n      search: 'search',\n      selected: 'selected',\n      selection: 'selection',\n      upward: 'upward',\n      leftward: 'left',\n      visible: 'visible'\n    }\n  };\n  /* Templates */\n\n  $.fn.dropdown.settings.templates = {\n    // generates dropdown from select values\n    dropdown: function (select) {\n      var placeholder = select.placeholder || false,\n          values = select.values || {},\n          html = '';\n      html += '<i class=\"dropdown icon\"></i>';\n\n      if (select.placeholder) {\n        html += '<div class=\"default text\">' + placeholder + '</div>';\n      } else {\n        html += '<div class=\"text\"></div>';\n      }\n\n      html += '<div class=\"menu\">';\n      $.each(select.values, function (index, option) {\n        html += option.disabled ? '<div class=\"disabled item\" data-value=\"' + option.value + '\">' + option.name + '</div>' : '<div class=\"item\" data-value=\"' + option.value + '\">' + option.name + '</div>';\n      });\n      html += '</div>';\n      return html;\n    },\n    // generates just menu from select\n    menu: function (response, fields) {\n      var values = response[fields.values] || {},\n          html = '';\n      $.each(values, function (index, option) {\n        var maybeText = option[fields.text] ? 'data-text=\"' + option[fields.text] + '\"' : '',\n            maybeDisabled = option[fields.disabled] ? 'disabled ' : '';\n        html += '<div class=\"' + maybeDisabled + 'item\" data-value=\"' + option[fields.value] + '\"' + maybeText + '>';\n        html += option[fields.name];\n        html += '</div>';\n      });\n      return html;\n    },\n    // generates label for multiselect\n    label: function (value, text) {\n      return text + '<i class=\"delete icon\"></i>';\n    },\n    // generates messages like \"No results\"\n    message: function (message) {\n      return message;\n    },\n    // generates user addition to selection menu\n    addition: function (choice) {\n      return choice;\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Embed\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  \"use strict\";\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.embed = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.embed.settings, parameters) : $.extend({}, $.fn.embed.settings),\n          selector = settings.selector,\n          className = settings.className,\n          sources = settings.sources,\n          error = settings.error,\n          metadata = settings.metadata,\n          namespace = settings.namespace,\n          templates = settings.templates,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $window = $(window),\n          $module = $(this),\n          $placeholder = $module.find(selector.placeholder),\n          $icon = $module.find(selector.icon),\n          $embed = $module.find(selector.embed),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function () {\n          module.debug('Initializing embed');\n          module.determine.autoplay();\n          module.create();\n          module.bind.events();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous instance of embed');\n          module.reset();\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        refresh: function () {\n          module.verbose('Refreshing selector cache');\n          $placeholder = $module.find(selector.placeholder);\n          $icon = $module.find(selector.icon);\n          $embed = $module.find(selector.embed);\n        },\n        bind: {\n          events: function () {\n            if (module.has.placeholder()) {\n              module.debug('Adding placeholder events');\n              $module.on('click' + eventNamespace, selector.placeholder, module.createAndShow).on('click' + eventNamespace, selector.icon, module.createAndShow);\n            }\n          }\n        },\n        create: function () {\n          var placeholder = module.get.placeholder();\n\n          if (placeholder) {\n            module.createPlaceholder();\n          } else {\n            module.createAndShow();\n          }\n        },\n        createPlaceholder: function (placeholder) {\n          var icon = module.get.icon(),\n              url = module.get.url(),\n              embed = module.generate.embed(url);\n          placeholder = placeholder || module.get.placeholder();\n          $module.html(templates.placeholder(placeholder, icon));\n          module.debug('Creating placeholder for embed', placeholder, icon);\n        },\n        createEmbed: function (url) {\n          module.refresh();\n          url = url || module.get.url();\n          $embed = $('<div/>').addClass(className.embed).html(module.generate.embed(url)).appendTo($module);\n          settings.onCreate.call(element, url);\n          module.debug('Creating embed object', $embed);\n        },\n        changeEmbed: function (url) {\n          $embed.html(module.generate.embed(url));\n        },\n        createAndShow: function () {\n          module.createEmbed();\n          module.show();\n        },\n        // sets new embed\n        change: function (source, id, url) {\n          module.debug('Changing video to ', source, id, url);\n          $module.data(metadata.source, source).data(metadata.id, id);\n\n          if (url) {\n            $module.data(metadata.url, url);\n          } else {\n            $module.removeData(metadata.url);\n          }\n\n          if (module.has.embed()) {\n            module.changeEmbed();\n          } else {\n            module.create();\n          }\n        },\n        // clears embed\n        reset: function () {\n          module.debug('Clearing embed and showing placeholder');\n          module.remove.data();\n          module.remove.active();\n          module.remove.embed();\n          module.showPlaceholder();\n          settings.onReset.call(element);\n        },\n        // shows current embed\n        show: function () {\n          module.debug('Showing embed');\n          module.set.active();\n          settings.onDisplay.call(element);\n        },\n        hide: function () {\n          module.debug('Hiding embed');\n          module.showPlaceholder();\n        },\n        showPlaceholder: function () {\n          module.debug('Showing placeholder image');\n          module.remove.active();\n          settings.onPlaceholderDisplay.call(element);\n        },\n        get: {\n          id: function () {\n            return settings.id || $module.data(metadata.id);\n          },\n          placeholder: function () {\n            return settings.placeholder || $module.data(metadata.placeholder);\n          },\n          icon: function () {\n            return settings.icon ? settings.icon : $module.data(metadata.icon) !== undefined ? $module.data(metadata.icon) : module.determine.icon();\n          },\n          source: function (url) {\n            return settings.source ? settings.source : $module.data(metadata.source) !== undefined ? $module.data(metadata.source) : module.determine.source();\n          },\n          type: function () {\n            var source = module.get.source();\n            return sources[source] !== undefined ? sources[source].type : false;\n          },\n          url: function () {\n            return settings.url ? settings.url : $module.data(metadata.url) !== undefined ? $module.data(metadata.url) : module.determine.url();\n          }\n        },\n        determine: {\n          autoplay: function () {\n            if (module.should.autoplay()) {\n              settings.autoplay = true;\n            }\n          },\n          source: function (url) {\n            var matchedSource = false;\n            url = url || module.get.url();\n\n            if (url) {\n              $.each(sources, function (name, source) {\n                if (url.search(source.domain) !== -1) {\n                  matchedSource = name;\n                  return false;\n                }\n              });\n            }\n\n            return matchedSource;\n          },\n          icon: function () {\n            var source = module.get.source();\n            return sources[source] !== undefined ? sources[source].icon : false;\n          },\n          url: function () {\n            var id = settings.id || $module.data(metadata.id),\n                source = settings.source || $module.data(metadata.source),\n                url;\n            url = sources[source] !== undefined ? sources[source].url.replace('{id}', id) : false;\n\n            if (url) {\n              $module.data(metadata.url, url);\n            }\n\n            return url;\n          }\n        },\n        set: {\n          active: function () {\n            $module.addClass(className.active);\n          }\n        },\n        remove: {\n          data: function () {\n            $module.removeData(metadata.id).removeData(metadata.icon).removeData(metadata.placeholder).removeData(metadata.source).removeData(metadata.url);\n          },\n          active: function () {\n            $module.removeClass(className.active);\n          },\n          embed: function () {\n            $embed.empty();\n          }\n        },\n        encode: {\n          parameters: function (parameters) {\n            var urlString = [],\n                index;\n\n            for (index in parameters) {\n              urlString.push(encodeURIComponent(index) + '=' + encodeURIComponent(parameters[index]));\n            }\n\n            return urlString.join('&amp;');\n          }\n        },\n        generate: {\n          embed: function (url) {\n            module.debug('Generating embed html');\n            var source = module.get.source(),\n                html,\n                parameters;\n            url = module.get.url(url);\n\n            if (url) {\n              parameters = module.generate.parameters(source);\n              html = templates.iframe(url, parameters);\n            } else {\n              module.error(error.noURL, $module);\n            }\n\n            return html;\n          },\n          parameters: function (source, extraParameters) {\n            var parameters = sources[source] && sources[source].parameters !== undefined ? sources[source].parameters(settings) : {};\n            extraParameters = extraParameters || settings.parameters;\n\n            if (extraParameters) {\n              parameters = $.extend({}, parameters, extraParameters);\n            }\n\n            parameters = settings.onEmbed(parameters);\n            return module.encode.parameters(parameters);\n          }\n        },\n        has: {\n          embed: function () {\n            return $embed.length > 0;\n          },\n          placeholder: function () {\n            return settings.placeholder || $module.data(metadata.placeholder);\n          }\n        },\n        should: {\n          autoplay: function () {\n            return settings.autoplay === 'auto' ? settings.placeholder || $module.data(metadata.placeholder) !== undefined : settings.autoplay;\n          }\n        },\n        is: {\n          video: function () {\n            return module.get.type() == 'video';\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.embed.settings = {\n    name: 'Embed',\n    namespace: 'embed',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    icon: false,\n    source: false,\n    url: false,\n    id: false,\n    // standard video settings\n    autoplay: 'auto',\n    color: '#444444',\n    hd: true,\n    brandedUI: false,\n    // additional parameters to include with the embed\n    parameters: false,\n    onDisplay: function () {},\n    onPlaceholderDisplay: function () {},\n    onReset: function () {},\n    onCreate: function (url) {},\n    onEmbed: function (parameters) {\n      return parameters;\n    },\n    metadata: {\n      id: 'id',\n      icon: 'icon',\n      placeholder: 'placeholder',\n      source: 'source',\n      url: 'url'\n    },\n    error: {\n      noURL: 'No URL specified',\n      method: 'The method you called is not defined'\n    },\n    className: {\n      active: 'active',\n      embed: 'embed'\n    },\n    selector: {\n      embed: '.embed',\n      placeholder: '.placeholder',\n      icon: '.icon'\n    },\n    sources: {\n      youtube: {\n        name: 'youtube',\n        type: 'video',\n        icon: 'video play',\n        domain: 'youtube.com',\n        url: '//www.youtube.com/embed/{id}',\n        parameters: function (settings) {\n          return {\n            autohide: !settings.brandedUI,\n            autoplay: settings.autoplay,\n            color: settings.color || undefined,\n            hq: settings.hd,\n            jsapi: settings.api,\n            modestbranding: !settings.brandedUI\n          };\n        }\n      },\n      vimeo: {\n        name: 'vimeo',\n        type: 'video',\n        icon: 'video play',\n        domain: 'vimeo.com',\n        url: '//player.vimeo.com/video/{id}',\n        parameters: function (settings) {\n          return {\n            api: settings.api,\n            autoplay: settings.autoplay,\n            byline: settings.brandedUI,\n            color: settings.color || undefined,\n            portrait: settings.brandedUI,\n            title: settings.brandedUI\n          };\n        }\n      }\n    },\n    templates: {\n      iframe: function (url, parameters) {\n        var src = url;\n\n        if (parameters) {\n          src += '?' + parameters;\n        }\n\n        return '' + '<iframe src=\"' + src + '\"' + ' width=\"100%\" height=\"100%\"' + ' frameborder=\"0\" scrolling=\"no\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';\n      },\n      placeholder: function (image, icon) {\n        var html = '';\n\n        if (icon) {\n          html += '<i class=\"' + icon + ' icon\"></i>';\n        }\n\n        if (image) {\n          html += '<img class=\"placeholder\" src=\"' + image + '\">';\n        }\n\n        return html;\n      }\n    },\n    // NOT YET IMPLEMENTED\n    api: false,\n    onPause: function () {},\n    onPlay: function () {},\n    onStop: function () {}\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Modal\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.modal = function (parameters) {\n    var $allModules = $(this),\n        $window = $(window),\n        $document = $(document),\n        $body = $('body'),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings),\n          selector = settings.selector,\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $close = $module.find(selector.close),\n          $allModals,\n          $otherModals,\n          $focusedElement,\n          $dimmable,\n          $dimmer,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          ignoreRepeatedEvents = false,\n          elementEventNamespace,\n          id,\n          observer,\n          module;\n      module = {\n        initialize: function () {\n          module.verbose('Initializing dimmer', $context);\n          module.create.id();\n          module.create.dimmer();\n          module.refreshModals();\n          module.bind.events();\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of modal');\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        create: {\n          dimmer: function () {\n            var defaultSettings = {\n              debug: settings.debug,\n              variation: settings.centered ? false : 'top aligned',\n              dimmerName: 'modals'\n            },\n                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);\n\n            if ($.fn.dimmer === undefined) {\n              module.error(error.dimmer);\n              return;\n            }\n\n            module.debug('Creating dimmer');\n            $dimmable = $context.dimmer(dimmerSettings);\n\n            if (settings.detachable) {\n              module.verbose('Modal is detachable, moving content into dimmer');\n              $dimmable.dimmer('add content', $module);\n            } else {\n              module.set.undetached();\n            }\n\n            $dimmer = $dimmable.dimmer('get dimmer');\n          },\n          id: function () {\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementEventNamespace = '.' + id;\n            module.verbose('Creating unique id for element', id);\n          }\n        },\n        destroy: function () {\n          module.verbose('Destroying previous modal');\n          $module.removeData(moduleNamespace).off(eventNamespace);\n          $window.off(elementEventNamespace);\n          $dimmer.off(elementEventNamespace);\n          $close.off(eventNamespace);\n          $context.dimmer('destroy');\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            observer = new MutationObserver(function (mutations) {\n              module.debug('DOM tree modified, refreshing');\n              module.refresh();\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        refresh: function () {\n          module.remove.scrolling();\n          module.cacheSizes();\n\n          if (!module.can.useFlex()) {\n            module.set.modalOffset();\n          }\n\n          module.set.screenHeight();\n          module.set.type();\n        },\n        refreshModals: function () {\n          $otherModals = $module.siblings(selector.modal);\n          $allModals = $otherModals.add($module);\n        },\n        attachEvents: function (selector, event) {\n          var $toggle = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($toggle.length > 0) {\n            module.debug('Attaching modal events to element', selector, event);\n            $toggle.off(eventNamespace).on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound, selector);\n          }\n        },\n        bind: {\n          events: function () {\n            module.verbose('Attaching events');\n            $module.on('click' + eventNamespace, selector.close, module.event.close).on('click' + eventNamespace, selector.approve, module.event.approve).on('click' + eventNamespace, selector.deny, module.event.deny);\n            $window.on('resize' + elementEventNamespace, module.event.resize);\n          },\n          scrollLock: function () {\n            // touch events default to passive, due to changes in chrome to optimize mobile perf\n            $dimmable.get(0).addEventListener('touchmove', module.event.preventScroll, {\n              passive: false\n            });\n          }\n        },\n        unbind: {\n          scrollLock: function () {\n            $dimmable.get(0).removeEventListener('touchmove', module.event.preventScroll, {\n              passive: false\n            });\n          }\n        },\n        get: {\n          id: function () {\n            return (Math.random().toString(16) + '000000000').substr(2, 8);\n          }\n        },\n        event: {\n          approve: function () {\n            if (ignoreRepeatedEvents || settings.onApprove.call(element, $(this)) === false) {\n              module.verbose('Approve callback returned false cancelling hide');\n              return;\n            }\n\n            ignoreRepeatedEvents = true;\n            module.hide(function () {\n              ignoreRepeatedEvents = false;\n            });\n          },\n          preventScroll: function (event) {\n            event.preventDefault();\n          },\n          deny: function () {\n            if (ignoreRepeatedEvents || settings.onDeny.call(element, $(this)) === false) {\n              module.verbose('Deny callback returned false cancelling hide');\n              return;\n            }\n\n            ignoreRepeatedEvents = true;\n            module.hide(function () {\n              ignoreRepeatedEvents = false;\n            });\n          },\n          close: function () {\n            module.hide();\n          },\n          click: function (event) {\n            if (!settings.closable) {\n              module.verbose('Dimmer clicked but closable setting is disabled');\n              return;\n            }\n\n            var $target = $(event.target),\n                isInModal = $target.closest(selector.modal).length > 0,\n                isInDOM = $.contains(document.documentElement, event.target);\n\n            if (!isInModal && isInDOM && module.is.active()) {\n              module.debug('Dimmer clicked, hiding all modals');\n              module.remove.clickaway();\n\n              if (settings.allowMultiple) {\n                module.hide();\n              } else {\n                module.hideAll();\n              }\n            }\n          },\n          debounce: function (method, delay) {\n            clearTimeout(module.timer);\n            module.timer = setTimeout(method, delay);\n          },\n          keyboard: function (event) {\n            var keyCode = event.which,\n                escapeKey = 27;\n\n            if (keyCode == escapeKey) {\n              if (settings.closable) {\n                module.debug('Escape key pressed hiding modal');\n                module.hide();\n              } else {\n                module.debug('Escape key pressed, but closable is set to false');\n              }\n\n              event.preventDefault();\n            }\n          },\n          resize: function () {\n            if ($dimmable.dimmer('is active') && (module.is.animating() || module.is.active())) {\n              requestAnimationFrame(module.refresh);\n            }\n          }\n        },\n        toggle: function () {\n          if (module.is.active() || module.is.animating()) {\n            module.hide();\n          } else {\n            module.show();\n          }\n        },\n        show: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.refreshModals();\n          module.set.dimmerSettings();\n          module.set.dimmerStyles();\n          module.showModal(callback);\n        },\n        hide: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.refreshModals();\n          module.hideModal(callback);\n        },\n        showModal: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.animating() || !module.is.active()) {\n            module.showDimmer();\n            module.cacheSizes();\n\n            if (module.can.useFlex()) {\n              module.remove.legacy();\n            } else {\n              module.set.legacy();\n              module.set.modalOffset();\n              module.debug('Using non-flex legacy modal positioning.');\n            }\n\n            module.set.screenHeight();\n            module.set.type();\n            module.set.clickaway();\n\n            if (!settings.allowMultiple && module.others.active()) {\n              module.hideOthers(module.showModal);\n            } else {\n              if (settings.allowMultiple && settings.detachable) {\n                $module.detach().appendTo($dimmer);\n              }\n\n              settings.onShow.call(element);\n\n              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                module.debug('Showing modal with css animations');\n                $module.transition({\n                  debug: settings.debug,\n                  animation: settings.transition + ' in',\n                  queue: settings.queue,\n                  duration: settings.duration,\n                  useFailSafe: true,\n                  onComplete: function () {\n                    settings.onVisible.apply(element);\n\n                    if (settings.keyboardShortcuts) {\n                      module.add.keyboardShortcuts();\n                    }\n\n                    module.save.focus();\n                    module.set.active();\n\n                    if (settings.autofocus) {\n                      module.set.autofocus();\n                    }\n\n                    callback();\n                  }\n                });\n              } else {\n                module.error(error.noTransition);\n              }\n            }\n          } else {\n            module.debug('Modal is already visible');\n          }\n        },\n        hideModal: function (callback, keepDimmed) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.debug('Hiding modal');\n\n          if (settings.onHide.call(element, $(this)) === false) {\n            module.verbose('Hide callback returned false cancelling hide');\n            return;\n          }\n\n          if (module.is.animating() || module.is.active()) {\n            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n              module.remove.active();\n              $module.transition({\n                debug: settings.debug,\n                animation: settings.transition + ' out',\n                queue: settings.queue,\n                duration: settings.duration,\n                useFailSafe: true,\n                onStart: function () {\n                  if (!module.others.active() && !keepDimmed) {\n                    module.hideDimmer();\n                  }\n\n                  if (settings.keyboardShortcuts) {\n                    module.remove.keyboardShortcuts();\n                  }\n                },\n                onComplete: function () {\n                  settings.onHidden.call(element);\n                  module.remove.dimmerStyles();\n                  module.restore.focus();\n                  callback();\n                }\n              });\n            } else {\n              module.error(error.noTransition);\n            }\n          }\n        },\n        showDimmer: function () {\n          if ($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active')) {\n            module.debug('Showing dimmer');\n            $dimmable.dimmer('show');\n          } else {\n            module.debug('Dimmer already visible');\n          }\n        },\n        hideDimmer: function () {\n          if ($dimmable.dimmer('is animating') || $dimmable.dimmer('is active')) {\n            module.unbind.scrollLock();\n            $dimmable.dimmer('hide', function () {\n              module.remove.clickaway();\n              module.remove.screenHeight();\n            });\n          } else {\n            module.debug('Dimmer is not visible cannot hide');\n            return;\n          }\n        },\n        hideAll: function (callback) {\n          var $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating);\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if ($visibleModals.length > 0) {\n            module.debug('Hiding all visible modals');\n            module.hideDimmer();\n            $visibleModals.modal('hide modal', callback);\n          }\n        },\n        hideOthers: function (callback) {\n          var $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating);\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if ($visibleModals.length > 0) {\n            module.debug('Hiding other modals', $otherModals);\n            $visibleModals.modal('hide modal', callback, true);\n          }\n        },\n        others: {\n          active: function () {\n            return $otherModals.filter('.' + className.active).length > 0;\n          },\n          animating: function () {\n            return $otherModals.filter('.' + className.animating).length > 0;\n          }\n        },\n        add: {\n          keyboardShortcuts: function () {\n            module.verbose('Adding keyboard shortcuts');\n            $document.on('keyup' + eventNamespace, module.event.keyboard);\n          }\n        },\n        save: {\n          focus: function () {\n            var $activeElement = $(document.activeElement),\n                inCurrentModal = $activeElement.closest($module).length > 0;\n\n            if (!inCurrentModal) {\n              $focusedElement = $(document.activeElement).blur();\n            }\n          }\n        },\n        restore: {\n          focus: function () {\n            if ($focusedElement && $focusedElement.length > 0) {\n              $focusedElement.focus();\n            }\n          }\n        },\n        remove: {\n          active: function () {\n            $module.removeClass(className.active);\n          },\n          legacy: function () {\n            $module.removeClass(className.legacy);\n          },\n          clickaway: function () {\n            $dimmer.off('click' + elementEventNamespace);\n          },\n          dimmerStyles: function () {\n            $dimmer.removeClass(className.inverted);\n            $dimmable.removeClass(className.blurring);\n          },\n          bodyStyle: function () {\n            if ($body.attr('style') === '') {\n              module.verbose('Removing style attribute');\n              $body.removeAttr('style');\n            }\n          },\n          screenHeight: function () {\n            module.debug('Removing page height');\n            $body.css('height', '');\n          },\n          keyboardShortcuts: function () {\n            module.verbose('Removing keyboard shortcuts');\n            $document.off('keyup' + eventNamespace);\n          },\n          scrolling: function () {\n            $dimmable.removeClass(className.scrolling);\n            $module.removeClass(className.scrolling);\n          }\n        },\n        cacheSizes: function () {\n          $module.addClass(className.loading);\n          var scrollHeight = $module.prop('scrollHeight'),\n              modalWidth = $module.outerWidth(),\n              modalHeight = $module.outerHeight();\n\n          if (module.cache === undefined || modalHeight !== 0) {\n            module.cache = {\n              pageHeight: $(document).outerHeight(),\n              width: modalWidth,\n              height: modalHeight + settings.offset,\n              scrollHeight: scrollHeight + settings.offset,\n              contextHeight: settings.context == 'body' ? $(window).height() : $dimmable.height()\n            };\n            module.cache.topOffset = -(module.cache.height / 2);\n          }\n\n          $module.removeClass(className.loading);\n          module.debug('Caching modal and container sizes', module.cache);\n        },\n        can: {\n          useFlex: function () {\n            return settings.useFlex == 'auto' ? settings.detachable && !module.is.ie() : settings.useFlex;\n          },\n          fit: function () {\n            var contextHeight = module.cache.contextHeight,\n                verticalCenter = module.cache.contextHeight / 2,\n                topOffset = module.cache.topOffset,\n                scrollHeight = module.cache.scrollHeight,\n                height = module.cache.height,\n                paddingHeight = settings.padding,\n                startPosition = verticalCenter + topOffset;\n            return scrollHeight > height ? startPosition + scrollHeight + paddingHeight < contextHeight : height + paddingHeight * 2 < contextHeight;\n          }\n        },\n        is: {\n          active: function () {\n            return $module.hasClass(className.active);\n          },\n          ie: function () {\n            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,\n                isIE = 'ActiveXObject' in window;\n            return isIE11 || isIE;\n          },\n          animating: function () {\n            return $module.transition('is supported') ? $module.transition('is animating') : $module.is(':visible');\n          },\n          scrolling: function () {\n            return $dimmable.hasClass(className.scrolling);\n          },\n          modernBrowser: function () {\n            // appName for IE11 reports 'Netscape' can no longer use\n            return !(window.ActiveXObject || 'ActiveXObject' in window);\n          }\n        },\n        set: {\n          autofocus: function () {\n            var $inputs = $module.find('[tabindex], :input').filter(':visible'),\n                $autofocus = $inputs.filter('[autofocus]'),\n                $input = $autofocus.length > 0 ? $autofocus.first() : $inputs.first();\n\n            if ($input.length > 0) {\n              $input.focus();\n            }\n          },\n          clickaway: function () {\n            $dimmer.on('click' + elementEventNamespace, module.event.click);\n          },\n          dimmerSettings: function () {\n            if ($.fn.dimmer === undefined) {\n              module.error(error.dimmer);\n              return;\n            }\n\n            var defaultSettings = {\n              debug: settings.debug,\n              dimmerName: 'modals',\n              closable: 'auto',\n              useFlex: module.can.useFlex(),\n              variation: settings.centered ? false : 'top aligned',\n              duration: {\n                show: settings.duration,\n                hide: settings.duration\n              }\n            },\n                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);\n\n            if (settings.inverted) {\n              dimmerSettings.variation = dimmerSettings.variation !== undefined ? dimmerSettings.variation + ' inverted' : 'inverted';\n            }\n\n            $context.dimmer('setting', dimmerSettings);\n          },\n          dimmerStyles: function () {\n            if (settings.inverted) {\n              $dimmer.addClass(className.inverted);\n            } else {\n              $dimmer.removeClass(className.inverted);\n            }\n\n            if (settings.blurring) {\n              $dimmable.addClass(className.blurring);\n            } else {\n              $dimmable.removeClass(className.blurring);\n            }\n          },\n          modalOffset: function () {\n            var width = module.cache.width,\n                height = module.cache.height;\n            $module.css({\n              marginTop: settings.centered && module.can.fit() ? -(height / 2) : 0,\n              marginLeft: -(width / 2)\n            });\n            module.verbose('Setting modal offset for legacy mode');\n          },\n          screenHeight: function () {\n            if (module.can.fit()) {\n              $body.css('height', '');\n            } else {\n              module.debug('Modal is taller than page content, resizing page height');\n              $body.css('height', module.cache.height + settings.padding * 2);\n            }\n          },\n          active: function () {\n            $module.addClass(className.active);\n          },\n          scrolling: function () {\n            $dimmable.addClass(className.scrolling);\n            $module.addClass(className.scrolling);\n            module.unbind.scrollLock();\n          },\n          legacy: function () {\n            $module.addClass(className.legacy);\n          },\n          type: function () {\n            if (module.can.fit()) {\n              module.verbose('Modal fits on screen');\n\n              if (!module.others.active() && !module.others.animating()) {\n                module.remove.scrolling();\n                module.bind.scrollLock();\n              }\n            } else {\n              module.verbose('Modal cannot fit on screen setting to scrolling');\n              module.set.scrolling();\n            }\n          },\n          undetached: function () {\n            $dimmable.addClass(className.undetached);\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.modal.settings = {\n    name: 'Modal',\n    namespace: 'modal',\n    useFlex: 'auto',\n    offset: 0,\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    observeChanges: false,\n    allowMultiple: false,\n    detachable: true,\n    closable: true,\n    autofocus: true,\n    inverted: false,\n    blurring: false,\n    centered: true,\n    dimmerSettings: {\n      closable: false,\n      useCSS: true\n    },\n    // whether to use keyboard shortcuts\n    keyboardShortcuts: true,\n    context: 'body',\n    queue: false,\n    duration: 500,\n    transition: 'scale',\n    // padding with edge of page\n    padding: 50,\n    // called before show animation\n    onShow: function () {},\n    // called after show animation\n    onVisible: function () {},\n    // called before hide animation\n    onHide: function () {\n      return true;\n    },\n    // called after hide animation\n    onHidden: function () {},\n    // called after approve selector match\n    onApprove: function () {\n      return true;\n    },\n    // called after deny selector match\n    onDeny: function () {\n      return true;\n    },\n    selector: {\n      close: '> .close',\n      approve: '.actions .positive, .actions .approve, .actions .ok',\n      deny: '.actions .negative, .actions .deny, .actions .cancel',\n      modal: '.ui.modal'\n    },\n    error: {\n      dimmer: 'UI Dimmer, a required component is not included in this page',\n      method: 'The method you called is not defined.',\n      notFound: 'The element you specified could not be found'\n    },\n    className: {\n      active: 'active',\n      animating: 'animating',\n      blurring: 'blurring',\n      inverted: 'inverted',\n      legacy: 'legacy',\n      loading: 'loading',\n      scrolling: 'scrolling',\n      undetached: 'undetached'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Nag\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.nag = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.nag.settings, parameters) : $.extend({}, $.fn.nag.settings),\n          className = settings.className,\n          selector = settings.selector,\n          error = settings.error,\n          namespace = settings.namespace,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          $close = $module.find(selector.close),\n          $context = settings.context ? $(settings.context) : $('body'),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          moduleOffset,\n          moduleHeight,\n          contextWidth,\n          contextHeight,\n          contextOffset,\n          yOffset,\n          yPosition,\n          timer,\n          module,\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      };\n\n      module = {\n        initialize: function () {\n          module.verbose('Initializing element');\n          $module.on('click' + eventNamespace, selector.close, module.dismiss).data(moduleNamespace, module);\n\n          if (settings.detachable && $module.parent()[0] !== $context[0]) {\n            $module.detach().prependTo($context);\n          }\n\n          if (settings.displayTime > 0) {\n            setTimeout(module.hide, settings.displayTime);\n          }\n\n          module.show();\n        },\n        destroy: function () {\n          module.verbose('Destroying instance');\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        show: function () {\n          if (module.should.show() && !$module.is(':visible')) {\n            module.debug('Showing nag', settings.animation.show);\n\n            if (settings.animation.show == 'fade') {\n              $module.fadeIn(settings.duration, settings.easing);\n            } else {\n              $module.slideDown(settings.duration, settings.easing);\n            }\n          }\n        },\n        hide: function () {\n          module.debug('Showing nag', settings.animation.hide);\n\n          if (settings.animation.show == 'fade') {\n            $module.fadeIn(settings.duration, settings.easing);\n          } else {\n            $module.slideUp(settings.duration, settings.easing);\n          }\n        },\n        onHide: function () {\n          module.debug('Removing nag', settings.animation.hide);\n          $module.remove();\n\n          if (settings.onHide) {\n            settings.onHide();\n          }\n        },\n        dismiss: function (event) {\n          if (settings.storageMethod) {\n            module.storage.set(settings.key, settings.value);\n          }\n\n          module.hide();\n          event.stopImmediatePropagation();\n          event.preventDefault();\n        },\n        should: {\n          show: function () {\n            if (settings.persist) {\n              module.debug('Persistent nag is set, can show nag');\n              return true;\n            }\n\n            if (module.storage.get(settings.key) != settings.value.toString()) {\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\n              return true;\n            }\n\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\n            return false;\n          }\n        },\n        get: {\n          storageOptions: function () {\n            var options = {};\n\n            if (settings.expires) {\n              options.expires = settings.expires;\n            }\n\n            if (settings.domain) {\n              options.domain = settings.domain;\n            }\n\n            if (settings.path) {\n              options.path = settings.path;\n            }\n\n            return options;\n          }\n        },\n        clear: function () {\n          module.storage.remove(settings.key);\n        },\n        storage: {\n          set: function (key, value) {\n            var options = module.get.storageOptions();\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              window.localStorage.setItem(key, value);\n              module.debug('Value stored using local storage', key, value);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              window.sessionStorage.setItem(key, value);\n              module.debug('Value stored using session storage', key, value);\n            } else if ($.cookie !== undefined) {\n              $.cookie(key, value, options);\n              module.debug('Value stored using cookie', key, value, options);\n            } else {\n              module.error(error.noCookieStorage);\n              return;\n            }\n          },\n          get: function (key, value) {\n            var storedValue;\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              storedValue = window.localStorage.getItem(key);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              storedValue = window.sessionStorage.getItem(key);\n            } // get by cookie\n            else if ($.cookie !== undefined) {\n                storedValue = $.cookie(key);\n              } else {\n                module.error(error.noCookieStorage);\n              }\n\n            if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n              storedValue = undefined;\n            }\n\n            return storedValue;\n          },\n          remove: function (key) {\n            var options = module.get.storageOptions();\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              window.localStorage.removeItem(key);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              window.sessionStorage.removeItem(key);\n            } // store by cookie\n            else if ($.cookie !== undefined) {\n                $.removeCookie(key, options);\n              } else {\n                module.error(error.noStorage);\n              }\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.nag.settings = {\n    name: 'Nag',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    namespace: 'Nag',\n    // allows cookie to be overridden\n    persist: false,\n    // set to zero to require manually dismissal, otherwise hides on its own\n    displayTime: 0,\n    animation: {\n      show: 'slide',\n      hide: 'slide'\n    },\n    context: false,\n    detachable: false,\n    expires: 30,\n    domain: false,\n    path: '/',\n    // type of storage to use\n    storageMethod: 'cookie',\n    // value to store in dismissed localstorage/cookie\n    key: 'nag',\n    value: 'dismiss',\n    error: {\n      noCookieStorage: '$.cookie is not included. A storage solution is required.',\n      noStorage: 'Neither $.cookie or store is defined. A storage solution is required for storing state',\n      method: 'The method you called is not defined.'\n    },\n    className: {\n      bottom: 'bottom',\n      fixed: 'fixed'\n    },\n    selector: {\n      close: '.close.icon'\n    },\n    speed: 500,\n    easing: 'easeOutQuad',\n    onHide: function () {}\n  }; // Adds easing\n\n  $.extend($.easing, {\n    easeOutQuad: function (x, t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    }\n  });\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Popup\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.popup = function (parameters) {\n    var $allModules = $(this),\n        $document = $(document),\n        $window = $(window),\n        $body = $('body'),\n        moduleSelector = $allModules.selector || '',\n        hasTouch = true,\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.popup.settings, parameters) : $.extend({}, $.fn.popup.settings),\n          selector = settings.selector,\n          className = settings.className,\n          error = settings.error,\n          metadata = settings.metadata,\n          namespace = settings.namespace,\n          eventNamespace = '.' + settings.namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $scrollContext = $(settings.scrollContext),\n          $boundary = $(settings.boundary),\n          $target = settings.target ? $(settings.target) : $module,\n          $popup,\n          $offsetParent,\n          searchDepth = 0,\n          triedPositions = false,\n          openedWithTouch = false,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          documentObserver,\n          elementNamespace,\n          id,\n          module;\n      module = {\n        // binds events\n        initialize: function () {\n          module.debug('Initializing', $module);\n          module.createID();\n          module.bind.events();\n\n          if (!module.exists() && settings.preserve) {\n            module.create();\n          }\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            documentObserver = new MutationObserver(module.event.documentChanged);\n            documentObserver.observe(document, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', documentObserver);\n          }\n        },\n        refresh: function () {\n          if (settings.popup) {\n            $popup = $(settings.popup).eq(0);\n          } else {\n            if (settings.inline) {\n              $popup = $target.nextAll(selector.popup).eq(0);\n              settings.popup = $popup;\n            }\n          }\n\n          if (settings.popup) {\n            $popup.addClass(className.loading);\n            $offsetParent = module.get.offsetParent();\n            $popup.removeClass(className.loading);\n\n            if (settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {\n              module.debug('Moving popup to the same offset parent as target');\n              $popup.detach().appendTo($offsetParent);\n            }\n          } else {\n            $offsetParent = settings.inline ? module.get.offsetParent($target) : module.has.popup() ? module.get.offsetParent($popup) : $body;\n          }\n\n          if ($offsetParent.is('html') && $offsetParent[0] !== $body[0]) {\n            module.debug('Setting page as offset parent');\n            $offsetParent = $body;\n          }\n\n          if (module.get.variation()) {\n            module.set.variation();\n          }\n        },\n        reposition: function () {\n          module.refresh();\n          module.set.position();\n        },\n        destroy: function () {\n          module.debug('Destroying previous module');\n\n          if (documentObserver) {\n            documentObserver.disconnect();\n          } // remove element only if was created dynamically\n\n\n          if ($popup && !settings.preserve) {\n            module.removePopup();\n          } // clear all timeouts\n\n\n          clearTimeout(module.hideTimer);\n          clearTimeout(module.showTimer); // remove events\n\n          module.unbind.close();\n          module.unbind.events();\n          $module.removeData(moduleNamespace);\n        },\n        event: {\n          start: function (event) {\n            var delay = $.isPlainObject(settings.delay) ? settings.delay.show : settings.delay;\n            clearTimeout(module.hideTimer);\n\n            if (!openedWithTouch) {\n              module.showTimer = setTimeout(module.show, delay);\n            }\n          },\n          end: function () {\n            var delay = $.isPlainObject(settings.delay) ? settings.delay.hide : settings.delay;\n            clearTimeout(module.showTimer);\n            module.hideTimer = setTimeout(module.hide, delay);\n          },\n          touchstart: function (event) {\n            openedWithTouch = true;\n            module.show();\n          },\n          resize: function () {\n            if (module.is.visible()) {\n              module.set.position();\n            }\n          },\n          documentChanged: function (mutations) {\n            [].forEach.call(mutations, function (mutation) {\n              if (mutation.removedNodes) {\n                [].forEach.call(mutation.removedNodes, function (node) {\n                  if (node == element || $(node).find(element).length > 0) {\n                    module.debug('Element removed from DOM, tearing down events');\n                    module.destroy();\n                  }\n                });\n              }\n            });\n          },\n          hideGracefully: function (event) {\n            var $target = $(event.target),\n                isInDOM = $.contains(document.documentElement, event.target),\n                inPopup = $target.closest(selector.popup).length > 0; // don't close on clicks inside popup\n\n            if (event && !inPopup && isInDOM) {\n              module.debug('Click occurred outside popup hiding popup');\n              module.hide();\n            } else {\n              module.debug('Click was inside popup, keeping popup open');\n            }\n          }\n        },\n        // generates popup html from metadata\n        create: function () {\n          var html = module.get.html(),\n              title = module.get.title(),\n              content = module.get.content();\n\n          if (html || content || title) {\n            module.debug('Creating pop-up html');\n\n            if (!html) {\n              html = settings.templates.popup({\n                title: title,\n                content: content\n              });\n            }\n\n            $popup = $('<div/>').addClass(className.popup).data(metadata.activator, $module).html(html);\n\n            if (settings.inline) {\n              module.verbose('Inserting popup element inline', $popup);\n              $popup.insertAfter($module);\n            } else {\n              module.verbose('Appending popup element to body', $popup);\n              $popup.appendTo($context);\n            }\n\n            module.refresh();\n            module.set.variation();\n\n            if (settings.hoverable) {\n              module.bind.popup();\n            }\n\n            settings.onCreate.call($popup, element);\n          } else if ($target.next(selector.popup).length !== 0) {\n            module.verbose('Pre-existing popup found');\n            settings.inline = true;\n            settings.popup = $target.next(selector.popup).data(metadata.activator, $module);\n            module.refresh();\n\n            if (settings.hoverable) {\n              module.bind.popup();\n            }\n          } else if (settings.popup) {\n            $(settings.popup).data(metadata.activator, $module);\n            module.verbose('Used popup specified in settings');\n            module.refresh();\n\n            if (settings.hoverable) {\n              module.bind.popup();\n            }\n          } else {\n            module.debug('No content specified skipping display', element);\n          }\n        },\n        createID: function () {\n          id = (Math.random().toString(16) + '000000000').substr(2, 8);\n          elementNamespace = '.' + id;\n          module.verbose('Creating unique id for element', id);\n        },\n        // determines popup state\n        toggle: function () {\n          module.debug('Toggling pop-up');\n\n          if (module.is.hidden()) {\n            module.debug('Popup is hidden, showing pop-up');\n            module.unbind.close();\n            module.show();\n          } else {\n            module.debug('Popup is visible, hiding pop-up');\n            module.hide();\n          }\n        },\n        show: function (callback) {\n          callback = callback || function () {};\n\n          module.debug('Showing pop-up', settings.transition);\n\n          if (module.is.hidden() && !(module.is.active() && module.is.dropdown())) {\n            if (!module.exists()) {\n              module.create();\n            }\n\n            if (settings.onShow.call($popup, element) === false) {\n              module.debug('onShow callback returned false, cancelling popup animation');\n              return;\n            } else if (!settings.preserve && !settings.popup) {\n              module.refresh();\n            }\n\n            if ($popup && module.set.position()) {\n              module.save.conditions();\n\n              if (settings.exclusive) {\n                module.hideAll();\n              }\n\n              module.animate.show(callback);\n            }\n          }\n        },\n        hide: function (callback) {\n          callback = callback || function () {};\n\n          if (module.is.visible() || module.is.animating()) {\n            if (settings.onHide.call($popup, element) === false) {\n              module.debug('onHide callback returned false, cancelling popup animation');\n              return;\n            }\n\n            module.remove.visible();\n            module.unbind.close();\n            module.restore.conditions();\n            module.animate.hide(callback);\n          }\n        },\n        hideAll: function () {\n          $(selector.popup).filter('.' + className.popupVisible).each(function () {\n            $(this).data(metadata.activator).popup('hide');\n          });\n        },\n        exists: function () {\n          if (!$popup) {\n            return false;\n          }\n\n          if (settings.inline || settings.popup) {\n            return module.has.popup();\n          } else {\n            return $popup.closest($context).length >= 1 ? true : false;\n          }\n        },\n        removePopup: function () {\n          if (module.has.popup() && !settings.popup) {\n            module.debug('Removing popup', $popup);\n            $popup.remove();\n            $popup = undefined;\n            settings.onRemove.call($popup, element);\n          }\n        },\n        save: {\n          conditions: function () {\n            module.cache = {\n              title: $module.attr('title')\n            };\n\n            if (module.cache.title) {\n              $module.removeAttr('title');\n            }\n\n            module.verbose('Saving original attributes', module.cache.title);\n          }\n        },\n        restore: {\n          conditions: function () {\n            if (module.cache && module.cache.title) {\n              $module.attr('title', module.cache.title);\n              module.verbose('Restoring original attributes', module.cache.title);\n            }\n\n            return true;\n          }\n        },\n        supports: {\n          svg: function () {\n            return typeof SVGGraphicsElement === 'undefined';\n          }\n        },\n        animate: {\n          show: function (callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n              module.set.visible();\n              $popup.transition({\n                animation: settings.transition + ' in',\n                queue: false,\n                debug: settings.debug,\n                verbose: settings.verbose,\n                duration: settings.duration,\n                onComplete: function () {\n                  module.bind.close();\n                  callback.call($popup, element);\n                  settings.onVisible.call($popup, element);\n                }\n              });\n            } else {\n              module.error(error.noTransition);\n            }\n          },\n          hide: function (callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n            module.debug('Hiding pop-up');\n\n            if (settings.onHide.call($popup, element) === false) {\n              module.debug('onHide callback returned false, cancelling popup animation');\n              return;\n            }\n\n            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n              $popup.transition({\n                animation: settings.transition + ' out',\n                queue: false,\n                duration: settings.duration,\n                debug: settings.debug,\n                verbose: settings.verbose,\n                onComplete: function () {\n                  module.reset();\n                  callback.call($popup, element);\n                  settings.onHidden.call($popup, element);\n                }\n              });\n            } else {\n              module.error(error.noTransition);\n            }\n          }\n        },\n        change: {\n          content: function (html) {\n            $popup.html(html);\n          }\n        },\n        get: {\n          html: function () {\n            $module.removeData(metadata.html);\n            return $module.data(metadata.html) || settings.html;\n          },\n          title: function () {\n            $module.removeData(metadata.title);\n            return $module.data(metadata.title) || settings.title;\n          },\n          content: function () {\n            $module.removeData(metadata.content);\n            return $module.data(metadata.content) || settings.content || $module.attr('title');\n          },\n          variation: function () {\n            $module.removeData(metadata.variation);\n            return $module.data(metadata.variation) || settings.variation;\n          },\n          popup: function () {\n            return $popup;\n          },\n          popupOffset: function () {\n            return $popup.offset();\n          },\n          calculations: function () {\n            var $popupOffsetParent = module.get.offsetParent($popup),\n                targetElement = $target[0],\n                isWindow = $boundary[0] == window,\n                targetPosition = settings.inline || settings.popup && settings.movePopup ? $target.position() : $target.offset(),\n                screenPosition = isWindow ? {\n              top: 0,\n              left: 0\n            } : $boundary.offset(),\n                calculations = {},\n                scroll = isWindow ? {\n              top: $window.scrollTop(),\n              left: $window.scrollLeft()\n            } : {\n              top: 0,\n              left: 0\n            },\n                screen;\n            calculations = {\n              // element which is launching popup\n              target: {\n                element: $target[0],\n                width: $target.outerWidth(),\n                height: $target.outerHeight(),\n                top: targetPosition.top,\n                left: targetPosition.left,\n                margin: {}\n              },\n              // popup itself\n              popup: {\n                width: $popup.outerWidth(),\n                height: $popup.outerHeight()\n              },\n              // offset container (or 3d context)\n              parent: {\n                width: $offsetParent.outerWidth(),\n                height: $offsetParent.outerHeight()\n              },\n              // screen boundaries\n              screen: {\n                top: screenPosition.top,\n                left: screenPosition.left,\n                scroll: {\n                  top: scroll.top,\n                  left: scroll.left\n                },\n                width: $boundary.width(),\n                height: $boundary.height()\n              }\n            }; // if popup offset context is not same as target, then adjust calculations\n\n            if ($popupOffsetParent.get(0) !== $offsetParent.get(0)) {\n              var popupOffset = $popupOffsetParent.offset();\n              calculations.target.top -= popupOffset.top;\n              calculations.target.left -= popupOffset.left;\n              calculations.parent.width = $popupOffsetParent.outerWidth();\n              calculations.parent.height = $popupOffsetParent.outerHeight();\n            } // add in container calcs if fluid\n\n\n            if (settings.setFluidWidth && module.is.fluid()) {\n              calculations.container = {\n                width: $popup.parent().outerWidth()\n              };\n              calculations.popup.width = calculations.container.width;\n            } // add in margins if inline\n\n\n            calculations.target.margin.top = settings.inline ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10) : 0;\n            calculations.target.margin.left = settings.inline ? module.is.rtl() ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10) : parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-left'), 10) : 0; // calculate screen boundaries\n\n            screen = calculations.screen;\n            calculations.boundary = {\n              top: screen.top + screen.scroll.top,\n              bottom: screen.top + screen.scroll.top + screen.height,\n              left: screen.left + screen.scroll.left,\n              right: screen.left + screen.scroll.left + screen.width\n            };\n            return calculations;\n          },\n          id: function () {\n            return id;\n          },\n          startEvent: function () {\n            if (settings.on == 'hover') {\n              return 'mouseenter';\n            } else if (settings.on == 'focus') {\n              return 'focus';\n            }\n\n            return false;\n          },\n          scrollEvent: function () {\n            return 'scroll';\n          },\n          endEvent: function () {\n            if (settings.on == 'hover') {\n              return 'mouseleave';\n            } else if (settings.on == 'focus') {\n              return 'blur';\n            }\n\n            return false;\n          },\n          distanceFromBoundary: function (offset, calculations) {\n            var distanceFromBoundary = {},\n                popup,\n                boundary;\n            calculations = calculations || module.get.calculations(); // shorthand\n\n            popup = calculations.popup;\n            boundary = calculations.boundary;\n\n            if (offset) {\n              distanceFromBoundary = {\n                top: offset.top - boundary.top,\n                left: offset.left - boundary.left,\n                right: boundary.right - (offset.left + popup.width),\n                bottom: boundary.bottom - (offset.top + popup.height)\n              };\n              module.verbose('Distance from boundaries determined', offset, distanceFromBoundary);\n            }\n\n            return distanceFromBoundary;\n          },\n          offsetParent: function ($element) {\n            var element = $element !== undefined ? $element[0] : $target[0],\n                parentNode = element.parentNode,\n                $node = $(parentNode);\n\n            if (parentNode) {\n              var is2D = $node.css('transform') === 'none',\n                  isStatic = $node.css('position') === 'static',\n                  isBody = $node.is('body');\n\n              while (parentNode && !isBody && isStatic && is2D) {\n                parentNode = parentNode.parentNode;\n                $node = $(parentNode);\n                is2D = $node.css('transform') === 'none';\n                isStatic = $node.css('position') === 'static';\n                isBody = $node.is('body');\n              }\n            }\n\n            return $node && $node.length > 0 ? $node : $();\n          },\n          positions: function () {\n            return {\n              'top left': false,\n              'top center': false,\n              'top right': false,\n              'bottom left': false,\n              'bottom center': false,\n              'bottom right': false,\n              'left center': false,\n              'right center': false\n            };\n          },\n          nextPosition: function (position) {\n            var positions = position.split(' '),\n                verticalPosition = positions[0],\n                horizontalPosition = positions[1],\n                opposite = {\n              top: 'bottom',\n              bottom: 'top',\n              left: 'right',\n              right: 'left'\n            },\n                adjacent = {\n              left: 'center',\n              center: 'right',\n              right: 'left'\n            },\n                backup = {\n              'top left': 'top center',\n              'top center': 'top right',\n              'top right': 'right center',\n              'right center': 'bottom right',\n              'bottom right': 'bottom center',\n              'bottom center': 'bottom left',\n              'bottom left': 'left center',\n              'left center': 'top left'\n            },\n                adjacentsAvailable = verticalPosition == 'top' || verticalPosition == 'bottom',\n                oppositeTried = false,\n                adjacentTried = false,\n                nextPosition = false;\n\n            if (!triedPositions) {\n              module.verbose('All available positions available');\n              triedPositions = module.get.positions();\n            }\n\n            module.debug('Recording last position tried', position);\n            triedPositions[position] = true;\n\n            if (settings.prefer === 'opposite') {\n              nextPosition = [opposite[verticalPosition], horizontalPosition];\n              nextPosition = nextPosition.join(' ');\n              oppositeTried = triedPositions[nextPosition] === true;\n              module.debug('Trying opposite strategy', nextPosition);\n            }\n\n            if (settings.prefer === 'adjacent' && adjacentsAvailable) {\n              nextPosition = [verticalPosition, adjacent[horizontalPosition]];\n              nextPosition = nextPosition.join(' ');\n              adjacentTried = triedPositions[nextPosition] === true;\n              module.debug('Trying adjacent strategy', nextPosition);\n            }\n\n            if (adjacentTried || oppositeTried) {\n              module.debug('Using backup position', nextPosition);\n              nextPosition = backup[position];\n            }\n\n            return nextPosition;\n          }\n        },\n        set: {\n          position: function (position, calculations) {\n            // exit conditions\n            if ($target.length === 0 || $popup.length === 0) {\n              module.error(error.notFound);\n              return;\n            }\n\n            var offset, distanceAway, target, popup, parent, positioning, popupOffset, distanceFromBoundary;\n            calculations = calculations || module.get.calculations();\n            position = position || $module.data(metadata.position) || settings.position;\n            offset = $module.data(metadata.offset) || settings.offset;\n            distanceAway = settings.distanceAway; // shorthand\n\n            target = calculations.target;\n            popup = calculations.popup;\n            parent = calculations.parent;\n\n            if (module.should.centerArrow(calculations)) {\n              module.verbose('Adjusting offset to center arrow on small target element');\n\n              if (position == 'top left' || position == 'bottom left') {\n                offset += target.width / 2;\n                offset -= settings.arrowPixelsFromEdge;\n              }\n\n              if (position == 'top right' || position == 'bottom right') {\n                offset -= target.width / 2;\n                offset += settings.arrowPixelsFromEdge;\n              }\n            }\n\n            if (target.width === 0 && target.height === 0 && !module.is.svg(target.element)) {\n              module.debug('Popup target is hidden, no action taken');\n              return false;\n            }\n\n            if (settings.inline) {\n              module.debug('Adding margin to calculation', target.margin);\n\n              if (position == 'left center' || position == 'right center') {\n                offset += target.margin.top;\n                distanceAway += -target.margin.left;\n              } else if (position == 'top left' || position == 'top center' || position == 'top right') {\n                offset += target.margin.left;\n                distanceAway -= target.margin.top;\n              } else {\n                offset += target.margin.left;\n                distanceAway += target.margin.top;\n              }\n            }\n\n            module.debug('Determining popup position from calculations', position, calculations);\n\n            if (module.is.rtl()) {\n              position = position.replace(/left|right/g, function (match) {\n                return match == 'left' ? 'right' : 'left';\n              });\n              module.debug('RTL: Popup position updated', position);\n            } // if last attempt use specified last resort position\n\n\n            if (searchDepth == settings.maxSearchDepth && typeof settings.lastResort === 'string') {\n              position = settings.lastResort;\n            }\n\n            switch (position) {\n              case 'top left':\n                positioning = {\n                  top: 'auto',\n                  bottom: parent.height - target.top + distanceAway,\n                  left: target.left + offset,\n                  right: 'auto'\n                };\n                break;\n\n              case 'top center':\n                positioning = {\n                  bottom: parent.height - target.top + distanceAway,\n                  left: target.left + target.width / 2 - popup.width / 2 + offset,\n                  top: 'auto',\n                  right: 'auto'\n                };\n                break;\n\n              case 'top right':\n                positioning = {\n                  bottom: parent.height - target.top + distanceAway,\n                  right: parent.width - target.left - target.width - offset,\n                  top: 'auto',\n                  left: 'auto'\n                };\n                break;\n\n              case 'left center':\n                positioning = {\n                  top: target.top + target.height / 2 - popup.height / 2 + offset,\n                  right: parent.width - target.left + distanceAway,\n                  left: 'auto',\n                  bottom: 'auto'\n                };\n                break;\n\n              case 'right center':\n                positioning = {\n                  top: target.top + target.height / 2 - popup.height / 2 + offset,\n                  left: target.left + target.width + distanceAway,\n                  bottom: 'auto',\n                  right: 'auto'\n                };\n                break;\n\n              case 'bottom left':\n                positioning = {\n                  top: target.top + target.height + distanceAway,\n                  left: target.left + offset,\n                  bottom: 'auto',\n                  right: 'auto'\n                };\n                break;\n\n              case 'bottom center':\n                positioning = {\n                  top: target.top + target.height + distanceAway,\n                  left: target.left + target.width / 2 - popup.width / 2 + offset,\n                  bottom: 'auto',\n                  right: 'auto'\n                };\n                break;\n\n              case 'bottom right':\n                positioning = {\n                  top: target.top + target.height + distanceAway,\n                  right: parent.width - target.left - target.width - offset,\n                  left: 'auto',\n                  bottom: 'auto'\n                };\n                break;\n            }\n\n            if (positioning === undefined) {\n              module.error(error.invalidPosition, position);\n            }\n\n            module.debug('Calculated popup positioning values', positioning); // tentatively place on stage\n\n            $popup.css(positioning).removeClass(className.position).addClass(position).addClass(className.loading);\n            popupOffset = module.get.popupOffset(); // see if any boundaries are surpassed with this tentative position\n\n            distanceFromBoundary = module.get.distanceFromBoundary(popupOffset, calculations);\n\n            if (module.is.offstage(distanceFromBoundary, position)) {\n              module.debug('Position is outside viewport', position);\n\n              if (searchDepth < settings.maxSearchDepth) {\n                searchDepth++;\n                position = module.get.nextPosition(position);\n                module.debug('Trying new position', position);\n                return $popup ? module.set.position(position, calculations) : false;\n              } else {\n                if (settings.lastResort) {\n                  module.debug('No position found, showing with last position');\n                } else {\n                  module.debug('Popup could not find a position to display', $popup);\n                  module.error(error.cannotPlace, element);\n                  module.remove.attempts();\n                  module.remove.loading();\n                  module.reset();\n                  settings.onUnplaceable.call($popup, element);\n                  return false;\n                }\n              }\n            }\n\n            module.debug('Position is on stage', position);\n            module.remove.attempts();\n            module.remove.loading();\n\n            if (settings.setFluidWidth && module.is.fluid()) {\n              module.set.fluidWidth(calculations);\n            }\n\n            return true;\n          },\n          fluidWidth: function (calculations) {\n            calculations = calculations || module.get.calculations();\n            module.debug('Automatically setting element width to parent width', calculations.parent.width);\n            $popup.css('width', calculations.container.width);\n          },\n          variation: function (variation) {\n            variation = variation || module.get.variation();\n\n            if (variation && module.has.popup()) {\n              module.verbose('Adding variation to popup', variation);\n              $popup.addClass(variation);\n            }\n          },\n          visible: function () {\n            $module.addClass(className.visible);\n          }\n        },\n        remove: {\n          loading: function () {\n            $popup.removeClass(className.loading);\n          },\n          variation: function (variation) {\n            variation = variation || module.get.variation();\n\n            if (variation) {\n              module.verbose('Removing variation', variation);\n              $popup.removeClass(variation);\n            }\n          },\n          visible: function () {\n            $module.removeClass(className.visible);\n          },\n          attempts: function () {\n            module.verbose('Resetting all searched positions');\n            searchDepth = 0;\n            triedPositions = false;\n          }\n        },\n        bind: {\n          events: function () {\n            module.debug('Binding popup events to module');\n\n            if (settings.on == 'click') {\n              $module.on('click' + eventNamespace, module.toggle);\n            }\n\n            if (settings.on == 'hover' && hasTouch) {\n              $module.on('touchstart' + eventNamespace, module.event.touchstart);\n            }\n\n            if (module.get.startEvent()) {\n              $module.on(module.get.startEvent() + eventNamespace, module.event.start).on(module.get.endEvent() + eventNamespace, module.event.end);\n            }\n\n            if (settings.target) {\n              module.debug('Target set to element', $target);\n            }\n\n            $window.on('resize' + elementNamespace, module.event.resize);\n          },\n          popup: function () {\n            module.verbose('Allowing hover events on popup to prevent closing');\n\n            if ($popup && module.has.popup()) {\n              $popup.on('mouseenter' + eventNamespace, module.event.start).on('mouseleave' + eventNamespace, module.event.end);\n            }\n          },\n          close: function () {\n            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {\n              module.bind.closeOnScroll();\n            }\n\n            if (module.is.closable()) {\n              module.bind.clickaway();\n            } else if (settings.on == 'hover' && openedWithTouch) {\n              module.bind.touchClose();\n            }\n          },\n          closeOnScroll: function () {\n            module.verbose('Binding scroll close event to document');\n            $scrollContext.one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully);\n          },\n          touchClose: function () {\n            module.verbose('Binding popup touchclose event to document');\n            $document.on('touchstart' + elementNamespace, function (event) {\n              module.verbose('Touched away from popup');\n              module.event.hideGracefully.call(element, event);\n            });\n          },\n          clickaway: function () {\n            module.verbose('Binding popup close event to document');\n            $document.on('click' + elementNamespace, function (event) {\n              module.verbose('Clicked away from popup');\n              module.event.hideGracefully.call(element, event);\n            });\n          }\n        },\n        unbind: {\n          events: function () {\n            $window.off(elementNamespace);\n            $module.off(eventNamespace);\n          },\n          close: function () {\n            $document.off(elementNamespace);\n            $scrollContext.off(elementNamespace);\n          }\n        },\n        has: {\n          popup: function () {\n            return $popup && $popup.length > 0;\n          }\n        },\n        should: {\n          centerArrow: function (calculations) {\n            return !module.is.basic() && calculations.target.width <= settings.arrowPixelsFromEdge * 2;\n          }\n        },\n        is: {\n          closable: function () {\n            if (settings.closable == 'auto') {\n              if (settings.on == 'hover') {\n                return false;\n              }\n\n              return true;\n            }\n\n            return settings.closable;\n          },\n          offstage: function (distanceFromBoundary, position) {\n            var offstage = []; // return boundaries that have been surpassed\n\n            $.each(distanceFromBoundary, function (direction, distance) {\n              if (distance < -settings.jitter) {\n                module.debug('Position exceeds allowable distance from edge', direction, distance, position);\n                offstage.push(direction);\n              }\n            });\n\n            if (offstage.length > 0) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          svg: function (element) {\n            return module.supports.svg() && element instanceof SVGGraphicsElement;\n          },\n          basic: function () {\n            return $module.hasClass(className.basic);\n          },\n          active: function () {\n            return $module.hasClass(className.active);\n          },\n          animating: function () {\n            return $popup !== undefined && $popup.hasClass(className.animating);\n          },\n          fluid: function () {\n            return $popup !== undefined && $popup.hasClass(className.fluid);\n          },\n          visible: function () {\n            return $popup !== undefined && $popup.hasClass(className.popupVisible);\n          },\n          dropdown: function () {\n            return $module.hasClass(className.dropdown);\n          },\n          hidden: function () {\n            return !module.is.visible();\n          },\n          rtl: function () {\n            return $module.css('direction') == 'rtl';\n          }\n        },\n        reset: function () {\n          module.remove.visible();\n\n          if (settings.preserve) {\n            if ($.fn.transition !== undefined) {\n              $popup.transition('remove transition');\n            }\n          } else {\n            module.removePopup();\n          }\n        },\n        setting: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.popup.settings = {\n    name: 'Popup',\n    // module settings\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    namespace: 'popup',\n    // whether it should use dom mutation observers\n    observeChanges: true,\n    // callback only when element added to dom\n    onCreate: function () {},\n    // callback before element removed from dom\n    onRemove: function () {},\n    // callback before show animation\n    onShow: function () {},\n    // callback after show animation\n    onVisible: function () {},\n    // callback before hide animation\n    onHide: function () {},\n    // callback when popup cannot be positioned in visible screen\n    onUnplaceable: function () {},\n    // callback after hide animation\n    onHidden: function () {},\n    // when to show popup\n    on: 'hover',\n    // element to use to determine if popup is out of boundary\n    boundary: window,\n    // whether to add touchstart events when using hover\n    addTouchEvents: true,\n    // default position relative to element\n    position: 'top left',\n    // name of variation to use\n    variation: '',\n    // whether popup should be moved to context\n    movePopup: true,\n    // element which popup should be relative to\n    target: false,\n    // jq selector or element that should be used as popup\n    popup: false,\n    // popup should remain inline next to activator\n    inline: false,\n    // popup should be removed from page on hide\n    preserve: false,\n    // popup should not close when being hovered on\n    hoverable: false,\n    // explicitly set content\n    content: false,\n    // explicitly set html\n    html: false,\n    // explicitly set title\n    title: false,\n    // whether automatically close on clickaway when on click\n    closable: true,\n    // automatically hide on scroll\n    hideOnScroll: 'auto',\n    // hide other popups on show\n    exclusive: false,\n    // context to attach popups\n    context: 'body',\n    // context for binding scroll events\n    scrollContext: window,\n    // position to prefer when calculating new position\n    prefer: 'opposite',\n    // specify position to appear even if it doesn't fit\n    lastResort: false,\n    // number of pixels from edge of popup to pointing arrow center (used from centering)\n    arrowPixelsFromEdge: 20,\n    // delay used to prevent accidental refiring of animations due to user error\n    delay: {\n      show: 50,\n      hide: 70\n    },\n    // whether fluid variation should assign width explicitly\n    setFluidWidth: true,\n    // transition settings\n    duration: 200,\n    transition: 'scale',\n    // distance away from activating element in px\n    distanceAway: 0,\n    // number of pixels an element is allowed to be \"offstage\" for a position to be chosen (allows for rounding)\n    jitter: 2,\n    // offset on aligning axis from calculated position\n    offset: 0,\n    // maximum times to look for a position before failing (9 positions total)\n    maxSearchDepth: 15,\n    error: {\n      invalidPosition: 'The position you specified is not a valid position',\n      cannotPlace: 'Popup does not fit within the boundaries of the viewport',\n      method: 'The method you called is not defined.',\n      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',\n      notFound: 'The target or popup you specified does not exist on the page'\n    },\n    metadata: {\n      activator: 'activator',\n      content: 'content',\n      html: 'html',\n      offset: 'offset',\n      position: 'position',\n      title: 'title',\n      variation: 'variation'\n    },\n    className: {\n      active: 'active',\n      basic: 'basic',\n      animating: 'animating',\n      dropdown: 'dropdown',\n      fluid: 'fluid',\n      loading: 'loading',\n      popup: 'ui popup',\n      position: 'top left center bottom right',\n      visible: 'visible',\n      popupVisible: 'visible'\n    },\n    selector: {\n      popup: '.ui.popup'\n    },\n    templates: {\n      escape: function (string) {\n        var badChars = /[&<>\"'`]/g,\n            shouldEscape = /[&<>\"'`]/,\n            escape = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&quot;\",\n          \"'\": \"&#x27;\",\n          \"`\": \"&#x60;\"\n        },\n            escapedChar = function (chr) {\n          return escape[chr];\n        };\n\n        if (shouldEscape.test(string)) {\n          return string.replace(badChars, escapedChar);\n        }\n\n        return string;\n      },\n      popup: function (text) {\n        var html = '',\n            escape = $.fn.popup.settings.templates.escape;\n\n        if (typeof text !== undefined) {\n          if (typeof text.title !== undefined && text.title) {\n            text.title = escape(text.title);\n            html += '<div class=\"header\">' + text.title + '</div>';\n          }\n\n          if (typeof text.content !== undefined && text.content) {\n            text.content = escape(text.content);\n            html += '<div class=\"content\">' + text.content + '</div>';\n          }\n        }\n\n        return html;\n      }\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Progress\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n  var global = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.progress = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.progress.settings, parameters) : $.extend({}, $.fn.progress.settings),\n          className = settings.className,\n          metadata = settings.metadata,\n          namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $bar = $(this).find(selector.bar),\n          $progress = $(this).find(selector.progress),\n          $label = $(this).find(selector.label),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          animating = false,\n          transitionEnd,\n          module;\n      module = {\n        initialize: function () {\n          module.debug('Initializing progress bar', settings);\n          module.set.duration();\n          module.set.transitionEvent();\n          module.read.metadata();\n          module.read.settings();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of progress', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous progress for', $module);\n          clearInterval(instance.interval);\n          module.remove.state();\n          $module.removeData(moduleNamespace);\n          instance = undefined;\n        },\n        reset: function () {\n          module.remove.nextValue();\n          module.update.progress(0);\n        },\n        complete: function () {\n          if (module.percent === undefined || module.percent < 100) {\n            module.remove.progressPoll();\n            module.set.percent(100);\n          }\n        },\n        read: {\n          metadata: function () {\n            var data = {\n              percent: $module.data(metadata.percent),\n              total: $module.data(metadata.total),\n              value: $module.data(metadata.value)\n            };\n\n            if (data.percent) {\n              module.debug('Current percent value set from metadata', data.percent);\n              module.set.percent(data.percent);\n            }\n\n            if (data.total) {\n              module.debug('Total value set from metadata', data.total);\n              module.set.total(data.total);\n            }\n\n            if (data.value) {\n              module.debug('Current value set from metadata', data.value);\n              module.set.value(data.value);\n              module.set.progress(data.value);\n            }\n          },\n          settings: function () {\n            if (settings.total !== false) {\n              module.debug('Current total set in settings', settings.total);\n              module.set.total(settings.total);\n            }\n\n            if (settings.value !== false) {\n              module.debug('Current value set in settings', settings.value);\n              module.set.value(settings.value);\n              module.set.progress(module.value);\n            }\n\n            if (settings.percent !== false) {\n              module.debug('Current percent set in settings', settings.percent);\n              module.set.percent(settings.percent);\n            }\n          }\n        },\n        bind: {\n          transitionEnd: function (callback) {\n            var transitionEnd = module.get.transitionEnd();\n            $bar.one(transitionEnd + eventNamespace, function (event) {\n              clearTimeout(module.failSafeTimer);\n              callback.call(this, event);\n            });\n            module.failSafeTimer = setTimeout(function () {\n              $bar.triggerHandler(transitionEnd);\n            }, settings.duration + settings.failSafeDelay);\n            module.verbose('Adding fail safe timer', module.timer);\n          }\n        },\n        increment: function (incrementValue) {\n          var maxValue, startValue, newValue;\n\n          if (module.has.total()) {\n            startValue = module.get.value();\n            incrementValue = incrementValue || 1;\n            newValue = startValue + incrementValue;\n          } else {\n            startValue = module.get.percent();\n            incrementValue = incrementValue || module.get.randomValue();\n            newValue = startValue + incrementValue;\n            maxValue = 100;\n            module.debug('Incrementing percentage by', startValue, newValue);\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n          module.set.progress(newValue);\n        },\n        decrement: function (decrementValue) {\n          var total = module.get.total(),\n              startValue,\n              newValue;\n\n          if (total) {\n            startValue = module.get.value();\n            decrementValue = decrementValue || 1;\n            newValue = startValue - decrementValue;\n            module.debug('Decrementing value by', decrementValue, startValue);\n          } else {\n            startValue = module.get.percent();\n            decrementValue = decrementValue || module.get.randomValue();\n            newValue = startValue - decrementValue;\n            module.debug('Decrementing percentage by', decrementValue, startValue);\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n          module.set.progress(newValue);\n        },\n        has: {\n          progressPoll: function () {\n            return module.progressPoll;\n          },\n          total: function () {\n            return module.get.total() !== false;\n          }\n        },\n        get: {\n          text: function (templateText) {\n            var value = module.value || 0,\n                total = module.total || 0,\n                percent = animating ? module.get.displayPercent() : module.percent || 0,\n                left = module.total > 0 ? total - value : 100 - percent;\n            templateText = templateText || '';\n            templateText = templateText.replace('{value}', value).replace('{total}', total).replace('{left}', left).replace('{percent}', percent);\n            module.verbose('Adding variables to progress bar text', templateText);\n            return templateText;\n          },\n          normalizedValue: function (value) {\n            if (value < 0) {\n              module.debug('Value cannot decrement below 0');\n              return 0;\n            }\n\n            if (module.has.total()) {\n              if (value > module.total) {\n                module.debug('Value cannot increment above total', module.total);\n                return module.total;\n              }\n            } else if (value > 100) {\n              module.debug('Value cannot increment above 100 percent');\n              return 100;\n            }\n\n            return value;\n          },\n          updateInterval: function () {\n            if (settings.updateInterval == 'auto') {\n              return settings.duration;\n            }\n\n            return settings.updateInterval;\n          },\n          randomValue: function () {\n            module.debug('Generating random increment percentage');\n            return Math.floor(Math.random() * settings.random.max + settings.random.min);\n          },\n          numericValue: function (value) {\n            return typeof value === 'string' ? value.replace(/[^\\d.]/g, '') !== '' ? +value.replace(/[^\\d.]/g, '') : false : value;\n          },\n          transitionEnd: function () {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          },\n          // gets current displayed percentage (if animating values this is the intermediary value)\n          displayPercent: function () {\n            var barWidth = $bar.width(),\n                totalWidth = $module.width(),\n                minDisplay = parseInt($bar.css('min-width'), 10),\n                displayPercent = barWidth > minDisplay ? barWidth / totalWidth * 100 : module.percent;\n            return settings.precision > 0 ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision) : Math.round(displayPercent);\n          },\n          percent: function () {\n            return module.percent || 0;\n          },\n          value: function () {\n            return module.nextValue || module.value || 0;\n          },\n          total: function () {\n            return module.total || false;\n          }\n        },\n        create: {\n          progressPoll: function () {\n            module.progressPoll = setTimeout(function () {\n              module.update.toNextValue();\n              module.remove.progressPoll();\n            }, module.get.updateInterval());\n          }\n        },\n        is: {\n          complete: function () {\n            return module.is.success() || module.is.warning() || module.is.error();\n          },\n          success: function () {\n            return $module.hasClass(className.success);\n          },\n          warning: function () {\n            return $module.hasClass(className.warning);\n          },\n          error: function () {\n            return $module.hasClass(className.error);\n          },\n          active: function () {\n            return $module.hasClass(className.active);\n          },\n          visible: function () {\n            return $module.is(':visible');\n          }\n        },\n        remove: {\n          progressPoll: function () {\n            module.verbose('Removing progress poll timer');\n\n            if (module.progressPoll) {\n              clearTimeout(module.progressPoll);\n              delete module.progressPoll;\n            }\n          },\n          nextValue: function () {\n            module.verbose('Removing progress value stored for next update');\n            delete module.nextValue;\n          },\n          state: function () {\n            module.verbose('Removing stored state');\n            delete module.total;\n            delete module.percent;\n            delete module.value;\n          },\n          active: function () {\n            module.verbose('Removing active state');\n            $module.removeClass(className.active);\n          },\n          success: function () {\n            module.verbose('Removing success state');\n            $module.removeClass(className.success);\n          },\n          warning: function () {\n            module.verbose('Removing warning state');\n            $module.removeClass(className.warning);\n          },\n          error: function () {\n            module.verbose('Removing error state');\n            $module.removeClass(className.error);\n          }\n        },\n        set: {\n          barWidth: function (value) {\n            if (value > 100) {\n              module.error(error.tooHigh, value);\n            } else if (value < 0) {\n              module.error(error.tooLow, value);\n            } else {\n              $bar.css('width', value + '%');\n              $module.attr('data-percent', parseInt(value, 10));\n            }\n          },\n          duration: function (duration) {\n            duration = duration || settings.duration;\n            duration = typeof duration == 'number' ? duration + 'ms' : duration;\n            module.verbose('Setting progress bar transition duration', duration);\n            $bar.css({\n              'transition-duration': duration\n            });\n          },\n          percent: function (percent) {\n            percent = typeof percent == 'string' ? +percent.replace('%', '') : percent; // round display percentage\n\n            percent = settings.precision > 0 ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision) : Math.round(percent);\n            module.percent = percent;\n\n            if (!module.has.total()) {\n              module.value = settings.precision > 0 ? Math.round(percent / 100 * module.total * (10 * settings.precision)) / (10 * settings.precision) : Math.round(percent / 100 * module.total * 10) / 10;\n\n              if (settings.limitValues) {\n                module.value = module.value > 100 ? 100 : module.value < 0 ? 0 : module.value;\n              }\n            }\n\n            module.set.barWidth(percent);\n            module.set.labelInterval();\n            module.set.labels();\n            settings.onChange.call(element, percent, module.value, module.total);\n          },\n          labelInterval: function () {\n            var animationCallback = function () {\n              module.verbose('Bar finished animating, removing continuous label updates');\n              clearInterval(module.interval);\n              animating = false;\n              module.set.labels();\n            };\n\n            clearInterval(module.interval);\n            module.bind.transitionEnd(animationCallback);\n            animating = true;\n            module.interval = setInterval(function () {\n              var isInDOM = $.contains(document.documentElement, element);\n\n              if (!isInDOM) {\n                clearInterval(module.interval);\n                animating = false;\n              }\n\n              module.set.labels();\n            }, settings.framerate);\n          },\n          labels: function () {\n            module.verbose('Setting both bar progress and outer label text');\n            module.set.barLabel();\n            module.set.state();\n          },\n          label: function (text) {\n            text = text || '';\n\n            if (text) {\n              text = module.get.text(text);\n              module.verbose('Setting label to text', text);\n              $label.text(text);\n            }\n          },\n          state: function (percent) {\n            percent = percent !== undefined ? percent : module.percent;\n\n            if (percent === 100) {\n              if (settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {\n                module.set.success();\n                module.debug('Automatically triggering success at 100%');\n              } else {\n                module.verbose('Reached 100% removing active state');\n                module.remove.active();\n                module.remove.progressPoll();\n              }\n            } else if (percent > 0) {\n              module.verbose('Adjusting active progress bar label', percent);\n              module.set.active();\n            } else {\n              module.remove.active();\n              module.set.label(settings.text.active);\n            }\n          },\n          barLabel: function (text) {\n            if (text !== undefined) {\n              $progress.text(module.get.text(text));\n            } else if (settings.label == 'ratio' && module.total) {\n              module.verbose('Adding ratio to bar label');\n              $progress.text(module.get.text(settings.text.ratio));\n            } else if (settings.label == 'percent') {\n              module.verbose('Adding percentage to bar label');\n              $progress.text(module.get.text(settings.text.percent));\n            }\n          },\n          active: function (text) {\n            text = text || settings.text.active;\n            module.debug('Setting active state');\n\n            if (settings.showActivity && !module.is.active()) {\n              $module.addClass(className.active);\n            }\n\n            module.remove.warning();\n            module.remove.error();\n            module.remove.success();\n            text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              settings.onActive.call(element, module.value, module.total);\n            });\n          },\n          success: function (text) {\n            text = text || settings.text.success || settings.text.active;\n            module.debug('Setting success state');\n            $module.addClass(className.success);\n            module.remove.active();\n            module.remove.warning();\n            module.remove.error();\n            module.complete();\n\n            if (settings.text.success) {\n              text = settings.onLabelUpdate('success', text, module.value, module.total);\n              module.set.label(text);\n            } else {\n              text = settings.onLabelUpdate('active', text, module.value, module.total);\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              settings.onSuccess.call(element, module.total);\n            });\n          },\n          warning: function (text) {\n            text = text || settings.text.warning;\n            module.debug('Setting warning state');\n            $module.addClass(className.warning);\n            module.remove.active();\n            module.remove.success();\n            module.remove.error();\n            module.complete();\n            text = settings.onLabelUpdate('warning', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              settings.onWarning.call(element, module.value, module.total);\n            });\n          },\n          error: function (text) {\n            text = text || settings.text.error;\n            module.debug('Setting error state');\n            $module.addClass(className.error);\n            module.remove.active();\n            module.remove.success();\n            module.remove.warning();\n            module.complete();\n            text = settings.onLabelUpdate('error', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              settings.onError.call(element, module.value, module.total);\n            });\n          },\n          transitionEvent: function () {\n            transitionEnd = module.get.transitionEnd();\n          },\n          total: function (totalValue) {\n            module.total = totalValue;\n          },\n          value: function (value) {\n            module.value = value;\n          },\n          progress: function (value) {\n            if (!module.has.progressPoll()) {\n              module.debug('First update in progress update interval, immediately updating', value);\n              module.update.progress(value);\n              module.create.progressPoll();\n            } else {\n              module.debug('Updated within interval, setting next update to use new value', value);\n              module.set.nextValue(value);\n            }\n          },\n          nextValue: function (value) {\n            module.nextValue = value;\n          }\n        },\n        update: {\n          toNextValue: function () {\n            var nextValue = module.nextValue;\n\n            if (nextValue) {\n              module.debug('Update interval complete using last updated value', nextValue);\n              module.update.progress(nextValue);\n              module.remove.nextValue();\n            }\n          },\n          progress: function (value) {\n            var percentComplete;\n            value = module.get.numericValue(value);\n\n            if (value === false) {\n              module.error(error.nonNumeric, value);\n            }\n\n            value = module.get.normalizedValue(value);\n\n            if (module.has.total()) {\n              module.set.value(value);\n              percentComplete = value / module.total * 100;\n              module.debug('Calculating percent complete from total', percentComplete);\n              module.set.percent(percentComplete);\n            } else {\n              percentComplete = value;\n              module.debug('Setting value to exact percentage value', percentComplete);\n              module.set.percent(percentComplete);\n            }\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.progress.settings = {\n    name: 'Progress',\n    namespace: 'progress',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    random: {\n      min: 2,\n      max: 5\n    },\n    duration: 300,\n    updateInterval: 'auto',\n    autoSuccess: true,\n    showActivity: true,\n    limitValues: true,\n    label: 'percent',\n    precision: 0,\n    framerate: 1000 / 30,\n    /// 30 fps\n    percent: false,\n    total: false,\n    value: false,\n    // delay in ms for fail safe animation callback\n    failSafeDelay: 100,\n    onLabelUpdate: function (state, text, value, total) {\n      return text;\n    },\n    onChange: function (percent, value, total) {},\n    onSuccess: function (total) {},\n    onActive: function (value, total) {},\n    onError: function (value, total) {},\n    onWarning: function (value, total) {},\n    error: {\n      method: 'The method you called is not defined.',\n      nonNumeric: 'Progress value is non numeric',\n      tooHigh: 'Value specified is above 100%',\n      tooLow: 'Value specified is below 0%'\n    },\n    regExp: {\n      variable: /\\{\\$*[A-z0-9]+\\}/g\n    },\n    metadata: {\n      percent: 'percent',\n      total: 'total',\n      value: 'value'\n    },\n    selector: {\n      bar: '> .bar',\n      label: '> .label',\n      progress: '.bar > .progress'\n    },\n    text: {\n      active: false,\n      error: false,\n      success: false,\n      warning: false,\n      percent: '{percent}%',\n      ratio: '{value} of {total}'\n    },\n    className: {\n      active: 'active',\n      error: 'error',\n      success: 'success',\n      warning: 'warning'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Rating\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.rating = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.rating.settings, parameters) : $.extend({}, $.fn.rating.settings),\n          namespace = settings.namespace,\n          className = settings.className,\n          metadata = settings.metadata,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          element = this,\n          instance = $(this).data(moduleNamespace),\n          $module = $(this),\n          $icon = $module.find(selector.icon),\n          initialLoad,\n          module;\n      module = {\n        initialize: function () {\n          module.verbose('Initializing rating module', settings);\n\n          if ($icon.length === 0) {\n            module.setup.layout();\n          }\n\n          if (settings.interactive) {\n            module.enable();\n          } else {\n            module.disable();\n          }\n\n          module.set.initialLoad();\n          module.set.rating(module.get.initialRating());\n          module.remove.initialLoad();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Instantiating module', settings);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous instance', instance);\n          module.remove.events();\n          $module.removeData(moduleNamespace);\n        },\n        refresh: function () {\n          $icon = $module.find(selector.icon);\n        },\n        setup: {\n          layout: function () {\n            var maxRating = module.get.maxRating(),\n                html = $.fn.rating.settings.templates.icon(maxRating);\n            module.debug('Generating icon html dynamically');\n            $module.html(html);\n            module.refresh();\n          }\n        },\n        event: {\n          mouseenter: function () {\n            var $activeIcon = $(this);\n            $activeIcon.nextAll().removeClass(className.selected);\n            $module.addClass(className.selected);\n            $activeIcon.addClass(className.selected).prevAll().addClass(className.selected);\n          },\n          mouseleave: function () {\n            $module.removeClass(className.selected);\n            $icon.removeClass(className.selected);\n          },\n          click: function () {\n            var $activeIcon = $(this),\n                currentRating = module.get.rating(),\n                rating = $icon.index($activeIcon) + 1,\n                canClear = settings.clearable == 'auto' ? $icon.length === 1 : settings.clearable;\n\n            if (canClear && currentRating == rating) {\n              module.clearRating();\n            } else {\n              module.set.rating(rating);\n            }\n          }\n        },\n        clearRating: function () {\n          module.debug('Clearing current rating');\n          module.set.rating(0);\n        },\n        bind: {\n          events: function () {\n            module.verbose('Binding events');\n            $module.on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter).on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave).on('click' + eventNamespace, selector.icon, module.event.click);\n          }\n        },\n        remove: {\n          events: function () {\n            module.verbose('Removing events');\n            $module.off(eventNamespace);\n          },\n          initialLoad: function () {\n            initialLoad = false;\n          }\n        },\n        enable: function () {\n          module.debug('Setting rating to interactive mode');\n          module.bind.events();\n          $module.removeClass(className.disabled);\n        },\n        disable: function () {\n          module.debug('Setting rating to read-only mode');\n          module.remove.events();\n          $module.addClass(className.disabled);\n        },\n        is: {\n          initialLoad: function () {\n            return initialLoad;\n          }\n        },\n        get: {\n          initialRating: function () {\n            if ($module.data(metadata.rating) !== undefined) {\n              $module.removeData(metadata.rating);\n              return $module.data(metadata.rating);\n            }\n\n            return settings.initialRating;\n          },\n          maxRating: function () {\n            if ($module.data(metadata.maxRating) !== undefined) {\n              $module.removeData(metadata.maxRating);\n              return $module.data(metadata.maxRating);\n            }\n\n            return settings.maxRating;\n          },\n          rating: function () {\n            var currentRating = $icon.filter('.' + className.active).length;\n            module.verbose('Current rating retrieved', currentRating);\n            return currentRating;\n          }\n        },\n        set: {\n          rating: function (rating) {\n            var ratingIndex = rating - 1 >= 0 ? rating - 1 : 0,\n                $activeIcon = $icon.eq(ratingIndex);\n            $module.removeClass(className.selected);\n            $icon.removeClass(className.selected).removeClass(className.active);\n\n            if (rating > 0) {\n              module.verbose('Setting current rating to', rating);\n              $activeIcon.prevAll().addBack().addClass(className.active);\n            }\n\n            if (!module.is.initialLoad()) {\n              settings.onRate.call(element, rating);\n            }\n          },\n          initialLoad: function () {\n            initialLoad = true;\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.rating.settings = {\n    name: 'Rating',\n    namespace: 'rating',\n    slent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    initialRating: 0,\n    interactive: true,\n    maxRating: 4,\n    clearable: 'auto',\n    fireOnInit: false,\n    onRate: function (rating) {},\n    error: {\n      method: 'The method you called is not defined',\n      noMaximum: 'No maximum rating specified. Cannot generate HTML automatically'\n    },\n    metadata: {\n      rating: 'rating',\n      maxRating: 'maxRating'\n    },\n    className: {\n      active: 'active',\n      disabled: 'disabled',\n      selected: 'selected',\n      loading: 'loading'\n    },\n    selector: {\n      icon: '.icon'\n    },\n    templates: {\n      icon: function (maxRating) {\n        var icon = 1,\n            html = '';\n\n        while (icon <= maxRating) {\n          html += '<i class=\"icon\"></i>';\n          icon++;\n        }\n\n        return html;\n      }\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Search\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.search = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $(this).each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.search.settings, parameters) : $.extend({}, $.fn.search.settings),\n          className = settings.className,\n          metadata = settings.metadata,\n          regExp = settings.regExp,\n          fields = settings.fields,\n          selector = settings.selector,\n          error = settings.error,\n          namespace = settings.namespace,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          $prompt = $module.find(selector.prompt),\n          $searchButton = $module.find(selector.searchButton),\n          $results = $module.find(selector.results),\n          $result = $module.find(selector.result),\n          $category = $module.find(selector.category),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          disabledBubbled = false,\n          resultsDismissed = false,\n          module;\n      module = {\n        initialize: function () {\n          module.verbose('Initializing module');\n          module.get.settings();\n          module.determine.searchFields();\n          module.bind.events();\n          module.set.type();\n          module.create.results();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying instance');\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        refresh: function () {\n          module.debug('Refreshing selector cache');\n          $prompt = $module.find(selector.prompt);\n          $searchButton = $module.find(selector.searchButton);\n          $category = $module.find(selector.category);\n          $results = $module.find(selector.results);\n          $result = $module.find(selector.result);\n        },\n        refreshResults: function () {\n          $results = $module.find(selector.results);\n          $result = $module.find(selector.result);\n        },\n        bind: {\n          events: function () {\n            module.verbose('Binding events to search');\n\n            if (settings.automatic) {\n              $module.on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input);\n              $prompt.attr('autocomplete', 'off');\n            }\n\n            $module // prompt\n            .on('focus' + eventNamespace, selector.prompt, module.event.focus).on('blur' + eventNamespace, selector.prompt, module.event.blur).on('keydown' + eventNamespace, selector.prompt, module.handleKeyboard) // search button\n            .on('click' + eventNamespace, selector.searchButton, module.query) // results\n            .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown).on('mouseup' + eventNamespace, selector.results, module.event.result.mouseup).on('click' + eventNamespace, selector.result, module.event.result.click);\n          }\n        },\n        determine: {\n          searchFields: function () {\n            // this makes sure $.extend does not add specified search fields to default fields\n            // this is the only setting which should not extend defaults\n            if (parameters && parameters.searchFields !== undefined) {\n              settings.searchFields = parameters.searchFields;\n            }\n          }\n        },\n        event: {\n          input: function () {\n            if (settings.searchDelay) {\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                if (module.is.focused()) {\n                  module.query();\n                }\n              }, settings.searchDelay);\n            } else {\n              module.query();\n            }\n          },\n          focus: function () {\n            module.set.focus();\n\n            if (settings.searchOnFocus && module.has.minimumCharacters()) {\n              module.query(function () {\n                if (module.can.show()) {\n                  module.showResults();\n                }\n              });\n            }\n          },\n          blur: function (event) {\n            var pageLostFocus = document.activeElement === this,\n                callback = function () {\n              module.cancel.query();\n              module.remove.focus();\n              module.timer = setTimeout(module.hideResults, settings.hideDelay);\n            };\n\n            if (pageLostFocus) {\n              return;\n            }\n\n            resultsDismissed = false;\n\n            if (module.resultsClicked) {\n              module.debug('Determining if user action caused search to close');\n              $module.one('click.close' + eventNamespace, selector.results, function (event) {\n                if (module.is.inMessage(event) || disabledBubbled) {\n                  $prompt.focus();\n                  return;\n                }\n\n                disabledBubbled = false;\n\n                if (!module.is.animating() && !module.is.hidden()) {\n                  callback();\n                }\n              });\n            } else {\n              module.debug('Input blurred without user action, closing results');\n              callback();\n            }\n          },\n          result: {\n            mousedown: function () {\n              module.resultsClicked = true;\n            },\n            mouseup: function () {\n              module.resultsClicked = false;\n            },\n            click: function (event) {\n              module.debug('Search result selected');\n              var $result = $(this),\n                  $title = $result.find(selector.title).eq(0),\n                  $link = $result.is('a[href]') ? $result : $result.find('a[href]').eq(0),\n                  href = $link.attr('href') || false,\n                  target = $link.attr('target') || false,\n                  title = $title.html(),\n                  // title is used for result lookup\n              value = $title.length > 0 ? $title.text() : false,\n                  results = module.get.results(),\n                  result = $result.data(metadata.result) || module.get.result(value, results),\n                  returnedValue;\n\n              if ($.isFunction(settings.onSelect)) {\n                if (settings.onSelect.call(element, result, results) === false) {\n                  module.debug('Custom onSelect callback cancelled default select action');\n                  disabledBubbled = true;\n                  return;\n                }\n              }\n\n              module.hideResults();\n\n              if (value) {\n                module.set.value(value);\n              }\n\n              if (href) {\n                module.verbose('Opening search link found in result', $link);\n\n                if (target == '_blank' || event.ctrlKey) {\n                  window.open(href);\n                } else {\n                  window.location.href = href;\n                }\n              }\n            }\n          }\n        },\n        handleKeyboard: function (event) {\n          var // force selector refresh\n          $result = $module.find(selector.result),\n              $category = $module.find(selector.category),\n              $activeResult = $result.filter('.' + className.active),\n              currentIndex = $result.index($activeResult),\n              resultSize = $result.length,\n              hasActiveResult = $activeResult.length > 0,\n              keyCode = event.which,\n              keys = {\n            backspace: 8,\n            enter: 13,\n            escape: 27,\n            upArrow: 38,\n            downArrow: 40\n          },\n              newIndex; // search shortcuts\n\n          if (keyCode == keys.escape) {\n            module.verbose('Escape key pressed, blurring search field');\n            module.hideResults();\n            resultsDismissed = true;\n          }\n\n          if (module.is.visible()) {\n            if (keyCode == keys.enter) {\n              module.verbose('Enter key pressed, selecting active result');\n\n              if ($result.filter('.' + className.active).length > 0) {\n                module.event.result.click.call($result.filter('.' + className.active), event);\n                event.preventDefault();\n                return false;\n              }\n            } else if (keyCode == keys.upArrow && hasActiveResult) {\n              module.verbose('Up key pressed, changing active result');\n              newIndex = currentIndex - 1 < 0 ? currentIndex : currentIndex - 1;\n              $category.removeClass(className.active);\n              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);\n              event.preventDefault();\n            } else if (keyCode == keys.downArrow) {\n              module.verbose('Down key pressed, changing active result');\n              newIndex = currentIndex + 1 >= resultSize ? currentIndex : currentIndex + 1;\n              $category.removeClass(className.active);\n              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);\n              event.preventDefault();\n            }\n          } else {\n            // query shortcuts\n            if (keyCode == keys.enter) {\n              module.verbose('Enter key pressed, executing query');\n              module.query();\n              module.set.buttonPressed();\n              $prompt.one('keyup', module.remove.buttonFocus);\n            }\n          }\n        },\n        setup: {\n          api: function (searchTerm, callback) {\n            var apiSettings = {\n              debug: settings.debug,\n              on: false,\n              cache: settings.cache,\n              action: 'search',\n              urlData: {\n                query: searchTerm\n              },\n              onSuccess: function (response) {\n                module.parse.response.call(element, response, searchTerm);\n                callback();\n              },\n              onFailure: function () {\n                module.displayMessage(error.serverError);\n                callback();\n              },\n              onAbort: function (response) {},\n              onError: module.error\n            },\n                searchHTML;\n            $.extend(true, apiSettings, settings.apiSettings);\n            module.verbose('Setting up API request', apiSettings);\n            $module.api(apiSettings);\n          }\n        },\n        can: {\n          useAPI: function () {\n            return $.fn.api !== undefined;\n          },\n          show: function () {\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n          },\n          transition: function () {\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n          }\n        },\n        is: {\n          animating: function () {\n            return $results.hasClass(className.animating);\n          },\n          hidden: function () {\n            return $results.hasClass(className.hidden);\n          },\n          inMessage: function (event) {\n            if (!event.target) {\n              return;\n            }\n\n            var $target = $(event.target),\n                isInDOM = $.contains(document.documentElement, event.target);\n            return isInDOM && $target.closest(selector.message).length > 0;\n          },\n          empty: function () {\n            return $results.html() === '';\n          },\n          visible: function () {\n            return $results.filter(':visible').length > 0;\n          },\n          focused: function () {\n            return $prompt.filter(':focus').length > 0;\n          }\n        },\n        get: {\n          settings: function () {\n            if ($.isPlainObject(parameters) && parameters.searchFullText) {\n              settings.fullTextSearch = parameters.searchFullText;\n              module.error(settings.error.oldSearchSyntax, element);\n            }\n          },\n          inputEvent: function () {\n            var prompt = $prompt[0],\n                inputEvent = prompt !== undefined && prompt.oninput !== undefined ? 'input' : prompt !== undefined && prompt.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n            return inputEvent;\n          },\n          value: function () {\n            return $prompt.val();\n          },\n          results: function () {\n            var results = $module.data(metadata.results);\n            return results;\n          },\n          result: function (value, results) {\n            var lookupFields = ['title', 'id'],\n                result = false;\n            value = value !== undefined ? value : module.get.value();\n            results = results !== undefined ? results : module.get.results();\n\n            if (settings.type === 'category') {\n              module.debug('Finding result that matches', value);\n              $.each(results, function (index, category) {\n                if ($.isArray(category.results)) {\n                  result = module.search.object(value, category.results, lookupFields)[0]; // don't continue searching if a result is found\n\n                  if (result) {\n                    return false;\n                  }\n                }\n              });\n            } else {\n              module.debug('Finding result in results object', value);\n              result = module.search.object(value, results, lookupFields)[0];\n            }\n\n            return result || false;\n          }\n        },\n        select: {\n          firstResult: function () {\n            module.verbose('Selecting first result');\n            $result.first().addClass(className.active);\n          }\n        },\n        set: {\n          focus: function () {\n            $module.addClass(className.focus);\n          },\n          loading: function () {\n            $module.addClass(className.loading);\n          },\n          value: function (value) {\n            module.verbose('Setting search input value', value);\n            $prompt.val(value);\n          },\n          type: function (type) {\n            type = type || settings.type;\n\n            if (settings.type == 'category') {\n              $module.addClass(settings.type);\n            }\n          },\n          buttonPressed: function () {\n            $searchButton.addClass(className.pressed);\n          }\n        },\n        remove: {\n          loading: function () {\n            $module.removeClass(className.loading);\n          },\n          focus: function () {\n            $module.removeClass(className.focus);\n          },\n          buttonPressed: function () {\n            $searchButton.removeClass(className.pressed);\n          }\n        },\n        query: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          var searchTerm = module.get.value(),\n              cache = module.read.cache(searchTerm);\n\n          callback = callback || function () {};\n\n          if (module.has.minimumCharacters()) {\n            if (cache) {\n              module.debug('Reading result from cache', searchTerm);\n              module.save.results(cache.results);\n              module.addResults(cache.html);\n              module.inject.id(cache.results);\n              callback();\n            } else {\n              module.debug('Querying for', searchTerm);\n\n              if ($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n                module.search.local(searchTerm);\n                callback();\n              } else if (module.can.useAPI()) {\n                module.search.remote(searchTerm, callback);\n              } else {\n                module.error(error.source);\n                callback();\n              }\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n          } else {\n            module.hideResults();\n          }\n        },\n        search: {\n          local: function (searchTerm) {\n            var results = module.search.object(searchTerm, settings.content),\n                searchHTML;\n            module.set.loading();\n            module.save.results(results);\n            module.debug('Returned full local search results', results);\n\n            if (settings.maxResults > 0) {\n              module.debug('Using specified max results', results);\n              results = results.slice(0, settings.maxResults);\n            }\n\n            if (settings.type == 'category') {\n              results = module.create.categoryResults(results);\n            }\n\n            searchHTML = module.generateResults({\n              results: results\n            });\n            module.remove.loading();\n            module.addResults(searchHTML);\n            module.inject.id(results);\n            module.write.cache(searchTerm, {\n              html: searchHTML,\n              results: results\n            });\n          },\n          remote: function (searchTerm, callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if ($module.api('is loading')) {\n              $module.api('abort');\n            }\n\n            module.setup.api(searchTerm, callback);\n            $module.api('query');\n          },\n          object: function (searchTerm, source, searchFields) {\n            var results = [],\n                exactResults = [],\n                fuzzyResults = [],\n                searchExp = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n                matchRegExp = new RegExp(regExp.beginsWith + searchExp, 'i'),\n                // avoid duplicates when pushing results\n            addResult = function (array, result) {\n              var notResult = $.inArray(result, results) == -1,\n                  notFuzzyResult = $.inArray(result, fuzzyResults) == -1,\n                  notExactResults = $.inArray(result, exactResults) == -1;\n\n              if (notResult && notFuzzyResult && notExactResults) {\n                array.push(result);\n              }\n            };\n\n            source = source || settings.source;\n            searchFields = searchFields !== undefined ? searchFields : settings.searchFields; // search fields should be array to loop correctly\n\n            if (!$.isArray(searchFields)) {\n              searchFields = [searchFields];\n            } // exit conditions if no source\n\n\n            if (source === undefined || source === false) {\n              module.error(error.source);\n              return [];\n            } // iterate through search fields looking for matches\n\n\n            $.each(searchFields, function (index, field) {\n              $.each(source, function (label, content) {\n                var fieldExists = typeof content[field] == 'string';\n\n                if (fieldExists) {\n                  if (content[field].search(matchRegExp) !== -1) {\n                    // content starts with value (first in results)\n                    addResult(results, content);\n                  } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field])) {\n                    // content fuzzy matches (last in results)\n                    addResult(exactResults, content);\n                  } else if (settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field])) {\n                    // content fuzzy matches (last in results)\n                    addResult(fuzzyResults, content);\n                  }\n                }\n              });\n            });\n            $.merge(exactResults, fuzzyResults);\n            $.merge(results, exactResults);\n            return results;\n          }\n        },\n        exactSearch: function (query, term) {\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (term.indexOf(query) > -1) {\n            return true;\n          }\n\n          return false;\n        },\n        fuzzySearch: function (query, term) {\n          var termLength = term.length,\n              queryLength = query.length;\n\n          if (typeof query !== 'string') {\n            return false;\n          }\n\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (queryLength > termLength) {\n            return false;\n          }\n\n          if (queryLength === termLength) {\n            return query === term;\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n            var queryCharacter = query.charCodeAt(characterIndex);\n\n            while (nextCharacterIndex < termLength) {\n              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n                continue search;\n              }\n            }\n\n            return false;\n          }\n\n          return true;\n        },\n        parse: {\n          response: function (response, searchTerm) {\n            var searchHTML = module.generateResults(response);\n            module.verbose('Parsing server response', response);\n\n            if (response !== undefined) {\n              if (searchTerm !== undefined && response[fields.results] !== undefined) {\n                module.addResults(searchHTML);\n                module.inject.id(response[fields.results]);\n                module.write.cache(searchTerm, {\n                  html: searchHTML,\n                  results: response[fields.results]\n                });\n                module.save.results(response[fields.results]);\n              }\n            }\n          }\n        },\n        cancel: {\n          query: function () {\n            if (module.can.useAPI()) {\n              $module.api('abort');\n            }\n          }\n        },\n        has: {\n          minimumCharacters: function () {\n            var searchTerm = module.get.value(),\n                numCharacters = searchTerm.length;\n            return numCharacters >= settings.minCharacters;\n          },\n          results: function () {\n            if ($results.length === 0) {\n              return false;\n            }\n\n            var html = $results.html();\n            return html != '';\n          }\n        },\n        clear: {\n          cache: function (value) {\n            var cache = $module.data(metadata.cache);\n\n            if (!value) {\n              module.debug('Clearing cache', value);\n              $module.removeData(metadata.cache);\n            } else if (value && cache && cache[value]) {\n              module.debug('Removing value from cache', value);\n              delete cache[value];\n              $module.data(metadata.cache, cache);\n            }\n          }\n        },\n        read: {\n          cache: function (name) {\n            var cache = $module.data(metadata.cache);\n\n            if (settings.cache) {\n              module.verbose('Checking cache for generated html for query', name);\n              return typeof cache == 'object' && cache[name] !== undefined ? cache[name] : false;\n            }\n\n            return false;\n          }\n        },\n        create: {\n          categoryResults: function (results) {\n            var categoryResults = {};\n            $.each(results, function (index, result) {\n              if (!result.category) {\n                return;\n              }\n\n              if (categoryResults[result.category] === undefined) {\n                module.verbose('Creating new category of results', result.category);\n                categoryResults[result.category] = {\n                  name: result.category,\n                  results: [result]\n                };\n              } else {\n                categoryResults[result.category].results.push(result);\n              }\n            });\n            return categoryResults;\n          },\n          id: function (resultIndex, categoryIndex) {\n            var resultID = resultIndex + 1,\n                // not zero indexed\n            categoryID = categoryIndex + 1,\n                firstCharCode,\n                letterID,\n                id;\n\n            if (categoryIndex !== undefined) {\n              // start char code for \"A\"\n              letterID = String.fromCharCode(97 + categoryIndex);\n              id = letterID + resultID;\n              module.verbose('Creating category result id', id);\n            } else {\n              id = resultID;\n              module.verbose('Creating result id', id);\n            }\n\n            return id;\n          },\n          results: function () {\n            if ($results.length === 0) {\n              $results = $('<div />').addClass(className.results).appendTo($module);\n            }\n          }\n        },\n        inject: {\n          result: function (result, resultIndex, categoryIndex) {\n            module.verbose('Injecting result into results');\n            var $selectedResult = categoryIndex !== undefined ? $results.children().eq(categoryIndex).children(selector.results).first().children(selector.result).eq(resultIndex) : $results.children(selector.result).eq(resultIndex);\n            module.verbose('Injecting results metadata', $selectedResult);\n            $selectedResult.data(metadata.result, result);\n          },\n          id: function (results) {\n            module.debug('Injecting unique ids into results');\n            var // since results may be object, we must use counters\n            categoryIndex = 0,\n                resultIndex = 0;\n\n            if (settings.type === 'category') {\n              // iterate through each category result\n              $.each(results, function (index, category) {\n                resultIndex = 0;\n                $.each(category.results, function (index, value) {\n                  var result = category.results[index];\n\n                  if (result.id === undefined) {\n                    result.id = module.create.id(resultIndex, categoryIndex);\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n                  resultIndex++;\n                });\n                categoryIndex++;\n              });\n            } else {\n              // top level\n              $.each(results, function (index, value) {\n                var result = results[index];\n\n                if (result.id === undefined) {\n                  result.id = module.create.id(resultIndex);\n                }\n\n                module.inject.result(result, resultIndex);\n                resultIndex++;\n              });\n            }\n\n            return results;\n          }\n        },\n        save: {\n          results: function (results) {\n            module.verbose('Saving current search results to metadata', results);\n            $module.data(metadata.results, results);\n          }\n        },\n        write: {\n          cache: function (name, value) {\n            var cache = $module.data(metadata.cache) !== undefined ? $module.data(metadata.cache) : {};\n\n            if (settings.cache) {\n              module.verbose('Writing generated html to cache', name, value);\n              cache[name] = value;\n              $module.data(metadata.cache, cache);\n            }\n          }\n        },\n        addResults: function (html) {\n          if ($.isFunction(settings.onResultsAdd)) {\n            if (settings.onResultsAdd.call($results, html) === false) {\n              module.debug('onResultsAdd callback cancelled default action');\n              return false;\n            }\n          }\n\n          if (html) {\n            $results.html(html);\n            module.refreshResults();\n\n            if (settings.selectFirstResult) {\n              module.select.firstResult();\n            }\n\n            module.showResults();\n          } else {\n            module.hideResults(function () {\n              $results.empty();\n            });\n          }\n        },\n        showResults: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (resultsDismissed) {\n            return;\n          }\n\n          if (!module.is.visible() && module.has.results()) {\n            if (module.can.transition()) {\n              module.debug('Showing results with css animations');\n              $results.transition({\n                animation: settings.transition + ' in',\n                debug: settings.debug,\n                verbose: settings.verbose,\n                duration: settings.duration,\n                onComplete: function () {\n                  callback();\n                },\n                queue: true\n              });\n            } else {\n              module.debug('Showing results with javascript');\n              $results.stop().fadeIn(settings.duration, settings.easing);\n            }\n\n            settings.onResultsOpen.call($results);\n          }\n        },\n        hideResults: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.visible()) {\n            if (module.can.transition()) {\n              module.debug('Hiding results with css animations');\n              $results.transition({\n                animation: settings.transition + ' out',\n                debug: settings.debug,\n                verbose: settings.verbose,\n                duration: settings.duration,\n                onComplete: function () {\n                  callback();\n                },\n                queue: true\n              });\n            } else {\n              module.debug('Hiding results with javascript');\n              $results.stop().fadeOut(settings.duration, settings.easing);\n            }\n\n            settings.onResultsClose.call($results);\n          }\n        },\n        generateResults: function (response) {\n          module.debug('Generating html from response', response);\n          var template = settings.templates[settings.type],\n              isProperObject = $.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results]),\n              isProperArray = $.isArray(response[fields.results]) && response[fields.results].length > 0,\n              html = '';\n\n          if (isProperObject || isProperArray) {\n            if (settings.maxResults > 0) {\n              if (isProperObject) {\n                if (settings.type == 'standard') {\n                  module.error(error.maxResults);\n                }\n              } else {\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n              }\n            }\n\n            if ($.isFunction(template)) {\n              html = template(response, fields);\n            } else {\n              module.error(error.noTemplate, false);\n            }\n          } else if (settings.showNoResults) {\n            html = module.displayMessage(error.noResults, 'empty');\n          }\n\n          settings.onResults.call(element, response);\n          return html;\n        },\n        displayMessage: function (text, type) {\n          type = type || 'standard';\n          module.debug('Displaying message', text, type);\n          module.addResults(settings.templates.message(text, type));\n          return settings.templates.message(text, type);\n        },\n        setting: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.search.settings = {\n    name: 'Search',\n    namespace: 'search',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    // template to use (specified in settings.templates)\n    type: 'standard',\n    // minimum characters required to search\n    minCharacters: 1,\n    // whether to select first result after searching automatically\n    selectFirstResult: false,\n    // API config\n    apiSettings: false,\n    // object to search\n    source: false,\n    // Whether search should query current term on focus\n    searchOnFocus: true,\n    // fields to search\n    searchFields: ['title', 'description'],\n    // field to display in standard results template\n    displayField: '',\n    // search anywhere in value (set to 'exact' to require exact matches\n    fullTextSearch: 'exact',\n    // whether to add events to prompt automatically\n    automatic: true,\n    // delay before hiding menu after blur\n    hideDelay: 0,\n    // delay before searching\n    searchDelay: 200,\n    // maximum results returned from search\n    maxResults: 7,\n    // whether to store lookups in local cache\n    cache: true,\n    // whether no results errors should be shown\n    showNoResults: true,\n    // transition settings\n    transition: 'scale',\n    duration: 200,\n    easing: 'easeOutExpo',\n    // callbacks\n    onSelect: false,\n    onResultsAdd: false,\n    onSearchQuery: function (query) {},\n    onResults: function (response) {},\n    onResultsOpen: function () {},\n    onResultsClose: function () {},\n    className: {\n      animating: 'animating',\n      active: 'active',\n      empty: 'empty',\n      focus: 'focus',\n      hidden: 'hidden',\n      loading: 'loading',\n      results: 'results',\n      pressed: 'down'\n    },\n    error: {\n      source: 'Cannot search. No source used, and Semantic API module was not included',\n      noResults: 'Your search returned no results',\n      logging: 'Error in debug logging, exiting.',\n      noEndpoint: 'No search endpoint was specified',\n      noTemplate: 'A valid template name was not specified.',\n      oldSearchSyntax: 'searchFullText setting has been renamed fullTextSearch for consistency, please adjust your settings.',\n      serverError: 'There was an issue querying the server.',\n      maxResults: 'Results must be an array to use maxResults setting',\n      method: 'The method you called is not defined.'\n    },\n    metadata: {\n      cache: 'cache',\n      results: 'results',\n      result: 'result'\n    },\n    regExp: {\n      escape: /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\n      beginsWith: '(?:\\s|^)'\n    },\n    // maps api response attributes to internal representation\n    fields: {\n      categories: 'results',\n      // array of categories (category view)\n      categoryName: 'name',\n      // name of category (category view)\n      categoryResults: 'results',\n      // array of results (category view)\n      description: 'description',\n      // result description\n      image: 'image',\n      // result image\n      price: 'price',\n      // result price\n      results: 'results',\n      // array of results (standard)\n      title: 'title',\n      // result title\n      url: 'url',\n      // result url\n      action: 'action',\n      // \"view more\" object name\n      actionText: 'text',\n      // \"view more\" text\n      actionURL: 'url' // \"view more\" url\n\n    },\n    selector: {\n      prompt: '.prompt',\n      searchButton: '.search.button',\n      results: '.results',\n      message: '.results > .message',\n      category: '.category',\n      result: '.result',\n      title: '.title, .name'\n    },\n    templates: {\n      escape: function (string) {\n        var badChars = /[&<>\"'`]/g,\n            shouldEscape = /[&<>\"'`]/,\n            escape = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&quot;\",\n          \"'\": \"&#x27;\",\n          \"`\": \"&#x60;\"\n        },\n            escapedChar = function (chr) {\n          return escape[chr];\n        };\n\n        if (shouldEscape.test(string)) {\n          return string.replace(badChars, escapedChar);\n        }\n\n        return string;\n      },\n      message: function (message, type) {\n        var html = '';\n\n        if (message !== undefined && type !== undefined) {\n          html += '' + '<div class=\"message ' + type + '\">'; // message type\n\n          if (type == 'empty') {\n            html += '' + '<div class=\"header\">No Results</div class=\"header\">' + '<div class=\"description\">' + message + '</div class=\"description\">';\n          } else {\n            html += ' <div class=\"description\">' + message + '</div>';\n          }\n\n          html += '</div>';\n        }\n\n        return html;\n      },\n      category: function (response, fields) {\n        var html = '',\n            escape = $.fn.search.settings.templates.escape;\n\n        if (response[fields.categoryResults] !== undefined) {\n          // each category\n          $.each(response[fields.categoryResults], function (index, category) {\n            if (category[fields.results] !== undefined && category.results.length > 0) {\n              html += '<div class=\"category\">';\n\n              if (category[fields.categoryName] !== undefined) {\n                html += '<div class=\"name\">' + category[fields.categoryName] + '</div>';\n              } // each item inside category\n\n\n              html += '<div class=\"results\">';\n              $.each(category.results, function (index, result) {\n                if (result[fields.url]) {\n                  html += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\n                } else {\n                  html += '<a class=\"result\">';\n                }\n\n                if (result[fields.image] !== undefined) {\n                  html += '' + '<div class=\"image\">' + ' <img src=\"' + result[fields.image] + '\">' + '</div>';\n                }\n\n                html += '<div class=\"content\">';\n\n                if (result[fields.price] !== undefined) {\n                  html += '<div class=\"price\">' + result[fields.price] + '</div>';\n                }\n\n                if (result[fields.title] !== undefined) {\n                  html += '<div class=\"title\">' + result[fields.title] + '</div>';\n                }\n\n                if (result[fields.description] !== undefined) {\n                  html += '<div class=\"description\">' + result[fields.description] + '</div>';\n                }\n\n                html += '' + '</div>';\n                html += '</a>';\n              });\n              html += '</div>';\n              html += '' + '</div>';\n            }\n          });\n\n          if (response[fields.action]) {\n            html += '' + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">' + response[fields.action][fields.actionText] + '</a>';\n          }\n\n          return html;\n        }\n\n        return false;\n      },\n      standard: function (response, fields) {\n        var html = '';\n\n        if (response[fields.results] !== undefined) {\n          // each result\n          $.each(response[fields.results], function (index, result) {\n            if (result[fields.url]) {\n              html += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\n            } else {\n              html += '<a class=\"result\">';\n            }\n\n            if (result[fields.image] !== undefined) {\n              html += '' + '<div class=\"image\">' + ' <img src=\"' + result[fields.image] + '\">' + '</div>';\n            }\n\n            html += '<div class=\"content\">';\n\n            if (result[fields.price] !== undefined) {\n              html += '<div class=\"price\">' + result[fields.price] + '</div>';\n            }\n\n            if (result[fields.title] !== undefined) {\n              html += '<div class=\"title\">' + result[fields.title] + '</div>';\n            }\n\n            if (result[fields.description] !== undefined) {\n              html += '<div class=\"description\">' + result[fields.description] + '</div>';\n            }\n\n            html += '' + '</div>';\n            html += '</a>';\n          });\n\n          if (response[fields.action]) {\n            html += '' + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">' + response[fields.action][fields.actionText] + '</a>';\n          }\n\n          return html;\n        }\n\n        return false;\n      }\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Shape\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.shape = function (parameters) {\n    var $allModules = $(this),\n        $body = $('body'),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var moduleSelector = $allModules.selector || '',\n          settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.shape.settings, parameters) : $.extend({}, $.fn.shape.settings),\n          // internal aliases\n      namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          className = settings.className,\n          // define namespaces for modules\n      eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          // selector cache\n      $module = $(this),\n          $sides = $module.find(selector.sides),\n          $side = $module.find(selector.side),\n          // private variables\n      nextIndex = false,\n          $activeSide,\n          $nextSide,\n          // standard module\n      element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function () {\n          module.verbose('Initializing module for', element);\n          module.set.defaultSide();\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module for', element);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        refresh: function () {\n          module.verbose('Refreshing selector cache for', element);\n          $module = $(element);\n          $sides = $(this).find(selector.shape);\n          $side = $(this).find(selector.side);\n        },\n        repaint: function () {\n          module.verbose('Forcing repaint event');\n          var shape = $sides[0] || document.createElement('div'),\n              fakeAssignment = shape.offsetWidth;\n        },\n        animate: function (propertyObject, callback) {\n          module.verbose('Animating box with properties', propertyObject);\n\n          callback = callback || function (event) {\n            module.verbose('Executing animation callback');\n\n            if (event !== undefined) {\n              event.stopPropagation();\n            }\n\n            module.reset();\n            module.set.active();\n          };\n\n          settings.beforeChange.call($nextSide[0]);\n\n          if (module.get.transitionEvent()) {\n            module.verbose('Starting CSS animation');\n            $module.addClass(className.animating);\n            $sides.css(propertyObject).one(module.get.transitionEvent(), callback);\n            module.set.duration(settings.duration);\n            requestAnimationFrame(function () {\n              $module.addClass(className.animating);\n              $activeSide.addClass(className.hidden);\n            });\n          } else {\n            callback();\n          }\n        },\n        queue: function (method) {\n          module.debug('Queueing animation of', method);\n          $sides.one(module.get.transitionEvent(), function () {\n            module.debug('Executing queued animation');\n            setTimeout(function () {\n              $module.shape(method);\n            }, 0);\n          });\n        },\n        reset: function () {\n          module.verbose('Animating states reset');\n          $module.removeClass(className.animating).attr('style', '').removeAttr('style'); // removeAttr style does not consistently work in safari\n\n          $sides.attr('style', '').removeAttr('style');\n          $side.attr('style', '').removeAttr('style').removeClass(className.hidden);\n          $nextSide.removeClass(className.animating).attr('style', '').removeAttr('style');\n        },\n        is: {\n          complete: function () {\n            return $side.filter('.' + className.active)[0] == $nextSide[0];\n          },\n          animating: function () {\n            return $module.hasClass(className.animating);\n          }\n        },\n        set: {\n          defaultSide: function () {\n            $activeSide = $module.find('.' + settings.className.active);\n            $nextSide = $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();\n            nextIndex = false;\n            module.verbose('Active side set to', $activeSide);\n            module.verbose('Next side set to', $nextSide);\n          },\n          duration: function (duration) {\n            duration = duration || settings.duration;\n            duration = typeof duration == 'number' ? duration + 'ms' : duration;\n            module.verbose('Setting animation duration', duration);\n\n            if (settings.duration || settings.duration === 0) {\n              $sides.add($side).css({\n                '-webkit-transition-duration': duration,\n                '-moz-transition-duration': duration,\n                '-ms-transition-duration': duration,\n                '-o-transition-duration': duration,\n                'transition-duration': duration\n              });\n            }\n          },\n          currentStageSize: function () {\n            var $activeSide = $module.find('.' + settings.className.active),\n                width = $activeSide.outerWidth(true),\n                height = $activeSide.outerHeight(true);\n            $module.css({\n              width: width,\n              height: height\n            });\n          },\n          stageSize: function () {\n            var $clone = $module.clone().addClass(className.loading),\n                $activeSide = $clone.find('.' + settings.className.active),\n                $nextSide = nextIndex ? $clone.find(selector.side).eq(nextIndex) : $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $clone.find(selector.side).first(),\n                newWidth = settings.width == 'next' ? $nextSide.outerWidth(true) : settings.width == 'initial' ? $module.width() : settings.width,\n                newHeight = settings.height == 'next' ? $nextSide.outerHeight(true) : settings.height == 'initial' ? $module.height() : settings.height;\n            $activeSide.removeClass(className.active);\n            $nextSide.addClass(className.active);\n            $clone.insertAfter($module);\n            $clone.remove();\n\n            if (settings.width != 'auto') {\n              $module.css('width', newWidth + settings.jitter);\n              module.verbose('Specifying width during animation', newWidth);\n            }\n\n            if (settings.height != 'auto') {\n              $module.css('height', newHeight + settings.jitter);\n              module.verbose('Specifying height during animation', newHeight);\n            }\n          },\n          nextSide: function (selector) {\n            nextIndex = selector;\n            $nextSide = $side.filter(selector);\n            nextIndex = $side.index($nextSide);\n\n            if ($nextSide.length === 0) {\n              module.set.defaultSide();\n              module.error(error.side);\n            }\n\n            module.verbose('Next side manually set to', $nextSide);\n          },\n          active: function () {\n            module.verbose('Setting new side to active', $nextSide);\n            $side.removeClass(className.active);\n            $nextSide.addClass(className.active);\n            settings.onChange.call($nextSide[0]);\n            module.set.defaultSide();\n          }\n        },\n        flip: {\n          up: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping up', $nextSide);\n              var transform = module.get.transform.up();\n              module.set.stageSize();\n              module.stage.above();\n              module.animate(transform);\n            } else {\n              module.queue('flip up');\n            }\n          },\n          down: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping down', $nextSide);\n              var transform = module.get.transform.down();\n              module.set.stageSize();\n              module.stage.below();\n              module.animate(transform);\n            } else {\n              module.queue('flip down');\n            }\n          },\n          left: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping left', $nextSide);\n              var transform = module.get.transform.left();\n              module.set.stageSize();\n              module.stage.left();\n              module.animate(transform);\n            } else {\n              module.queue('flip left');\n            }\n          },\n          right: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping right', $nextSide);\n              var transform = module.get.transform.right();\n              module.set.stageSize();\n              module.stage.right();\n              module.animate(transform);\n            } else {\n              module.queue('flip right');\n            }\n          },\n          over: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping over', $nextSide);\n              module.set.stageSize();\n              module.stage.behind();\n              module.animate(module.get.transform.over());\n            } else {\n              module.queue('flip over');\n            }\n          },\n          back: function () {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping back', $nextSide);\n              module.set.stageSize();\n              module.stage.behind();\n              module.animate(module.get.transform.back());\n            } else {\n              module.queue('flip back');\n            }\n          }\n        },\n        get: {\n          transform: {\n            up: function () {\n              var translate = {\n                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\n                z: -($activeSide.outerHeight(true) / 2)\n              };\n              return {\n                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(-90deg)'\n              };\n            },\n            down: function () {\n              var translate = {\n                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\n                z: -($activeSide.outerHeight(true) / 2)\n              };\n              return {\n                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(90deg)'\n              };\n            },\n            left: function () {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\n                z: -($activeSide.outerWidth(true) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'\n              };\n            },\n            right: function () {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\n                z: -($activeSide.outerWidth(true) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'\n              };\n            },\n            over: function () {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'\n              };\n            },\n            back: function () {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'\n              };\n            }\n          },\n          transitionEvent: function () {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          },\n          nextSide: function () {\n            return $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();\n          }\n        },\n        stage: {\n          above: function () {\n            var box = {\n              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,\n              depth: {\n                active: $nextSide.outerHeight(true) / 2,\n                next: $activeSide.outerHeight(true) / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as above', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'top': box.origin + 'px',\n              'transform': 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          below: function () {\n            var box = {\n              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,\n              depth: {\n                active: $nextSide.outerHeight(true) / 2,\n                next: $activeSide.outerHeight(true) / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as below', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'top': box.origin + 'px',\n              'transform': 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          left: function () {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          right: function () {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          behind: function () {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as behind', $nextSide, box);\n            $activeSide.css({\n              'transform': 'rotateY(0deg)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(-180deg)'\n            });\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.shape.settings = {\n    // module info\n    name: 'Shape',\n    // hide all debug content\n    silent: false,\n    // debug content outputted to console\n    debug: false,\n    // verbose debug output\n    verbose: false,\n    // fudge factor in pixels when swapping from 2d to 3d (can be useful to correct rounding errors)\n    jitter: 0,\n    // performance data output\n    performance: true,\n    // event namespace\n    namespace: 'shape',\n    // width during animation, can be set to 'auto', initial', 'next' or pixel amount\n    width: 'initial',\n    // height during animation, can be set to 'auto', 'initial', 'next' or pixel amount\n    height: 'initial',\n    // callback occurs on side change\n    beforeChange: function () {},\n    onChange: function () {},\n    // allow animation to same side\n    allowRepeats: false,\n    // animation duration\n    duration: false,\n    // possible errors\n    error: {\n      side: 'You tried to switch to a side that does not exist.',\n      method: 'The method you called is not defined'\n    },\n    // classnames used\n    className: {\n      animating: 'animating',\n      hidden: 'hidden',\n      loading: 'loading',\n      active: 'active'\n    },\n    // selectors used\n    selector: {\n      sides: '.sides',\n      side: '.side'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Sidebar\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.sidebar = function (parameters) {\n    var $allModules = $(this),\n        $window = $(window),\n        $document = $(document),\n        $html = $('html'),\n        $head = $('head'),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sidebar.settings, parameters) : $.extend({}, $.fn.sidebar.settings),\n          selector = settings.selector,\n          className = settings.className,\n          namespace = settings.namespace,\n          regExp = settings.regExp,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $sidebars = $module.children(selector.sidebar),\n          $fixed = $context.children(selector.fixed),\n          $pusher = $context.children(selector.pusher),\n          $style,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          elementNamespace,\n          id,\n          currentScroll,\n          transitionEvent,\n          module;\n      module = {\n        initialize: function () {\n          module.debug('Initializing sidebar', parameters);\n          module.create.id();\n          transitionEvent = module.get.transitionEvent(); // avoids locking rendering if initialized in onReady\n\n          if (settings.delaySetup) {\n            requestAnimationFrame(module.setup.layout);\n          } else {\n            module.setup.layout();\n          }\n\n          requestAnimationFrame(function () {\n            module.setup.cache();\n          });\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        create: {\n          id: function () {\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementNamespace = '.' + id;\n            module.verbose('Creating unique id for element', id);\n          }\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module for', $module);\n          $module.off(eventNamespace).removeData(moduleNamespace);\n\n          if (module.is.ios()) {\n            module.remove.ios();\n          } // bound by uuid\n\n\n          $context.off(elementNamespace);\n          $window.off(elementNamespace);\n          $document.off(elementNamespace);\n        },\n        event: {\n          clickaway: function (event) {\n            var clickedInPusher = $pusher.find(event.target).length > 0 || $pusher.is(event.target),\n                clickedContext = $context.is(event.target);\n\n            if (clickedInPusher) {\n              module.verbose('User clicked on dimmed page');\n              module.hide();\n            }\n\n            if (clickedContext) {\n              module.verbose('User clicked on dimmable context (scaled out page)');\n              module.hide();\n            }\n          },\n          touch: function (event) {//event.stopPropagation();\n          },\n          containScroll: function (event) {\n            if (element.scrollTop <= 0) {\n              element.scrollTop = 1;\n            }\n\n            if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {\n              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;\n            }\n          },\n          scroll: function (event) {\n            if ($(event.target).closest(selector.sidebar).length === 0) {\n              event.preventDefault();\n            }\n          }\n        },\n        bind: {\n          clickaway: function () {\n            module.verbose('Adding clickaway events to context', $context);\n\n            if (settings.closable) {\n              $context.on('click' + elementNamespace, module.event.clickaway).on('touchend' + elementNamespace, module.event.clickaway);\n            }\n          },\n          scrollLock: function () {\n            if (settings.scrollLock) {\n              module.debug('Disabling page scroll');\n              $window.on('DOMMouseScroll' + elementNamespace, module.event.scroll);\n            }\n\n            module.verbose('Adding events to contain sidebar scroll');\n            $document.on('touchmove' + elementNamespace, module.event.touch);\n            $module.on('scroll' + eventNamespace, module.event.containScroll);\n          }\n        },\n        unbind: {\n          clickaway: function () {\n            module.verbose('Removing clickaway events from context', $context);\n            $context.off(elementNamespace);\n          },\n          scrollLock: function () {\n            module.verbose('Removing scroll lock from page');\n            $document.off(elementNamespace);\n            $window.off(elementNamespace);\n            $module.off('scroll' + eventNamespace);\n          }\n        },\n        add: {\n          inlineCSS: function () {\n            var width = module.cache.width || $module.outerWidth(),\n                height = module.cache.height || $module.outerHeight(),\n                isRTL = module.is.rtl(),\n                direction = module.get.direction(),\n                distance = {\n              left: width,\n              right: -width,\n              top: height,\n              bottom: -height\n            },\n                style;\n\n            if (isRTL) {\n              module.verbose('RTL detected, flipping widths');\n              distance.left = -width;\n              distance.right = width;\n            }\n\n            style = '<style>';\n\n            if (direction === 'left' || direction === 'right') {\n              module.debug('Adding CSS rules for animation distance', width);\n              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';\n            } else if (direction === 'top' || direction == 'bottom') {\n              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';\n            }\n            /* IE is only browser not to create context with transforms */\n\n            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */\n\n\n            if (module.is.ie()) {\n              if (direction === 'left' || direction === 'right') {\n                module.debug('Adding CSS rules for animation distance', width);\n                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';\n              } else if (direction === 'top' || direction == 'bottom') {\n                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';\n              }\n              /* opposite sides visible forces content overlay */\n\n\n              style += '' + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,' + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0px, 0, 0);' + '           transform: translate3d(0px, 0, 0);' + ' }';\n            }\n\n            style += '</style>';\n            $style = $(style).appendTo($head);\n            module.debug('Adding sizing css to head', $style);\n          }\n        },\n        refresh: function () {\n          module.verbose('Refreshing selector cache');\n          $context = $(settings.context);\n          $sidebars = $context.children(selector.sidebar);\n          $pusher = $context.children(selector.pusher);\n          $fixed = $context.children(selector.fixed);\n          module.clear.cache();\n        },\n        refreshSidebars: function () {\n          module.verbose('Refreshing other sidebars');\n          $sidebars = $context.children(selector.sidebar);\n        },\n        repaint: function () {\n          module.verbose('Forcing repaint event');\n          element.style.display = 'none';\n          var ignored = element.offsetHeight;\n          element.scrollTop = element.scrollTop;\n          element.style.display = '';\n        },\n        setup: {\n          cache: function () {\n            module.cache = {\n              width: $module.outerWidth(),\n              height: $module.outerHeight(),\n              rtl: $module.css('direction') == 'rtl'\n            };\n          },\n          layout: function () {\n            if ($context.children(selector.pusher).length === 0) {\n              module.debug('Adding wrapper element for sidebar');\n              module.error(error.pusher);\n              $pusher = $('<div class=\"pusher\" />');\n              $context.children().not(selector.omitted).not($sidebars).wrapAll($pusher);\n              module.refresh();\n            }\n\n            if ($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {\n              module.debug('Moved sidebar to correct parent element');\n              module.error(error.movedSidebar, element);\n              $module.detach().prependTo($context);\n              module.refresh();\n            }\n\n            module.clear.cache();\n            module.set.pushable();\n            module.set.direction();\n          }\n        },\n        attachEvents: function (selector, event) {\n          var $toggle = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($toggle.length > 0) {\n            module.debug('Attaching sidebar events to element', selector, event);\n            $toggle.on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound, selector);\n          }\n        },\n        show: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.hidden()) {\n            module.refreshSidebars();\n\n            if (settings.overlay) {\n              module.error(error.overlay);\n              settings.transition = 'overlay';\n            }\n\n            module.refresh();\n\n            if (module.othersActive()) {\n              module.debug('Other sidebars currently visible');\n\n              if (settings.exclusive) {\n                // if not overlay queue animation after hide\n                if (settings.transition != 'overlay') {\n                  module.hideOthers(module.show);\n                  return;\n                } else {\n                  module.hideOthers();\n                }\n              } else {\n                settings.transition = 'overlay';\n              }\n            }\n\n            module.pushPage(function () {\n              callback.call(element);\n              settings.onShow.call(element);\n            });\n            settings.onChange.call(element);\n            settings.onVisible.call(element);\n          } else {\n            module.debug('Sidebar is already visible');\n          }\n        },\n        hide: function (callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.visible() || module.is.animating()) {\n            module.debug('Hiding sidebar', callback);\n            module.refreshSidebars();\n            module.pullPage(function () {\n              callback.call(element);\n              settings.onHidden.call(element);\n            });\n            settings.onChange.call(element);\n            settings.onHide.call(element);\n          }\n        },\n        othersAnimating: function () {\n          return $sidebars.not($module).filter('.' + className.animating).length > 0;\n        },\n        othersVisible: function () {\n          return $sidebars.not($module).filter('.' + className.visible).length > 0;\n        },\n        othersActive: function () {\n          return module.othersVisible() || module.othersAnimating();\n        },\n        hideOthers: function (callback) {\n          var $otherSidebars = $sidebars.not($module).filter('.' + className.visible),\n              sidebarCount = $otherSidebars.length,\n              callbackCount = 0;\n\n          callback = callback || function () {};\n\n          $otherSidebars.sidebar('hide', function () {\n            callbackCount++;\n\n            if (callbackCount == sidebarCount) {\n              callback();\n            }\n          });\n        },\n        toggle: function () {\n          module.verbose('Determining toggled direction');\n\n          if (module.is.hidden()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        pushPage: function (callback) {\n          var transition = module.get.transition(),\n              $transition = transition === 'overlay' || module.othersActive() ? $module : $pusher,\n              animate,\n              dim,\n              transitionEnd;\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (settings.transition == 'scale down') {\n            module.scrollToTop();\n          }\n\n          module.set.transition(transition);\n          module.repaint();\n\n          animate = function () {\n            module.bind.clickaway();\n            module.add.inlineCSS();\n            module.set.animating();\n            module.set.visible();\n          };\n\n          dim = function () {\n            module.set.dimmed();\n          };\n\n          transitionEnd = function (event) {\n            if (event.target == $transition[0]) {\n              $transition.off(transitionEvent + elementNamespace, transitionEnd);\n              module.remove.animating();\n              module.bind.scrollLock();\n              callback.call(element);\n            }\n          };\n\n          $transition.off(transitionEvent + elementNamespace);\n          $transition.on(transitionEvent + elementNamespace, transitionEnd);\n          requestAnimationFrame(animate);\n\n          if (settings.dimPage && !module.othersVisible()) {\n            requestAnimationFrame(dim);\n          }\n        },\n        pullPage: function (callback) {\n          var transition = module.get.transition(),\n              $transition = transition == 'overlay' || module.othersActive() ? $module : $pusher,\n              animate,\n              transitionEnd;\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.verbose('Removing context push state', module.get.direction());\n          module.unbind.clickaway();\n          module.unbind.scrollLock();\n\n          animate = function () {\n            module.set.transition(transition);\n            module.set.animating();\n            module.remove.visible();\n\n            if (settings.dimPage && !module.othersVisible()) {\n              $pusher.removeClass(className.dimmed);\n            }\n          };\n\n          transitionEnd = function (event) {\n            if (event.target == $transition[0]) {\n              $transition.off(transitionEvent + elementNamespace, transitionEnd);\n              module.remove.animating();\n              module.remove.transition();\n              module.remove.inlineCSS();\n\n              if (transition == 'scale down' || settings.returnScroll && module.is.mobile()) {\n                module.scrollBack();\n              }\n\n              callback.call(element);\n            }\n          };\n\n          $transition.off(transitionEvent + elementNamespace);\n          $transition.on(transitionEvent + elementNamespace, transitionEnd);\n          requestAnimationFrame(animate);\n        },\n        scrollToTop: function () {\n          module.verbose('Scrolling to top of page to avoid animation issues');\n          currentScroll = $(window).scrollTop();\n          $module.scrollTop(0);\n          window.scrollTo(0, 0);\n        },\n        scrollBack: function () {\n          module.verbose('Scrolling back to original page position');\n          window.scrollTo(0, currentScroll);\n        },\n        clear: {\n          cache: function () {\n            module.verbose('Clearing cached dimensions');\n            module.cache = {};\n          }\n        },\n        set: {\n          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios\n          // (This is no longer necessary in latest iOS)\n          ios: function () {\n            $html.addClass(className.ios);\n          },\n          // container\n          pushed: function () {\n            $context.addClass(className.pushed);\n          },\n          pushable: function () {\n            $context.addClass(className.pushable);\n          },\n          // pusher\n          dimmed: function () {\n            $pusher.addClass(className.dimmed);\n          },\n          // sidebar\n          active: function () {\n            $module.addClass(className.active);\n          },\n          animating: function () {\n            $module.addClass(className.animating);\n          },\n          transition: function (transition) {\n            transition = transition || module.get.transition();\n            $module.addClass(transition);\n          },\n          direction: function (direction) {\n            direction = direction || module.get.direction();\n            $module.addClass(className[direction]);\n          },\n          visible: function () {\n            $module.addClass(className.visible);\n          },\n          overlay: function () {\n            $module.addClass(className.overlay);\n          }\n        },\n        remove: {\n          inlineCSS: function () {\n            module.debug('Removing inline css styles', $style);\n\n            if ($style && $style.length > 0) {\n              $style.remove();\n            }\n          },\n          // ios scroll on html not document\n          ios: function () {\n            $html.removeClass(className.ios);\n          },\n          // context\n          pushed: function () {\n            $context.removeClass(className.pushed);\n          },\n          pushable: function () {\n            $context.removeClass(className.pushable);\n          },\n          // sidebar\n          active: function () {\n            $module.removeClass(className.active);\n          },\n          animating: function () {\n            $module.removeClass(className.animating);\n          },\n          transition: function (transition) {\n            transition = transition || module.get.transition();\n            $module.removeClass(transition);\n          },\n          direction: function (direction) {\n            direction = direction || module.get.direction();\n            $module.removeClass(className[direction]);\n          },\n          visible: function () {\n            $module.removeClass(className.visible);\n          },\n          overlay: function () {\n            $module.removeClass(className.overlay);\n          }\n        },\n        get: {\n          direction: function () {\n            if ($module.hasClass(className.top)) {\n              return className.top;\n            } else if ($module.hasClass(className.right)) {\n              return className.right;\n            } else if ($module.hasClass(className.bottom)) {\n              return className.bottom;\n            }\n\n            return className.left;\n          },\n          transition: function () {\n            var direction = module.get.direction(),\n                transition;\n            transition = module.is.mobile() ? settings.mobileTransition == 'auto' ? settings.defaultTransition.mobile[direction] : settings.mobileTransition : settings.transition == 'auto' ? settings.defaultTransition.computer[direction] : settings.transition;\n            module.verbose('Determined transition', transition);\n            return transition;\n          },\n          transitionEvent: function () {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          }\n        },\n        is: {\n          ie: function () {\n            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,\n                isIE = 'ActiveXObject' in window;\n            return isIE11 || isIE;\n          },\n          ios: function () {\n            var userAgent = navigator.userAgent,\n                isIOS = userAgent.match(regExp.ios),\n                isMobileChrome = userAgent.match(regExp.mobileChrome);\n\n            if (isIOS && !isMobileChrome) {\n              module.verbose('Browser was found to be iOS', userAgent);\n              return true;\n            } else {\n              return false;\n            }\n          },\n          mobile: function () {\n            var userAgent = navigator.userAgent,\n                isMobile = userAgent.match(regExp.mobile);\n\n            if (isMobile) {\n              module.verbose('Browser was found to be mobile', userAgent);\n              return true;\n            } else {\n              module.verbose('Browser is not mobile, using regular transition', userAgent);\n              return false;\n            }\n          },\n          hidden: function () {\n            return !module.is.visible();\n          },\n          visible: function () {\n            return $module.hasClass(className.visible);\n          },\n          // alias\n          open: function () {\n            return module.is.visible();\n          },\n          closed: function () {\n            return module.is.hidden();\n          },\n          vertical: function () {\n            return $module.hasClass(className.top);\n          },\n          animating: function () {\n            return $context.hasClass(className.animating);\n          },\n          rtl: function () {\n            if (module.cache.rtl === undefined) {\n              module.cache.rtl = $module.css('direction') == 'rtl';\n            }\n\n            return module.cache.rtl;\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          module.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.sidebar.settings = {\n    name: 'Sidebar',\n    namespace: 'sidebar',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    transition: 'auto',\n    mobileTransition: 'auto',\n    defaultTransition: {\n      computer: {\n        left: 'uncover',\n        right: 'uncover',\n        top: 'overlay',\n        bottom: 'overlay'\n      },\n      mobile: {\n        left: 'uncover',\n        right: 'uncover',\n        top: 'overlay',\n        bottom: 'overlay'\n      }\n    },\n    context: 'body',\n    exclusive: false,\n    closable: true,\n    dimPage: true,\n    scrollLock: false,\n    returnScroll: false,\n    delaySetup: false,\n    duration: 500,\n    onChange: function () {},\n    onShow: function () {},\n    onHide: function () {},\n    onHidden: function () {},\n    onVisible: function () {},\n    className: {\n      active: 'active',\n      animating: 'animating',\n      dimmed: 'dimmed',\n      ios: 'ios',\n      pushable: 'pushable',\n      pushed: 'pushed',\n      right: 'right',\n      top: 'top',\n      left: 'left',\n      bottom: 'bottom',\n      visible: 'visible'\n    },\n    selector: {\n      fixed: '.fixed',\n      omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',\n      pusher: '.pusher',\n      sidebar: '.ui.sidebar'\n    },\n    regExp: {\n      ios: /(iPad|iPhone|iPod)/g,\n      mobileChrome: /(CriOS)/g,\n      mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g\n    },\n    error: {\n      method: 'The method you called is not defined.',\n      pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',\n      movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',\n      overlay: 'The overlay setting is no longer supported, use animation: overlay',\n      notFound: 'There were no elements that matched the specified selector'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Sticky\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.sticky = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sticky.settings, parameters) : $.extend({}, $.fn.sticky.settings),\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $window = $(window),\n          $scroll = $(settings.scrollContext),\n          $container,\n          $context,\n          selector = $module.selector || '',\n          instance = $module.data(moduleNamespace),\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      },\n          element = this,\n          documentObserver,\n          observer,\n          module;\n\n      module = {\n        initialize: function () {\n          module.determineContainer();\n          module.determineContext();\n          module.verbose('Initializing sticky', settings, $container);\n          module.save.positions();\n          module.checkErrors();\n          module.bind.events();\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous instance');\n          module.reset();\n\n          if (documentObserver) {\n            documentObserver.disconnect();\n          }\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);\n          $scroll.off('scrollchange' + eventNamespace, module.event.scrollchange);\n          $module.removeData(moduleNamespace);\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            documentObserver = new MutationObserver(module.event.documentChanged);\n            observer = new MutationObserver(module.event.changed);\n            documentObserver.observe(document, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe($context[0], {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        determineContainer: function () {\n          if (settings.container) {\n            $container = $(settings.container);\n          } else {\n            $container = $module.offsetParent();\n          }\n        },\n        determineContext: function () {\n          if (settings.context) {\n            $context = $(settings.context);\n          } else {\n            $context = $container;\n          }\n\n          if ($context.length === 0) {\n            module.error(error.invalidContext, settings.context, $module);\n            return;\n          }\n        },\n        checkErrors: function () {\n          if (module.is.hidden()) {\n            module.error(error.visible, $module);\n          }\n\n          if (module.cache.element.height > module.cache.context.height) {\n            module.reset();\n            module.error(error.elementSize, $module);\n            return;\n          }\n        },\n        bind: {\n          events: function () {\n            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize); // pub/sub pattern\n\n            $scroll.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);\n          }\n        },\n        event: {\n          changed: function (mutations) {\n            clearTimeout(module.timer);\n            module.timer = setTimeout(function () {\n              module.verbose('DOM tree modified, updating sticky menu', mutations);\n              module.refresh();\n            }, 100);\n          },\n          documentChanged: function (mutations) {\n            [].forEach.call(mutations, function (mutation) {\n              if (mutation.removedNodes) {\n                [].forEach.call(mutation.removedNodes, function (node) {\n                  if (node == element || $(node).find(element).length > 0) {\n                    module.debug('Element removed from DOM, tearing down events');\n                    module.destroy();\n                  }\n                });\n              }\n            });\n          },\n          load: function () {\n            module.verbose('Page contents finished loading');\n            requestAnimationFrame(module.refresh);\n          },\n          resize: function () {\n            module.verbose('Window resized');\n            requestAnimationFrame(module.refresh);\n          },\n          scroll: function () {\n            requestAnimationFrame(function () {\n              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop());\n            });\n          },\n          scrollchange: function (event, scrollPosition) {\n            module.stick(scrollPosition);\n            settings.onScroll.call(element);\n          }\n        },\n        refresh: function (hardRefresh) {\n          module.reset();\n\n          if (!settings.context) {\n            module.determineContext();\n          }\n\n          if (hardRefresh) {\n            module.determineContainer();\n          }\n\n          module.save.positions();\n          module.stick();\n          settings.onReposition.call(element);\n        },\n        supports: {\n          sticky: function () {\n            var $element = $('<div/>'),\n                element = $element[0];\n            $element.addClass(className.supported);\n            return $element.css('position').match('sticky');\n          }\n        },\n        save: {\n          lastScroll: function (scroll) {\n            module.lastScroll = scroll;\n          },\n          elementScroll: function (scroll) {\n            module.elementScroll = scroll;\n          },\n          positions: function () {\n            var scrollContext = {\n              height: $scroll.height()\n            },\n                element = {\n              margin: {\n                top: parseInt($module.css('margin-top'), 10),\n                bottom: parseInt($module.css('margin-bottom'), 10)\n              },\n              offset: $module.offset(),\n              width: $module.outerWidth(),\n              height: $module.outerHeight()\n            },\n                context = {\n              offset: $context.offset(),\n              height: $context.outerHeight()\n            },\n                container = {\n              height: $container.outerHeight()\n            };\n\n            if (!module.is.standardScroll()) {\n              module.debug('Non-standard scroll. Removing scroll offset from element offset');\n              scrollContext.top = $scroll.scrollTop();\n              scrollContext.left = $scroll.scrollLeft();\n              element.offset.top += scrollContext.top;\n              context.offset.top += scrollContext.top;\n              element.offset.left += scrollContext.left;\n              context.offset.left += scrollContext.left;\n            }\n\n            module.cache = {\n              fits: element.height + settings.offset <= scrollContext.height,\n              sameHeight: element.height == context.height,\n              scrollContext: {\n                height: scrollContext.height\n              },\n              element: {\n                margin: element.margin,\n                top: element.offset.top - element.margin.top,\n                left: element.offset.left,\n                width: element.width,\n                height: element.height,\n                bottom: element.offset.top + element.height\n              },\n              context: {\n                top: context.offset.top,\n                height: context.height,\n                bottom: context.offset.top + context.height\n              }\n            };\n            module.set.containerSize();\n            module.stick();\n            module.debug('Caching element positions', module.cache);\n          }\n        },\n        get: {\n          direction: function (scroll) {\n            var direction = 'down';\n            scroll = scroll || $scroll.scrollTop();\n\n            if (module.lastScroll !== undefined) {\n              if (module.lastScroll < scroll) {\n                direction = 'down';\n              } else if (module.lastScroll > scroll) {\n                direction = 'up';\n              }\n            }\n\n            return direction;\n          },\n          scrollChange: function (scroll) {\n            scroll = scroll || $scroll.scrollTop();\n            return module.lastScroll ? scroll - module.lastScroll : 0;\n          },\n          currentElementScroll: function () {\n            if (module.elementScroll) {\n              return module.elementScroll;\n            }\n\n            return module.is.top() ? Math.abs(parseInt($module.css('top'), 10)) || 0 : Math.abs(parseInt($module.css('bottom'), 10)) || 0;\n          },\n          elementScroll: function (scroll) {\n            scroll = scroll || $scroll.scrollTop();\n            var element = module.cache.element,\n                scrollContext = module.cache.scrollContext,\n                delta = module.get.scrollChange(scroll),\n                maxScroll = element.height - scrollContext.height + settings.offset,\n                elementScroll = module.get.currentElementScroll(),\n                possibleScroll = elementScroll + delta;\n\n            if (module.cache.fits || possibleScroll < 0) {\n              elementScroll = 0;\n            } else if (possibleScroll > maxScroll) {\n              elementScroll = maxScroll;\n            } else {\n              elementScroll = possibleScroll;\n            }\n\n            return elementScroll;\n          }\n        },\n        remove: {\n          lastScroll: function () {\n            delete module.lastScroll;\n          },\n          elementScroll: function (scroll) {\n            delete module.elementScroll;\n          },\n          minimumSize: function () {\n            $container.css('min-height', '');\n          },\n          offset: function () {\n            $module.css('margin-top', '');\n          }\n        },\n        set: {\n          offset: function () {\n            module.verbose('Setting offset on element', settings.offset);\n            $module.css('margin-top', settings.offset);\n          },\n          containerSize: function () {\n            var tagName = $container.get(0).tagName;\n\n            if (tagName === 'HTML' || tagName == 'body') {\n              // this can trigger for too many reasons\n              //module.error(error.container, tagName, $module);\n              module.determineContainer();\n            } else {\n              if (Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {\n                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);\n                $container.css({\n                  height: module.cache.context.height\n                });\n              }\n            }\n          },\n          minimumSize: function () {\n            var element = module.cache.element;\n            $container.css('min-height', element.height);\n          },\n          scroll: function (scroll) {\n            module.debug('Setting scroll on element', scroll);\n\n            if (module.elementScroll == scroll) {\n              return;\n            }\n\n            if (module.is.top()) {\n              $module.css('bottom', '').css('top', -scroll);\n            }\n\n            if (module.is.bottom()) {\n              $module.css('top', '').css('bottom', scroll);\n            }\n          },\n          size: function () {\n            if (module.cache.element.height !== 0 && module.cache.element.width !== 0) {\n              element.style.setProperty('width', module.cache.element.width + 'px', 'important');\n              element.style.setProperty('height', module.cache.element.height + 'px', 'important');\n            }\n          }\n        },\n        is: {\n          standardScroll: function () {\n            return $scroll[0] == window;\n          },\n          top: function () {\n            return $module.hasClass(className.top);\n          },\n          bottom: function () {\n            return $module.hasClass(className.bottom);\n          },\n          initialPosition: function () {\n            return !module.is.fixed() && !module.is.bound();\n          },\n          hidden: function () {\n            return !$module.is(':visible');\n          },\n          bound: function () {\n            return $module.hasClass(className.bound);\n          },\n          fixed: function () {\n            return $module.hasClass(className.fixed);\n          }\n        },\n        stick: function (scroll) {\n          var cachedPosition = scroll || $scroll.scrollTop(),\n              cache = module.cache,\n              fits = cache.fits,\n              sameHeight = cache.sameHeight,\n              element = cache.element,\n              scrollContext = cache.scrollContext,\n              context = cache.context,\n              offset = module.is.bottom() && settings.pushing ? settings.bottomOffset : settings.offset,\n              scroll = {\n            top: cachedPosition + offset,\n            bottom: cachedPosition + offset + scrollContext.height\n          },\n              direction = module.get.direction(scroll.top),\n              elementScroll = fits ? 0 : module.get.elementScroll(scroll.top),\n              // shorthand\n          doesntFit = !fits,\n              elementVisible = element.height !== 0;\n\n          if (elementVisible && !sameHeight) {\n            if (module.is.initialPosition()) {\n              if (scroll.top >= context.bottom) {\n                module.debug('Initial element position is bottom of container');\n                module.bindBottom();\n              } else if (scroll.top > element.top) {\n                if (element.height + scroll.top - elementScroll >= context.bottom) {\n                  module.debug('Initial element position is bottom of container');\n                  module.bindBottom();\n                } else {\n                  module.debug('Initial element position is fixed');\n                  module.fixTop();\n                }\n              }\n            } else if (module.is.fixed()) {\n              // currently fixed top\n              if (module.is.top()) {\n                if (scroll.top <= element.top) {\n                  module.debug('Fixed element reached top of container');\n                  module.setInitialPosition();\n                } else if (element.height + scroll.top - elementScroll >= context.bottom) {\n                  module.debug('Fixed element reached bottom of container');\n                  module.bindBottom();\n                } // scroll element if larger than screen\n                else if (doesntFit) {\n                    module.set.scroll(elementScroll);\n                    module.save.lastScroll(scroll.top);\n                    module.save.elementScroll(elementScroll);\n                  }\n              } // currently fixed bottom\n              else if (module.is.bottom()) {\n                  // top edge\n                  if (scroll.bottom - element.height <= element.top) {\n                    module.debug('Bottom fixed rail has reached top of container');\n                    module.setInitialPosition();\n                  } // bottom edge\n                  else if (scroll.bottom >= context.bottom) {\n                      module.debug('Bottom fixed rail has reached bottom of container');\n                      module.bindBottom();\n                    } // scroll element if larger than screen\n                    else if (doesntFit) {\n                        module.set.scroll(elementScroll);\n                        module.save.lastScroll(scroll.top);\n                        module.save.elementScroll(elementScroll);\n                      }\n                }\n            } else if (module.is.bottom()) {\n              if (scroll.top <= element.top) {\n                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');\n                module.setInitialPosition();\n              } else {\n                if (settings.pushing) {\n                  if (module.is.bound() && scroll.bottom <= context.bottom) {\n                    module.debug('Fixing bottom attached element to bottom of browser.');\n                    module.fixBottom();\n                  }\n                } else {\n                  if (module.is.bound() && scroll.top <= context.bottom - element.height) {\n                    module.debug('Fixing bottom attached element to top of browser.');\n                    module.fixTop();\n                  }\n                }\n              }\n            }\n          }\n        },\n        bindTop: function () {\n          module.debug('Binding element to top of parent container');\n          module.remove.offset();\n          $module.css({\n            left: '',\n            top: '',\n            marginBottom: ''\n          }).removeClass(className.fixed).removeClass(className.bottom).addClass(className.bound).addClass(className.top);\n          settings.onTop.call(element);\n          settings.onUnstick.call(element);\n        },\n        bindBottom: function () {\n          module.debug('Binding element to bottom of parent container');\n          module.remove.offset();\n          $module.css({\n            left: '',\n            top: ''\n          }).removeClass(className.fixed).removeClass(className.top).addClass(className.bound).addClass(className.bottom);\n          settings.onBottom.call(element);\n          settings.onUnstick.call(element);\n        },\n        setInitialPosition: function () {\n          module.debug('Returning to initial position');\n          module.unfix();\n          module.unbind();\n        },\n        fixTop: function () {\n          module.debug('Fixing element to top of page');\n\n          if (settings.setSize) {\n            module.set.size();\n          }\n\n          module.set.minimumSize();\n          module.set.offset();\n          $module.css({\n            left: module.cache.element.left,\n            bottom: '',\n            marginBottom: ''\n          }).removeClass(className.bound).removeClass(className.bottom).addClass(className.fixed).addClass(className.top);\n          settings.onStick.call(element);\n        },\n        fixBottom: function () {\n          module.debug('Sticking element to bottom of page');\n\n          if (settings.setSize) {\n            module.set.size();\n          }\n\n          module.set.minimumSize();\n          module.set.offset();\n          $module.css({\n            left: module.cache.element.left,\n            bottom: '',\n            marginBottom: ''\n          }).removeClass(className.bound).removeClass(className.top).addClass(className.fixed).addClass(className.bottom);\n          settings.onStick.call(element);\n        },\n        unbind: function () {\n          if (module.is.bound()) {\n            module.debug('Removing container bound position on element');\n            module.remove.offset();\n            $module.removeClass(className.bound).removeClass(className.top).removeClass(className.bottom);\n          }\n        },\n        unfix: function () {\n          if (module.is.fixed()) {\n            module.debug('Removing fixed position on element');\n            module.remove.minimumSize();\n            module.remove.offset();\n            $module.removeClass(className.fixed).removeClass(className.top).removeClass(className.bottom);\n            settings.onUnstick.call(element);\n          }\n        },\n        reset: function () {\n          module.debug('Resetting elements position');\n          module.unbind();\n          module.unfix();\n          module.resetCSS();\n          module.remove.offset();\n          module.remove.lastScroll();\n        },\n        resetCSS: function () {\n          $module.css({\n            width: '',\n            height: ''\n          });\n          $container.css({\n            height: ''\n          });\n        },\n        setting: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 0);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.sticky.settings = {\n    name: 'Sticky',\n    namespace: 'sticky',\n    silent: false,\n    debug: false,\n    verbose: true,\n    performance: true,\n    // whether to stick in the opposite direction on scroll up\n    pushing: false,\n    context: false,\n    container: false,\n    // Context to watch scroll events\n    scrollContext: window,\n    // Offset to adjust scroll\n    offset: 0,\n    // Offset to adjust scroll when attached to bottom of screen\n    bottomOffset: 0,\n    // will only set container height if difference between context and container is larger than this number\n    jitter: 5,\n    // set width of sticky element when it is fixed to page (used to make sure 100% width is maintained if no fixed size set)\n    setSize: true,\n    // Whether to automatically observe changes with Mutation Observers\n    observeChanges: false,\n    // Called when position is recalculated\n    onReposition: function () {},\n    // Called on each scroll\n    onScroll: function () {},\n    // Called when element is stuck to viewport\n    onStick: function () {},\n    // Called when element is unstuck from viewport\n    onUnstick: function () {},\n    // Called when element reaches top of context\n    onTop: function () {},\n    // Called when element reaches bottom of context\n    onBottom: function () {},\n    error: {\n      container: 'Sticky element must be inside a relative container',\n      visible: 'Element is hidden, you must call refresh after element becomes visible. Use silent setting to surpress this warning in production.',\n      method: 'The method you called is not defined.',\n      invalidContext: 'Context specified does not exist',\n      elementSize: 'Sticky element is larger than its container, cannot create sticky.'\n    },\n    className: {\n      bound: 'bound',\n      fixed: 'fixed',\n      supported: 'native',\n      top: 'top',\n      bottom: 'bottom'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Tab\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.tab = function (parameters) {\n    var // use window context if none specified\n    $allModules = $.isFunction(this) ? $(window) : $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        initializedHistory = false,\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.tab.settings, parameters) : $.extend({}, $.fn.tab.settings),\n          className = settings.className,\n          metadata = settings.metadata,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + settings.namespace,\n          moduleNamespace = 'module-' + settings.namespace,\n          $module = $(this),\n          $context,\n          $tabs,\n          cache = {},\n          firstLoad = true,\n          recursionDepth = 0,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          activeTabPath,\n          parameterArray,\n          module,\n          historyEvent;\n      module = {\n        initialize: function () {\n          module.debug('Initializing tab menu item', $module);\n          module.fix.callbacks();\n          module.determineTabs();\n          module.debug('Determining tabs', settings.context, $tabs); // set up automatic routing\n\n          if (settings.auto) {\n            module.set.auto();\n          }\n\n          module.bind.events();\n\n          if (settings.history && !initializedHistory) {\n            module.initializeHistory();\n            initializedHistory = true;\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function () {\n          module.debug('Destroying tabs', $module);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        bind: {\n          events: function () {\n            // if using $.tab don't add events\n            if (!$.isWindow(element)) {\n              module.debug('Attaching tab activation events to element', $module);\n              $module.on('click' + eventNamespace, module.event.click);\n            }\n          }\n        },\n        determineTabs: function () {\n          var $reference; // determine tab context\n\n          if (settings.context === 'parent') {\n            if ($module.closest(selector.ui).length > 0) {\n              $reference = $module.closest(selector.ui);\n              module.verbose('Using closest UI element as parent', $reference);\n            } else {\n              $reference = $module;\n            }\n\n            $context = $reference.parent();\n            module.verbose('Determined parent element for creating context', $context);\n          } else if (settings.context) {\n            $context = $(settings.context);\n            module.verbose('Using selector for tab context', settings.context, $context);\n          } else {\n            $context = $('body');\n          } // find tabs\n\n\n          if (settings.childrenOnly) {\n            $tabs = $context.children(selector.tabs);\n            module.debug('Searching tab context children for tabs', $context, $tabs);\n          } else {\n            $tabs = $context.find(selector.tabs);\n            module.debug('Searching tab context for tabs', $context, $tabs);\n          }\n        },\n        fix: {\n          callbacks: function () {\n            if ($.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit)) {\n              if (parameters.onTabLoad) {\n                parameters.onLoad = parameters.onTabLoad;\n                delete parameters.onTabLoad;\n                module.error(error.legacyLoad, parameters.onLoad);\n              }\n\n              if (parameters.onTabInit) {\n                parameters.onFirstLoad = parameters.onTabInit;\n                delete parameters.onTabInit;\n                module.error(error.legacyInit, parameters.onFirstLoad);\n              }\n\n              settings = $.extend(true, {}, $.fn.tab.settings, parameters);\n            }\n          }\n        },\n        initializeHistory: function () {\n          module.debug('Initializing page state');\n\n          if ($.address === undefined) {\n            module.error(error.state);\n            return false;\n          } else {\n            if (settings.historyType == 'state') {\n              module.debug('Using HTML5 to manage state');\n\n              if (settings.path !== false) {\n                $.address.history(true).state(settings.path);\n              } else {\n                module.error(error.path);\n                return false;\n              }\n            }\n\n            $.address.bind('change', module.event.history.change);\n          }\n        },\n        event: {\n          click: function (event) {\n            var tabPath = $(this).data(metadata.tab);\n\n            if (tabPath !== undefined) {\n              if (settings.history) {\n                module.verbose('Updating page state', event);\n                $.address.value(tabPath);\n              } else {\n                module.verbose('Changing tab', event);\n                module.changeTab(tabPath);\n              }\n\n              event.preventDefault();\n            } else {\n              module.debug('No tab specified');\n            }\n          },\n          history: {\n            change: function (event) {\n              var tabPath = event.pathNames.join('/') || module.get.initialPath(),\n                  pageTitle = settings.templates.determineTitle(tabPath) || false;\n              module.performance.display();\n              module.debug('History change event', tabPath, event);\n              historyEvent = event;\n\n              if (tabPath !== undefined) {\n                module.changeTab(tabPath);\n              }\n\n              if (pageTitle) {\n                $.address.title(pageTitle);\n              }\n            }\n          }\n        },\n        refresh: function () {\n          if (activeTabPath) {\n            module.debug('Refreshing tab', activeTabPath);\n            module.changeTab(activeTabPath);\n          }\n        },\n        cache: {\n          read: function (cacheKey) {\n            return cacheKey !== undefined ? cache[cacheKey] : false;\n          },\n          add: function (cacheKey, content) {\n            cacheKey = cacheKey || activeTabPath;\n            module.debug('Adding cached content for', cacheKey);\n            cache[cacheKey] = content;\n          },\n          remove: function (cacheKey) {\n            cacheKey = cacheKey || activeTabPath;\n            module.debug('Removing cached content for', cacheKey);\n            delete cache[cacheKey];\n          }\n        },\n        set: {\n          auto: function () {\n            var url = typeof settings.path == 'string' ? settings.path.replace(/\\/$/, '') + '/{$tab}' : '/{$tab}';\n            module.verbose('Setting up automatic tab retrieval from server', url);\n\n            if ($.isPlainObject(settings.apiSettings)) {\n              settings.apiSettings.url = url;\n            } else {\n              settings.apiSettings = {\n                url: url\n              };\n            }\n          },\n          loading: function (tabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                isLoading = $tab.hasClass(className.loading);\n\n            if (!isLoading) {\n              module.verbose('Setting loading state for', $tab);\n              $tab.addClass(className.loading).siblings($tabs).removeClass(className.active + ' ' + className.loading);\n\n              if ($tab.length > 0) {\n                settings.onRequest.call($tab[0], tabPath);\n              }\n            }\n          },\n          state: function (state) {\n            $.address.value(state);\n          }\n        },\n        changeTab: function (tabPath) {\n          var pushStateAvailable = window.history && window.history.pushState,\n              shouldIgnoreLoad = pushStateAvailable && settings.ignoreFirstLoad && firstLoad,\n              remoteContent = settings.auto || $.isPlainObject(settings.apiSettings),\n              // only add default path if not remote content\n          pathArray = remoteContent && !shouldIgnoreLoad ? module.utilities.pathToArray(tabPath) : module.get.defaultPathArray(tabPath);\n          tabPath = module.utilities.arrayToPath(pathArray);\n          $.each(pathArray, function (index, tab) {\n            var currentPathArray = pathArray.slice(0, index + 1),\n                currentPath = module.utilities.arrayToPath(currentPathArray),\n                isTab = module.is.tab(currentPath),\n                isLastIndex = index + 1 == pathArray.length,\n                $tab = module.get.tabElement(currentPath),\n                $anchor,\n                nextPathArray,\n                nextPath,\n                isLastTab;\n            module.verbose('Looking for tab', tab);\n\n            if (isTab) {\n              module.verbose('Tab was found', tab); // scope up\n\n              activeTabPath = currentPath;\n              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);\n\n              if (isLastIndex) {\n                isLastTab = true;\n              } else {\n                nextPathArray = pathArray.slice(0, index + 2);\n                nextPath = module.utilities.arrayToPath(nextPathArray);\n                isLastTab = !module.is.tab(nextPath);\n\n                if (isLastTab) {\n                  module.verbose('Tab parameters found', nextPathArray);\n                }\n              }\n\n              if (isLastTab && remoteContent) {\n                if (!shouldIgnoreLoad) {\n                  module.activate.navigation(currentPath);\n                  module.fetch.content(currentPath, tabPath);\n                } else {\n                  module.debug('Ignoring remote content on first tab load', currentPath);\n                  firstLoad = false;\n                  module.cache.add(tabPath, $tab.html());\n                  module.activate.all(currentPath);\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                return false;\n              } else {\n                module.debug('Opened local tab', currentPath);\n                module.activate.all(currentPath);\n\n                if (!module.cache.read(currentPath)) {\n                  module.cache.add(currentPath, true);\n                  module.debug('First time tab loaded calling tab init');\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n              }\n            } else if (tabPath.search('/') == -1 && tabPath !== '') {\n              // look for in page anchor\n              $anchor = $('#' + tabPath + ', a[name=\"' + tabPath + '\"]');\n              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);\n              $tab = module.get.tabElement(currentPath); // if anchor exists use parent tab\n\n              if ($anchor && $anchor.length > 0 && currentPath) {\n                module.debug('Anchor link used, opening parent tab', $tab, $anchor);\n\n                if (!$tab.hasClass(className.active)) {\n                  setTimeout(function () {\n                    module.scrollTo($anchor);\n                  }, 0);\n                }\n\n                module.activate.all(currentPath);\n\n                if (!module.cache.read(currentPath)) {\n                  module.cache.add(currentPath, true);\n                  module.debug('First time tab loaded calling tab init');\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                return false;\n              }\n            } else {\n              module.error(error.missingTab, $module, $context, currentPath);\n              return false;\n            }\n          });\n        },\n        scrollTo: function ($element) {\n          var scrollOffset = $element && $element.length > 0 ? $element.offset().top : false;\n\n          if (scrollOffset !== false) {\n            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);\n            $(document).scrollTop(scrollOffset);\n          }\n        },\n        update: {\n          content: function (tabPath, html, evaluateScripts) {\n            var $tab = module.get.tabElement(tabPath),\n                tab = $tab[0];\n            evaluateScripts = evaluateScripts !== undefined ? evaluateScripts : settings.evaluateScripts;\n\n            if (typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && typeof html !== 'string') {\n              $tab.empty().append($(html).clone(true));\n            } else {\n              if (evaluateScripts) {\n                module.debug('Updating HTML and evaluating inline scripts', tabPath, html);\n                $tab.html(html);\n              } else {\n                module.debug('Updating HTML', tabPath, html);\n                tab.innerHTML = html;\n              }\n            }\n          }\n        },\n        fetch: {\n          content: function (tabPath, fullTabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                apiSettings = {\n              dataType: 'html',\n              encodeParameters: false,\n              on: 'now',\n              cache: settings.alwaysRefresh,\n              headers: {\n                'X-Remote': true\n              },\n              onSuccess: function (response) {\n                if (settings.cacheType == 'response') {\n                  module.cache.add(fullTabPath, response);\n                }\n\n                module.update.content(tabPath, response);\n\n                if (tabPath == activeTabPath) {\n                  module.debug('Content loaded', tabPath);\n                  module.activate.tab(tabPath);\n                } else {\n                  module.debug('Content loaded in background', tabPath);\n                }\n\n                settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n                settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n\n                if (settings.loadOnce) {\n                  module.cache.add(fullTabPath, true);\n                } else if (typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && $tab.children().length > 0) {\n                  setTimeout(function () {\n                    var $clone = $tab.children().clone(true);\n                    $clone = $clone.not('script');\n                    module.cache.add(fullTabPath, $clone);\n                  }, 0);\n                } else {\n                  module.cache.add(fullTabPath, $tab.html());\n                }\n              },\n              urlData: {\n                tab: fullTabPath\n              }\n            },\n                request = $tab.api('get request') || false,\n                existingRequest = request && request.state() === 'pending',\n                requestSettings,\n                cachedContent;\n            fullTabPath = fullTabPath || tabPath;\n            cachedContent = module.cache.read(fullTabPath);\n\n            if (settings.cache && cachedContent) {\n              module.activate.tab(tabPath);\n              module.debug('Adding cached content', fullTabPath);\n\n              if (!settings.loadOnce) {\n                if (settings.evaluateScripts == 'once') {\n                  module.update.content(tabPath, cachedContent, false);\n                } else {\n                  module.update.content(tabPath, cachedContent);\n                }\n              }\n\n              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n            } else if (existingRequest) {\n              module.set.loading(tabPath);\n              module.debug('Content is already loading', fullTabPath);\n            } else if ($.api !== undefined) {\n              requestSettings = $.extend(true, {}, settings.apiSettings, apiSettings);\n              module.debug('Retrieving remote content', fullTabPath, requestSettings);\n              module.set.loading(tabPath);\n              $tab.api(requestSettings);\n            } else {\n              module.error(error.api);\n            }\n          }\n        },\n        activate: {\n          all: function (tabPath) {\n            module.activate.tab(tabPath);\n            module.activate.navigation(tabPath);\n          },\n          tab: function (tabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                $deactiveTabs = settings.deactivate == 'siblings' ? $tab.siblings($tabs) : $tabs.not($tab),\n                isActive = $tab.hasClass(className.active);\n            module.verbose('Showing tab content for', $tab);\n\n            if (!isActive) {\n              $tab.addClass(className.active);\n              $deactiveTabs.removeClass(className.active + ' ' + className.loading);\n\n              if ($tab.length > 0) {\n                settings.onVisible.call($tab[0], tabPath);\n              }\n            }\n          },\n          navigation: function (tabPath) {\n            var $navigation = module.get.navElement(tabPath),\n                $deactiveNavigation = settings.deactivate == 'siblings' ? $navigation.siblings($allModules) : $allModules.not($navigation),\n                isActive = $navigation.hasClass(className.active);\n            module.verbose('Activating tab navigation for', $navigation, tabPath);\n\n            if (!isActive) {\n              $navigation.addClass(className.active);\n              $deactiveNavigation.removeClass(className.active + ' ' + className.loading);\n            }\n          }\n        },\n        deactivate: {\n          all: function () {\n            module.deactivate.navigation();\n            module.deactivate.tabs();\n          },\n          navigation: function () {\n            $allModules.removeClass(className.active);\n          },\n          tabs: function () {\n            $tabs.removeClass(className.active + ' ' + className.loading);\n          }\n        },\n        is: {\n          tab: function (tabName) {\n            return tabName !== undefined ? module.get.tabElement(tabName).length > 0 : false;\n          }\n        },\n        get: {\n          initialPath: function () {\n            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);\n          },\n          path: function () {\n            return $.address.value();\n          },\n          // adds default tabs to tab path\n          defaultPathArray: function (tabPath) {\n            return module.utilities.pathToArray(module.get.defaultPath(tabPath));\n          },\n          defaultPath: function (tabPath) {\n            var $defaultNav = $allModules.filter('[data-' + metadata.tab + '^=\"' + tabPath + '/\"]').eq(0),\n                defaultTab = $defaultNav.data(metadata.tab) || false;\n\n            if (defaultTab) {\n              module.debug('Found default tab', defaultTab);\n\n              if (recursionDepth < settings.maxDepth) {\n                recursionDepth++;\n                return module.get.defaultPath(defaultTab);\n              }\n\n              module.error(error.recursion);\n            } else {\n              module.debug('No default tabs found for', tabPath, $tabs);\n            }\n\n            recursionDepth = 0;\n            return tabPath;\n          },\n          navElement: function (tabPath) {\n            tabPath = tabPath || activeTabPath;\n            return $allModules.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\n          },\n          tabElement: function (tabPath) {\n            var $fullPathTab, $simplePathTab, tabPathArray, lastTab;\n            tabPath = tabPath || activeTabPath;\n            tabPathArray = module.utilities.pathToArray(tabPath);\n            lastTab = module.utilities.last(tabPathArray);\n            $fullPathTab = $tabs.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\n            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '=\"' + lastTab + '\"]');\n            return $fullPathTab.length > 0 ? $fullPathTab : $simplePathTab;\n          },\n          tab: function () {\n            return activeTabPath;\n          }\n        },\n        utilities: {\n          filterArray: function (keepArray, removeArray) {\n            return $.grep(keepArray, function (keepValue) {\n              return $.inArray(keepValue, removeArray) == -1;\n            });\n          },\n          last: function (array) {\n            return $.isArray(array) ? array[array.length - 1] : false;\n          },\n          pathToArray: function (pathName) {\n            if (pathName === undefined) {\n              pathName = activeTabPath;\n            }\n\n            return typeof pathName == 'string' ? pathName.split('/') : [pathName];\n          },\n          arrayToPath: function (pathArray) {\n            return $.isArray(pathArray) ? pathArray.join('/') : false;\n          }\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  }; // shortcut for tabbed content with no defined navigation\n\n\n  $.tab = function () {\n    $(window).tab.apply(this, arguments);\n  };\n\n  $.fn.tab.settings = {\n    name: 'Tab',\n    namespace: 'tab',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    auto: false,\n    // uses pjax style endpoints fetching content from same url with remote-content headers\n    history: false,\n    // use browser history\n    historyType: 'hash',\n    // #/ or html5 state\n    path: false,\n    // base path of url\n    context: false,\n    // specify a context that tabs must appear inside\n    childrenOnly: false,\n    // use only tabs that are children of context\n    maxDepth: 25,\n    // max depth a tab can be nested\n    deactivate: 'siblings',\n    // whether tabs should deactivate sibling menu elements or all elements initialized together\n    alwaysRefresh: false,\n    // load tab content new every tab click\n    cache: true,\n    // cache the content requests to pull locally\n    loadOnce: false,\n    // Whether tab data should only be loaded once when using remote content\n    cacheType: 'response',\n    // Whether to cache exact response, or to html cache contents after scripts execute\n    ignoreFirstLoad: false,\n    // don't load remote content on first load\n    apiSettings: false,\n    // settings for api call\n    evaluateScripts: 'once',\n    // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content\n    onFirstLoad: function (tabPath, parameterArray, historyEvent) {},\n    // called first time loaded\n    onLoad: function (tabPath, parameterArray, historyEvent) {},\n    // called on every load\n    onVisible: function (tabPath, parameterArray, historyEvent) {},\n    // called every time tab visible\n    onRequest: function (tabPath, parameterArray, historyEvent) {},\n    // called ever time a tab beings loading remote content\n    templates: {\n      determineTitle: function (tabArray) {} // returns page title for path\n\n    },\n    error: {\n      api: 'You attempted to load content without API module',\n      method: 'The method you called is not defined',\n      missingTab: 'Activated tab cannot be found. Tabs are case-sensitive.',\n      noContent: 'The tab you specified is missing a content url.',\n      path: 'History enabled, but no path was specified',\n      recursion: 'Max recursive depth reached',\n      legacyInit: 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',\n      legacyLoad: 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',\n      state: 'History requires Asual\\'s Address library <https://github.com/asual/jquery-address>'\n    },\n    metadata: {\n      tab: 'tab',\n      loaded: 'loaded',\n      promise: 'promise'\n    },\n    className: {\n      loading: 'loading',\n      active: 'active'\n    },\n    selector: {\n      tabs: '.ui.tab',\n      ui: '.ui'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Transition\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.transition = function () {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        moduleArguments = arguments,\n        query = moduleArguments[0],\n        queryArguments = [].slice.call(arguments, 1),\n        methodInvoked = typeof query === 'string',\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function (index) {\n      var $module = $(this),\n          element = this,\n          // set at run time\n      settings,\n          instance,\n          error,\n          className,\n          metadata,\n          animationEnd,\n          animationName,\n          namespace,\n          moduleNamespace,\n          eventNamespace,\n          module;\n      module = {\n        initialize: function () {\n          // get full settings\n          settings = module.get.settings.apply(element, moduleArguments); // shorthand\n\n          className = settings.className;\n          error = settings.error;\n          metadata = settings.metadata; // define namespace\n\n          eventNamespace = '.' + settings.namespace;\n          moduleNamespace = 'module-' + settings.namespace;\n          instance = $module.data(moduleNamespace) || module; // get vendor specific events\n\n          animationEnd = module.get.animationEndEvent();\n\n          if (methodInvoked) {\n            methodInvoked = module.invoke(query);\n          } // method not invoked, lets run an animation\n\n\n          if (methodInvoked === false) {\n            module.verbose('Converted arguments into settings object', settings);\n\n            if (settings.interval) {\n              module.delay(settings.animate);\n            } else {\n              module.animate();\n            }\n\n            module.instantiate();\n          }\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module for', element);\n          $module.removeData(moduleNamespace);\n        },\n        refresh: function () {\n          module.verbose('Refreshing display type on next animation');\n          delete module.displayType;\n        },\n        forceRepaint: function () {\n          module.verbose('Forcing element repaint');\n          var $parentElement = $module.parent(),\n              $nextElement = $module.next();\n\n          if ($nextElement.length === 0) {\n            $module.detach().appendTo($parentElement);\n          } else {\n            $module.detach().insertBefore($nextElement);\n          }\n        },\n        repaint: function () {\n          module.verbose('Repainting element');\n          var fakeAssignment = element.offsetWidth;\n        },\n        delay: function (interval) {\n          var direction = module.get.animationDirection(),\n              shouldReverse,\n              delay;\n\n          if (!direction) {\n            direction = module.can.transition() ? module.get.direction() : 'static';\n          }\n\n          interval = interval !== undefined ? interval : settings.interval;\n          shouldReverse = settings.reverse == 'auto' && direction == className.outward;\n          delay = shouldReverse || settings.reverse == true ? ($allModules.length - index) * settings.interval : index * settings.interval;\n          module.debug('Delaying animation by', delay);\n          setTimeout(module.animate, delay);\n        },\n        animate: function (overrideSettings) {\n          settings = overrideSettings || settings;\n\n          if (!module.is.supported()) {\n            module.error(error.support);\n            return false;\n          }\n\n          module.debug('Preparing animation', settings.animation);\n\n          if (module.is.animating()) {\n            if (settings.queue) {\n              if (!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {\n                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);\n              } else {\n                module.queue(settings.animation);\n              }\n\n              return false;\n            } else if (!settings.allowRepeats && module.is.occurring()) {\n              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);\n              return false;\n            } else {\n              module.debug('New animation started, completing previous early', settings.animation);\n              instance.complete();\n            }\n          }\n\n          if (module.can.animate()) {\n            module.set.animating(settings.animation);\n          } else {\n            module.error(error.noAnimation, settings.animation, element);\n          }\n        },\n        reset: function () {\n          module.debug('Resetting animation to beginning conditions');\n          module.remove.animationCallbacks();\n          module.restore.conditions();\n          module.remove.animating();\n        },\n        queue: function (animation) {\n          module.debug('Queueing animation of', animation);\n          module.queuing = true;\n          $module.one(animationEnd + '.queue' + eventNamespace, function () {\n            module.queuing = false;\n            module.repaint();\n            module.animate.apply(this, settings);\n          });\n        },\n        complete: function (event) {\n          module.debug('Animation complete', settings.animation);\n          module.remove.completeCallback();\n          module.remove.failSafe();\n\n          if (!module.is.looping()) {\n            if (module.is.outward()) {\n              module.verbose('Animation is outward, hiding element');\n              module.restore.conditions();\n              module.hide();\n            } else if (module.is.inward()) {\n              module.verbose('Animation is outward, showing element');\n              module.restore.conditions();\n              module.show();\n            } else {\n              module.verbose('Static animation completed');\n              module.restore.conditions();\n              settings.onComplete.call(element);\n            }\n          }\n        },\n        force: {\n          visible: function () {\n            var style = $module.attr('style'),\n                userStyle = module.get.userStyle(),\n                displayType = module.get.displayType(),\n                overrideStyle = userStyle + 'display: ' + displayType + ' !important;',\n                currentDisplay = $module.css('display'),\n                emptyStyle = style === undefined || style === '';\n\n            if (currentDisplay !== displayType) {\n              module.verbose('Overriding default display to show element', displayType);\n              $module.attr('style', overrideStyle);\n            } else if (emptyStyle) {\n              $module.removeAttr('style');\n            }\n          },\n          hidden: function () {\n            var style = $module.attr('style'),\n                currentDisplay = $module.css('display'),\n                emptyStyle = style === undefined || style === '';\n\n            if (currentDisplay !== 'none' && !module.is.hidden()) {\n              module.verbose('Overriding default display to hide element');\n              $module.css('display', 'none');\n            } else if (emptyStyle) {\n              $module.removeAttr('style');\n            }\n          }\n        },\n        has: {\n          direction: function (animation) {\n            var hasDirection = false;\n            animation = animation || settings.animation;\n\n            if (typeof animation === 'string') {\n              animation = animation.split(' ');\n              $.each(animation, function (index, word) {\n                if (word === className.inward || word === className.outward) {\n                  hasDirection = true;\n                }\n              });\n            }\n\n            return hasDirection;\n          },\n          inlineDisplay: function () {\n            var style = $module.attr('style') || '';\n            return $.isArray(style.match(/display.*?;/, ''));\n          }\n        },\n        set: {\n          animating: function (animation) {\n            var animationClass, direction; // remove previous callbacks\n\n            module.remove.completeCallback(); // determine exact animation\n\n            animation = animation || settings.animation;\n            animationClass = module.get.animationClass(animation); // save animation class in cache to restore class names\n\n            module.save.animation(animationClass); // override display if necessary so animation appears visibly\n\n            module.force.visible();\n            module.remove.hidden();\n            module.remove.direction();\n            module.start.animation(animationClass);\n          },\n          duration: function (animationName, duration) {\n            duration = duration || settings.duration;\n            duration = typeof duration == 'number' ? duration + 'ms' : duration;\n\n            if (duration || duration === 0) {\n              module.verbose('Setting animation duration', duration);\n              $module.css({\n                'animation-duration': duration\n              });\n            }\n          },\n          direction: function (direction) {\n            direction = direction || module.get.direction();\n\n            if (direction == className.inward) {\n              module.set.inward();\n            } else {\n              module.set.outward();\n            }\n          },\n          looping: function () {\n            module.debug('Transition set to loop');\n            $module.addClass(className.looping);\n          },\n          hidden: function () {\n            $module.addClass(className.transition).addClass(className.hidden);\n          },\n          inward: function () {\n            module.debug('Setting direction to inward');\n            $module.removeClass(className.outward).addClass(className.inward);\n          },\n          outward: function () {\n            module.debug('Setting direction to outward');\n            $module.removeClass(className.inward).addClass(className.outward);\n          },\n          visible: function () {\n            $module.addClass(className.transition).addClass(className.visible);\n          }\n        },\n        start: {\n          animation: function (animationClass) {\n            animationClass = animationClass || module.get.animationClass();\n            module.debug('Starting tween', animationClass);\n            $module.addClass(animationClass).one(animationEnd + '.complete' + eventNamespace, module.complete);\n\n            if (settings.useFailSafe) {\n              module.add.failSafe();\n            }\n\n            module.set.duration(settings.duration);\n            settings.onStart.call(element);\n          }\n        },\n        save: {\n          animation: function (animation) {\n            if (!module.cache) {\n              module.cache = {};\n            }\n\n            module.cache.animation = animation;\n          },\n          displayType: function (displayType) {\n            if (displayType !== 'none') {\n              $module.data(metadata.displayType, displayType);\n            }\n          },\n          transitionExists: function (animation, exists) {\n            $.fn.transition.exists[animation] = exists;\n            module.verbose('Saving existence of transition', animation, exists);\n          }\n        },\n        restore: {\n          conditions: function () {\n            var animation = module.get.currentAnimation();\n\n            if (animation) {\n              $module.removeClass(animation);\n              module.verbose('Removing animation class', module.cache);\n            }\n\n            module.remove.duration();\n          }\n        },\n        add: {\n          failSafe: function () {\n            var duration = module.get.duration();\n            module.timer = setTimeout(function () {\n              $module.triggerHandler(animationEnd);\n            }, duration + settings.failSafeDelay);\n            module.verbose('Adding fail safe timer', module.timer);\n          }\n        },\n        remove: {\n          animating: function () {\n            $module.removeClass(className.animating);\n          },\n          animationCallbacks: function () {\n            module.remove.queueCallback();\n            module.remove.completeCallback();\n          },\n          queueCallback: function () {\n            $module.off('.queue' + eventNamespace);\n          },\n          completeCallback: function () {\n            $module.off('.complete' + eventNamespace);\n          },\n          display: function () {\n            $module.css('display', '');\n          },\n          direction: function () {\n            $module.removeClass(className.inward).removeClass(className.outward);\n          },\n          duration: function () {\n            $module.css('animation-duration', '');\n          },\n          failSafe: function () {\n            module.verbose('Removing fail safe timer', module.timer);\n\n            if (module.timer) {\n              clearTimeout(module.timer);\n            }\n          },\n          hidden: function () {\n            $module.removeClass(className.hidden);\n          },\n          visible: function () {\n            $module.removeClass(className.visible);\n          },\n          looping: function () {\n            module.debug('Transitions are no longer looping');\n\n            if (module.is.looping()) {\n              module.reset();\n              $module.removeClass(className.looping);\n            }\n          },\n          transition: function () {\n            $module.removeClass(className.visible).removeClass(className.hidden);\n          }\n        },\n        get: {\n          settings: function (animation, duration, onComplete) {\n            // single settings object\n            if (typeof animation == 'object') {\n              return $.extend(true, {}, $.fn.transition.settings, animation);\n            } // all arguments provided\n            else if (typeof onComplete == 'function') {\n                return $.extend({}, $.fn.transition.settings, {\n                  animation: animation,\n                  onComplete: onComplete,\n                  duration: duration\n                });\n              } // only duration provided\n              else if (typeof duration == 'string' || typeof duration == 'number') {\n                  return $.extend({}, $.fn.transition.settings, {\n                    animation: animation,\n                    duration: duration\n                  });\n                } // duration is actually settings object\n                else if (typeof duration == 'object') {\n                    return $.extend({}, $.fn.transition.settings, duration, {\n                      animation: animation\n                    });\n                  } // duration is actually callback\n                  else if (typeof duration == 'function') {\n                      return $.extend({}, $.fn.transition.settings, {\n                        animation: animation,\n                        onComplete: duration\n                      });\n                    } // only animation provided\n                    else {\n                        return $.extend({}, $.fn.transition.settings, {\n                          animation: animation\n                        });\n                      }\n          },\n          animationClass: function (animation) {\n            var animationClass = animation || settings.animation,\n                directionClass = module.can.transition() && !module.has.direction() ? module.get.direction() + ' ' : '';\n            return className.animating + ' ' + className.transition + ' ' + directionClass + animationClass;\n          },\n          currentAnimation: function () {\n            return module.cache && module.cache.animation !== undefined ? module.cache.animation : false;\n          },\n          currentDirection: function () {\n            return module.is.inward() ? className.inward : className.outward;\n          },\n          direction: function () {\n            return module.is.hidden() || !module.is.visible() ? className.inward : className.outward;\n          },\n          animationDirection: function (animation) {\n            var direction;\n            animation = animation || settings.animation;\n\n            if (typeof animation === 'string') {\n              animation = animation.split(' '); // search animation name for out/in class\n\n              $.each(animation, function (index, word) {\n                if (word === className.inward) {\n                  direction = className.inward;\n                } else if (word === className.outward) {\n                  direction = className.outward;\n                }\n              });\n            } // return found direction\n\n\n            if (direction) {\n              return direction;\n            }\n\n            return false;\n          },\n          duration: function (duration) {\n            duration = duration || settings.duration;\n\n            if (duration === false) {\n              duration = $module.css('animation-duration') || 0;\n            }\n\n            return typeof duration === 'string' ? duration.indexOf('ms') > -1 ? parseFloat(duration) : parseFloat(duration) * 1000 : duration;\n          },\n          displayType: function (shouldDetermine) {\n            shouldDetermine = shouldDetermine !== undefined ? shouldDetermine : true;\n\n            if (settings.displayType) {\n              return settings.displayType;\n            }\n\n            if (shouldDetermine && $module.data(metadata.displayType) === undefined) {\n              // create fake element to determine display state\n              module.can.transition(true);\n            }\n\n            return $module.data(metadata.displayType);\n          },\n          userStyle: function (style) {\n            style = style || $module.attr('style') || '';\n            return style.replace(/display.*?;/, '');\n          },\n          transitionExists: function (animation) {\n            return $.fn.transition.exists[animation];\n          },\n          animationStartEvent: function () {\n            var element = document.createElement('div'),\n                animations = {\n              'animation': 'animationstart',\n              'OAnimation': 'oAnimationStart',\n              'MozAnimation': 'mozAnimationStart',\n              'WebkitAnimation': 'webkitAnimationStart'\n            },\n                animation;\n\n            for (animation in animations) {\n              if (element.style[animation] !== undefined) {\n                return animations[animation];\n              }\n            }\n\n            return false;\n          },\n          animationEndEvent: function () {\n            var element = document.createElement('div'),\n                animations = {\n              'animation': 'animationend',\n              'OAnimation': 'oAnimationEnd',\n              'MozAnimation': 'mozAnimationEnd',\n              'WebkitAnimation': 'webkitAnimationEnd'\n            },\n                animation;\n\n            for (animation in animations) {\n              if (element.style[animation] !== undefined) {\n                return animations[animation];\n              }\n            }\n\n            return false;\n          }\n        },\n        can: {\n          transition: function (forced) {\n            var animation = settings.animation,\n                transitionExists = module.get.transitionExists(animation),\n                displayType = module.get.displayType(false),\n                elementClass,\n                tagName,\n                $clone,\n                currentAnimation,\n                inAnimation,\n                directionExists;\n\n            if (transitionExists === undefined || forced) {\n              module.verbose('Determining whether animation exists');\n              elementClass = $module.attr('class');\n              tagName = $module.prop('tagName');\n              $clone = $('<' + tagName + ' />').addClass(elementClass).insertAfter($module);\n              currentAnimation = $clone.addClass(animation).removeClass(className.inward).removeClass(className.outward).addClass(className.animating).addClass(className.transition).css('animationName');\n              inAnimation = $clone.addClass(className.inward).css('animationName');\n\n              if (!displayType) {\n                displayType = $clone.attr('class', elementClass).removeAttr('style').removeClass(className.hidden).removeClass(className.visible).show().css('display');\n                module.verbose('Determining final display state', displayType);\n                module.save.displayType(displayType);\n              }\n\n              $clone.remove();\n\n              if (currentAnimation != inAnimation) {\n                module.debug('Direction exists for animation', animation);\n                directionExists = true;\n              } else if (currentAnimation == 'none' || !currentAnimation) {\n                module.debug('No animation defined in css', animation);\n                return;\n              } else {\n                module.debug('Static animation found', animation, displayType);\n                directionExists = false;\n              }\n\n              module.save.transitionExists(animation, directionExists);\n            }\n\n            return transitionExists !== undefined ? transitionExists : directionExists;\n          },\n          animate: function () {\n            // can transition does not return a value if animation does not exist\n            return module.can.transition() !== undefined;\n          }\n        },\n        is: {\n          animating: function () {\n            return $module.hasClass(className.animating);\n          },\n          inward: function () {\n            return $module.hasClass(className.inward);\n          },\n          outward: function () {\n            return $module.hasClass(className.outward);\n          },\n          looping: function () {\n            return $module.hasClass(className.looping);\n          },\n          occurring: function (animation) {\n            animation = animation || settings.animation;\n            animation = '.' + animation.replace(' ', '.');\n            return $module.filter(animation).length > 0;\n          },\n          visible: function () {\n            return $module.is(':visible');\n          },\n          hidden: function () {\n            return $module.css('visibility') === 'hidden';\n          },\n          supported: function () {\n            return animationEnd !== false;\n          }\n        },\n        hide: function () {\n          module.verbose('Hiding element');\n\n          if (module.is.animating()) {\n            module.reset();\n          }\n\n          element.blur(); // IE will trigger focus change if element is not blurred before hiding\n\n          module.remove.display();\n          module.remove.visible();\n          module.set.hidden();\n          module.force.hidden();\n          settings.onHide.call(element);\n          settings.onComplete.call(element); // module.repaint();\n        },\n        show: function (display) {\n          module.verbose('Showing element', display);\n          module.remove.hidden();\n          module.set.visible();\n          module.force.visible();\n          settings.onShow.call(element);\n          settings.onComplete.call(element); // module.repaint();\n        },\n        toggle: function () {\n          if (module.is.visible()) {\n            module.hide();\n          } else {\n            module.show();\n          }\n        },\n        stop: function () {\n          module.debug('Stopping current animation');\n          $module.triggerHandler(animationEnd);\n        },\n        stopAll: function () {\n          module.debug('Stopping all animation');\n          module.remove.queueCallback();\n          $module.triggerHandler(animationEnd);\n        },\n        clear: {\n          queue: function () {\n            module.debug('Clearing animation queue');\n            module.remove.queueCallback();\n          }\n        },\n        enable: function () {\n          module.verbose('Starting animation');\n          $module.removeClass(className.disabled);\n        },\n        disable: function () {\n          module.debug('Stopping animation');\n          $module.addClass(className.disabled);\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        // modified for transition to return invoke success\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found !== undefined ? found : false;\n        }\n      };\n      module.initialize();\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  }; // Records if CSS transition is available\n\n\n  $.fn.transition.exists = {};\n  $.fn.transition.settings = {\n    // module info\n    name: 'Transition',\n    // hide all output from this component regardless of other settings\n    silent: false,\n    // debug content outputted to console\n    debug: false,\n    // verbose debug output\n    verbose: false,\n    // performance data output\n    performance: true,\n    // event namespace\n    namespace: 'transition',\n    // delay between animations in group\n    interval: 0,\n    // whether group animations should be reversed\n    reverse: 'auto',\n    // animation callback event\n    onStart: function () {},\n    onComplete: function () {},\n    onShow: function () {},\n    onHide: function () {},\n    // whether timeout should be used to ensure callback fires in cases animationend does not\n    useFailSafe: true,\n    // delay in ms for fail safe\n    failSafeDelay: 100,\n    // whether EXACT animation can occur twice in a row\n    allowRepeats: false,\n    // Override final display type on visible\n    displayType: false,\n    // animation duration\n    animation: 'fade',\n    duration: false,\n    // new animations will occur after previous ones\n    queue: true,\n    metadata: {\n      displayType: 'display'\n    },\n    className: {\n      animating: 'animating',\n      disabled: 'disabled',\n      hidden: 'hidden',\n      inward: 'in',\n      loading: 'loading',\n      looping: 'looping',\n      outward: 'out',\n      transition: 'transition',\n      visible: 'visible'\n    },\n    // possible errors\n    error: {\n      noAnimation: 'Element is no longer attached to DOM. Unable to animate.  Use silent setting to surpress this warning in production.',\n      repeated: 'That animation is already occurring, cancelling repeated animation',\n      method: 'The method you called is not defined',\n      support: 'This browser does not support CSS animations'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - API\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  var window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.api = $.fn.api = function (parameters) {\n    var // use window context if none specified\n    $allModules = $.isFunction(this) ? $(window) : $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.api.settings, parameters) : $.extend({}, $.fn.api.settings),\n          // internal aliases\n      namespace = settings.namespace,\n          metadata = settings.metadata,\n          selector = settings.selector,\n          error = settings.error,\n          className = settings.className,\n          // define namespaces for modules\n      eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          // element that creates request\n      $module = $(this),\n          $form = $module.closest(selector.form),\n          // context used for state\n      $context = settings.stateContext ? $(settings.stateContext) : $module,\n          // request details\n      ajaxSettings,\n          requestSettings,\n          url,\n          data,\n          requestStartTime,\n          // standard module\n      element = this,\n          context = $context[0],\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function () {\n          if (!methodInvoked) {\n            module.bind.events();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module for', element);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        bind: {\n          events: function () {\n            var triggerEvent = module.get.event();\n\n            if (triggerEvent) {\n              module.verbose('Attaching API events to element', triggerEvent);\n              $module.on(triggerEvent + eventNamespace, module.event.trigger);\n            } else if (settings.on == 'now') {\n              module.debug('Querying API endpoint immediately');\n              module.query();\n            }\n          }\n        },\n        decode: {\n          json: function (response) {\n            if (response !== undefined && typeof response == 'string') {\n              try {\n                response = JSON.parse(response);\n              } catch (e) {// isnt json string\n              }\n            }\n\n            return response;\n          }\n        },\n        read: {\n          cachedResponse: function (url) {\n            var response;\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            response = sessionStorage.getItem(url);\n            module.debug('Using cached response', url, response);\n            response = module.decode.json(response);\n            return response;\n          }\n        },\n        write: {\n          cachedResponse: function (url, response) {\n            if (response && response === '') {\n              module.debug('Response empty, not caching', response);\n              return;\n            }\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            if ($.isPlainObject(response)) {\n              response = JSON.stringify(response);\n            }\n\n            sessionStorage.setItem(url, response);\n            module.verbose('Storing cached response for url', url, response);\n          }\n        },\n        query: function () {\n          if (module.is.disabled()) {\n            module.debug('Element is disabled API request aborted');\n            return;\n          }\n\n          if (module.is.loading()) {\n            if (settings.interruptRequests) {\n              module.debug('Interrupting previous request');\n              module.abort();\n            } else {\n              module.debug('Cancelling request, previous request is still pending');\n              return;\n            }\n          } // pass element metadata to url (value, text)\n\n\n          if (settings.defaultData) {\n            $.extend(true, settings.urlData, module.get.defaultData());\n          } // Add form content\n\n\n          if (settings.serializeForm) {\n            settings.data = module.add.formData(settings.data);\n          } // call beforesend and get any settings changes\n\n\n          requestSettings = module.get.settings(); // check if before send cancelled request\n\n          if (requestSettings === false) {\n            module.cancelled = true;\n            module.error(error.beforeSend);\n            return;\n          } else {\n            module.cancelled = false;\n          } // get url\n\n\n          url = module.get.templatedURL();\n\n          if (!url && !module.is.mocked()) {\n            module.error(error.missingURL);\n            return;\n          } // replace variables\n\n\n          url = module.add.urlData(url); // missing url parameters\n\n          if (!url && !module.is.mocked()) {\n            return;\n          }\n\n          requestSettings.url = settings.base + url; // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n            type: settings.method || settings.type,\n            data: data,\n            url: settings.base + url,\n            beforeSend: settings.beforeXHR,\n            success: function () {},\n            failure: function () {},\n            complete: function () {}\n          });\n          module.debug('Querying URL', ajaxSettings.url);\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if (settings.cache === 'local' && module.read.cachedResponse(url)) {\n            module.debug('Response returned from local cache');\n            module.request = module.create.request();\n            module.request.resolveWith(context, [module.read.cachedResponse(url)]);\n            return;\n          }\n\n          if (!settings.throttle) {\n            module.debug('Sending request', data, ajaxSettings.method);\n            module.send.request();\n          } else {\n            if (!settings.throttleFirstRequest && !module.timer) {\n              module.debug('Sending request', data, ajaxSettings.method);\n              module.send.request();\n              module.timer = setTimeout(function () {}, settings.throttle);\n            } else {\n              module.debug('Throttling request', settings.throttle);\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                if (module.timer) {\n                  delete module.timer;\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n                module.send.request();\n              }, settings.throttle);\n            }\n          }\n        },\n        should: {\n          removeError: function () {\n            return settings.hideError === true || settings.hideError === 'auto' && !module.is.form();\n          }\n        },\n        is: {\n          disabled: function () {\n            return $module.filter(selector.disabled).length > 0;\n          },\n          expectingJSON: function () {\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n          },\n          form: function () {\n            return $module.is('form') || $context.is('form');\n          },\n          mocked: function () {\n            return settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync;\n          },\n          input: function () {\n            return $module.is('input');\n          },\n          loading: function () {\n            return module.request ? module.request.state() == 'pending' : false;\n          },\n          abortedRequest: function (xhr) {\n            if (xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n              module.verbose('XHR request determined to be aborted');\n              return true;\n            } else {\n              module.verbose('XHR request was not aborted');\n              return false;\n            }\n          },\n          validResponse: function (response) {\n            if (!module.is.expectingJSON() || !$.isFunction(settings.successTest)) {\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n              return true;\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if (settings.successTest(response)) {\n              module.debug('Response passed success test', response);\n              return true;\n            } else {\n              module.debug('Response failed success test', response);\n              return false;\n            }\n          }\n        },\n        was: {\n          cancelled: function () {\n            return module.cancelled || false;\n          },\n          succesful: function () {\n            return module.request && module.request.state() == 'resolved';\n          },\n          failure: function () {\n            return module.request && module.request.state() == 'rejected';\n          },\n          complete: function () {\n            return module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected');\n          }\n        },\n        add: {\n          urlData: function (url, urlData) {\n            var requiredVariables, optionalVariables;\n\n            if (url) {\n              requiredVariables = url.match(settings.regExp.required);\n              optionalVariables = url.match(settings.regExp.optional);\n              urlData = urlData || settings.urlData;\n\n              if (requiredVariables) {\n                module.debug('Looking for required URL variables', requiredVariables);\n                $.each(requiredVariables, function (index, templatedString) {\n                  var // allow legacy {$var} style\n                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(2, templatedString.length - 3) : templatedString.substr(1, templatedString.length - 2),\n                      value = $.isPlainObject(urlData) && urlData[variable] !== undefined ? urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : urlData[variable]; // remove value\n\n                  if (value === undefined) {\n                    module.error(error.requiredParameter, variable, url);\n                    url = false;\n                    return false;\n                  } else {\n                    module.verbose('Found required variable', variable, value);\n                    value = settings.encodeParameters ? module.get.urlEncodedValue(value) : value;\n                    url = url.replace(templatedString, value);\n                  }\n                });\n              }\n\n              if (optionalVariables) {\n                module.debug('Looking for optional URL variables', requiredVariables);\n                $.each(optionalVariables, function (index, templatedString) {\n                  var // allow legacy {/$var} style\n                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(3, templatedString.length - 4) : templatedString.substr(2, templatedString.length - 3),\n                      value = $.isPlainObject(urlData) && urlData[variable] !== undefined ? urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : urlData[variable]; // optional replacement\n\n                  if (value !== undefined) {\n                    module.verbose('Optional variable Found', variable, value);\n                    url = url.replace(templatedString, value);\n                  } else {\n                    module.verbose('Optional variable not found', variable); // remove preceding slash if set\n\n                    if (url.indexOf('/' + templatedString) !== -1) {\n                      url = url.replace('/' + templatedString, '');\n                    } else {\n                      url = url.replace(templatedString, '');\n                    }\n                  }\n                });\n              }\n            }\n\n            return url;\n          },\n          formData: function (data) {\n            var canSerialize = $.fn.serializeObject !== undefined,\n                formData = canSerialize ? $form.serializeObject() : $form.serialize(),\n                hasOtherData;\n            data = data || settings.data;\n            hasOtherData = $.isPlainObject(data);\n\n            if (hasOtherData) {\n              if (canSerialize) {\n                module.debug('Extending existing data with form data', data, formData);\n                data = $.extend(true, {}, data, formData);\n              } else {\n                module.error(error.missingSerialize);\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n                data = formData;\n              }\n            } else {\n              module.debug('Adding form data', formData);\n              data = formData;\n            }\n\n            return data;\n          }\n        },\n        send: {\n          request: function () {\n            module.set.loading();\n            module.request = module.create.request();\n\n            if (module.is.mocked()) {\n              module.mockedXHR = module.create.mockedXHR();\n            } else {\n              module.xhr = module.create.xhr();\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n          }\n        },\n        event: {\n          trigger: function (event) {\n            module.query();\n\n            if (event.type == 'submit' || event.type == 'click') {\n              event.preventDefault();\n            }\n          },\n          xhr: {\n            always: function () {// nothing special\n            },\n            done: function (response, textStatus, xhr) {\n              var context = this,\n                  elapsedTime = new Date().getTime() - requestStartTime,\n                  timeLeft = settings.loadingDuration - elapsedTime,\n                  translatedResponse = $.isFunction(settings.onResponse) ? module.is.expectingJSON() ? settings.onResponse.call(context, $.extend(true, {}, response)) : settings.onResponse.call(context, response) : false;\n              timeLeft = timeLeft > 0 ? timeLeft : 0;\n\n              if (translatedResponse) {\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n                response = translatedResponse;\n              }\n\n              if (timeLeft > 0) {\n                module.debug('Response completed early delaying state change by', timeLeft);\n              }\n\n              setTimeout(function () {\n                if (module.is.validResponse(response)) {\n                  module.request.resolveWith(context, [response, xhr]);\n                } else {\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n                }\n              }, timeLeft);\n            },\n            fail: function (xhr, status, httpMessage) {\n              var context = this,\n                  elapsedTime = new Date().getTime() - requestStartTime,\n                  timeLeft = settings.loadingDuration - elapsedTime;\n              timeLeft = timeLeft > 0 ? timeLeft : 0;\n\n              if (timeLeft > 0) {\n                module.debug('Response completed early delaying state change by', timeLeft);\n              }\n\n              setTimeout(function () {\n                if (module.is.abortedRequest(xhr)) {\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n                } else {\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n                }\n              }, timeLeft);\n            }\n          },\n          request: {\n            done: function (response, xhr) {\n              module.debug('Successful API Response', response);\n\n              if (settings.cache === 'local' && url) {\n                module.write.cachedResponse(url, response);\n                module.debug('Saving server response locally', module.cache);\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n            },\n            complete: function (firstParameter, secondParameter) {\n              var xhr, response; // have to guess callback parameters based on request success\n\n              if (module.was.succesful()) {\n                response = firstParameter;\n                xhr = secondParameter;\n              } else {\n                xhr = firstParameter;\n                response = module.get.responseFromXHR(xhr);\n              }\n\n              module.remove.loading();\n              settings.onComplete.call(context, response, $module, xhr);\n            },\n            fail: function (xhr, status, httpMessage) {\n              var // pull response from xhr if available\n              response = module.get.responseFromXHR(xhr),\n                  errorMessage = module.get.errorFromRequest(response, status, httpMessage);\n\n              if (status == 'aborted') {\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n                settings.onAbort.call(context, status, $module, xhr);\n                return true;\n              } else if (status == 'invalid') {\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n              } else if (status == 'error') {\n                if (xhr !== undefined) {\n                  module.debug('XHR produced a server error', status, httpMessage); // make sure we have an error to display to console\n\n                  if (xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n                }\n              }\n\n              if (settings.errorDuration && status !== 'aborted') {\n                module.debug('Adding error state');\n                module.set.error();\n\n                if (module.should.removeError()) {\n                  setTimeout(module.remove.error, settings.errorDuration);\n                }\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n              settings.onFailure.call(context, response, $module, xhr);\n            }\n          }\n        },\n        create: {\n          request: function () {\n            // api request promise\n            return $.Deferred().always(module.event.request.complete).done(module.event.request.done).fail(module.event.request.fail);\n          },\n          mockedXHR: function () {\n            var // xhr does not simulate these properties of xhr but must return them\n            textStatus = false,\n                status = false,\n                httpMessage = false,\n                responder = settings.mockResponse || settings.response,\n                asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n                asyncCallback,\n                response,\n                mockedXHR;\n            mockedXHR = $.Deferred().always(module.event.xhr.complete).done(module.event.xhr.done).fail(module.event.xhr.fail);\n\n            if (responder) {\n              if ($.isFunction(responder)) {\n                module.debug('Using specified synchronous callback', responder);\n                response = responder.call(context, requestSettings);\n              } else {\n                module.debug('Using settings specified response', responder);\n                response = responder;\n              } // simulating response\n\n\n              mockedXHR.resolveWith(context, [response, textStatus, {\n                responseText: response\n              }]);\n            } else if ($.isFunction(asyncResponder)) {\n              asyncCallback = function (response) {\n                module.debug('Async callback returned response', response);\n\n                if (response) {\n                  mockedXHR.resolveWith(context, [response, textStatus, {\n                    responseText: response\n                  }]);\n                } else {\n                  mockedXHR.rejectWith(context, [{\n                    responseText: response\n                  }, status, httpMessage]);\n                }\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n              asyncResponder.call(context, requestSettings, asyncCallback);\n            }\n\n            return mockedXHR;\n          },\n          xhr: function () {\n            var xhr; // ajax request promise\n\n            xhr = $.ajax(ajaxSettings).always(module.event.xhr.always).done(module.event.xhr.done).fail(module.event.xhr.fail);\n            module.verbose('Created server request', xhr, ajaxSettings);\n            return xhr;\n          }\n        },\n        set: {\n          error: function () {\n            module.verbose('Adding error state to element', $context);\n            $context.addClass(className.error);\n          },\n          loading: function () {\n            module.verbose('Adding loading state to element', $context);\n            $context.addClass(className.loading);\n            requestStartTime = new Date().getTime();\n          }\n        },\n        remove: {\n          error: function () {\n            module.verbose('Removing error state from element', $context);\n            $context.removeClass(className.error);\n          },\n          loading: function () {\n            module.verbose('Removing loading state from element', $context);\n            $context.removeClass(className.loading);\n          }\n        },\n        get: {\n          responseFromXHR: function (xhr) {\n            return $.isPlainObject(xhr) ? module.is.expectingJSON() ? module.decode.json(xhr.responseText) : xhr.responseText : false;\n          },\n          errorFromRequest: function (response, status, httpMessage) {\n            return $.isPlainObject(response) && response.error !== undefined ? response.error // use json error message\n            : settings.error[status] !== undefined ? // use server error message\n            settings.error[status] : httpMessage;\n          },\n          request: function () {\n            return module.request || false;\n          },\n          xhr: function () {\n            return module.xhr || false;\n          },\n          settings: function () {\n            var runSettings;\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if (runSettings) {\n              if (runSettings.success !== undefined) {\n                module.debug('Legacy success callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.success);\n                runSettings.onSuccess = runSettings.success;\n              }\n\n              if (runSettings.failure !== undefined) {\n                module.debug('Legacy failure callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.failure);\n                runSettings.onFailure = runSettings.failure;\n              }\n\n              if (runSettings.complete !== undefined) {\n                module.debug('Legacy complete callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.complete);\n                runSettings.onComplete = runSettings.complete;\n              }\n            }\n\n            if (runSettings === undefined) {\n              module.error(error.noReturnedValue);\n            }\n\n            if (runSettings === false) {\n              return runSettings;\n            }\n\n            return runSettings !== undefined ? $.extend(true, {}, runSettings) : $.extend(true, {}, settings);\n          },\n          urlEncodedValue: function (value) {\n            var decodedValue = window.decodeURIComponent(value),\n                encodedValue = window.encodeURIComponent(value),\n                alreadyEncoded = decodedValue !== value;\n\n            if (alreadyEncoded) {\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n              return value;\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n            return encodedValue;\n          },\n          defaultData: function () {\n            var data = {};\n\n            if (!$.isWindow(element)) {\n              if (module.is.input()) {\n                data.value = $module.val();\n              } else if (module.is.form()) {} else {\n                data.text = $module.text();\n              }\n            }\n\n            return data;\n          },\n          event: function () {\n            if ($.isWindow(element) || settings.on == 'now') {\n              module.debug('API called without element, no events attached');\n              return false;\n            } else if (settings.on == 'auto') {\n              if ($module.is('input')) {\n                return element.oninput !== undefined ? 'input' : element.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n              } else if ($module.is('form')) {\n                return 'submit';\n              } else {\n                return 'click';\n              }\n            } else {\n              return settings.on;\n            }\n          },\n          templatedURL: function (action) {\n            action = action || $module.data(metadata.action) || settings.action || false;\n            url = $module.data(metadata.url) || settings.url || false;\n\n            if (url) {\n              module.debug('Using specified url', url);\n              return url;\n            }\n\n            if (action) {\n              module.debug('Looking up url for action', action, settings.api);\n\n              if (settings.api[action] === undefined && !module.is.mocked()) {\n                module.error(error.missingAction, settings.action, settings.api);\n                return;\n              }\n\n              url = settings.api[action];\n            } else if (module.is.form()) {\n              url = $module.attr('action') || $context.attr('action') || false;\n              module.debug('No url or action specified, defaulting to form action', url);\n            }\n\n            return url;\n          }\n        },\n        abort: function () {\n          var xhr = module.get.xhr();\n\n          if (xhr && xhr.state() !== 'resolved') {\n            module.debug('Cancelling API request');\n            xhr.abort();\n          }\n        },\n        // reset state\n        reset: function () {\n          module.remove.error();\n          module.remove.loading();\n        },\n        setting: function (name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                //'Element'        : element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.api.settings = {\n    name: 'API',\n    namespace: 'api',\n    debug: false,\n    verbose: false,\n    performance: true,\n    // object containing all templates endpoints\n    api: {},\n    // whether to cache responses\n    cache: true,\n    // whether new requests should abort previous requests\n    interruptRequests: true,\n    // event binding\n    on: 'auto',\n    // context for applying state classes\n    stateContext: false,\n    // duration for loading state\n    loadingDuration: 0,\n    // whether to hide errors after a period of time\n    hideError: 'auto',\n    // duration for error state\n    errorDuration: 2000,\n    // whether parameters should be encoded with encodeURIComponent\n    encodeParameters: true,\n    // API action to use\n    action: false,\n    // templated URL to use\n    url: false,\n    // base URL to apply to all endpoints\n    base: '',\n    // data that will\n    urlData: {},\n    // whether to add default data to url data\n    defaultData: true,\n    // whether to serialize closest form\n    serializeForm: false,\n    // how long to wait before request should occur\n    throttle: 0,\n    // whether to throttle first request or only repeated\n    throttleFirstRequest: true,\n    // standard ajax settings\n    method: 'get',\n    data: {},\n    dataType: 'json',\n    // mock response\n    mockResponse: false,\n    mockResponseAsync: false,\n    // aliases for mock\n    response: false,\n    responseAsync: false,\n    // callbacks before request\n    beforeSend: function (settings) {\n      return settings;\n    },\n    beforeXHR: function (xhr) {},\n    onRequest: function (promise, xhr) {},\n    // after request\n    onResponse: false,\n    // function(response) { },\n    // response was successful, if JSON passed validation\n    onSuccess: function (response, $module) {},\n    // request finished without aborting\n    onComplete: function (response, $module) {},\n    // failed JSON success test\n    onFailure: function (response, $module) {},\n    // server error\n    onError: function (errorMessage, $module) {},\n    // request aborted\n    onAbort: function (errorMessage, $module) {},\n    successTest: false,\n    // errors\n    error: {\n      beforeSend: 'The before send function has aborted the request',\n      error: 'There was an error with your request',\n      exitConditions: 'API Request Aborted. Exit conditions met',\n      JSONParse: 'JSON could not be parsed during error handling',\n      legacyParameters: 'You are using legacy API success callback names',\n      method: 'The method you called is not defined',\n      missingAction: 'API action used but no url was defined',\n      missingSerialize: 'jquery-serialize-object is required to add form data to an existing data object',\n      missingURL: 'No URL specified for api event',\n      noReturnedValue: 'The beforeSend callback must return a settings object, beforeSend ignored.',\n      noStorage: 'Caching responses locally requires session storage',\n      parseError: 'There was an error parsing your request',\n      requiredParameter: 'Missing a required URL parameter: ',\n      statusMessage: 'Server gave an error: ',\n      timeout: 'Your request timed out'\n    },\n    regExp: {\n      required: /\\{\\$*[A-z0-9]+\\}/g,\n      optional: /\\{\\/\\$*[A-z0-9]+\\}/g\n    },\n    className: {\n      loading: 'loading',\n      error: 'error'\n    },\n    selector: {\n      disabled: '.disabled',\n      form: 'form'\n    },\n    metadata: {\n      action: 'action',\n      url: 'url'\n    }\n  };\n})(jQuery, window, document);\n/*!\n * # Semantic UI 2.4.1 - Visibility\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.visibility = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue,\n        moduleCount = $allModules.length,\n        loadedCount = 0;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visibility.settings, parameters) : $.extend({}, $.fn.visibility.settings),\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          metadata = settings.metadata,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $window = $(window),\n          $module = $(this),\n          $context = $(settings.context),\n          $placeholder,\n          selector = $module.selector || '',\n          instance = $module.data(moduleNamespace),\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      },\n          element = this,\n          disabled = false,\n          contextObserver,\n          observer,\n          module;\n\n      module = {\n        initialize: function () {\n          module.debug('Initializing', settings);\n          module.setup.cache();\n\n          if (module.should.trackChanges()) {\n            if (settings.type == 'image') {\n              module.setup.image();\n            }\n\n            if (settings.type == 'fixed') {\n              module.setup.fixed();\n            }\n\n            if (settings.observeChanges) {\n              module.observeChanges();\n            }\n\n            module.bind.events();\n          }\n\n          module.save.position();\n\n          if (!module.is.visible()) {\n            module.error(error.visible, $module);\n          }\n\n          if (settings.initialCheck) {\n            module.checkVisibility();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function () {\n          module.debug('Storing instance', module);\n          $module.data(moduleNamespace, module);\n          instance = module;\n        },\n        destroy: function () {\n          module.verbose('Destroying previous module');\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          if (contextObserver) {\n            contextObserver.disconnect();\n          }\n\n          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);\n          $context.off('scroll' + eventNamespace, module.event.scroll).off('scrollchange' + eventNamespace, module.event.scrollchange);\n\n          if (settings.type == 'fixed') {\n            module.resetFixed();\n            module.remove.placeholder();\n          }\n\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        observeChanges: function () {\n          if ('MutationObserver' in window) {\n            contextObserver = new MutationObserver(module.event.contextChanged);\n            observer = new MutationObserver(module.event.changed);\n            contextObserver.observe(document, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        bind: {\n          events: function () {\n            module.verbose('Binding visibility events to scroll and resize');\n\n            if (settings.refreshOnLoad) {\n              $window.on('load' + eventNamespace, module.event.load);\n            }\n\n            $window.on('resize' + eventNamespace, module.event.resize); // pub/sub pattern\n\n            $context.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);\n          }\n        },\n        event: {\n          changed: function (mutations) {\n            module.verbose('DOM tree modified, updating visibility calculations');\n            module.timer = setTimeout(function () {\n              module.verbose('DOM tree modified, updating sticky menu');\n              module.refresh();\n            }, 100);\n          },\n          contextChanged: function (mutations) {\n            [].forEach.call(mutations, function (mutation) {\n              if (mutation.removedNodes) {\n                [].forEach.call(mutation.removedNodes, function (node) {\n                  if (node == element || $(node).find(element).length > 0) {\n                    module.debug('Element removed from DOM, tearing down events');\n                    module.destroy();\n                  }\n                });\n              }\n            });\n          },\n          resize: function () {\n            module.debug('Window resized');\n\n            if (settings.refreshOnResize) {\n              requestAnimationFrame(module.refresh);\n            }\n          },\n          load: function () {\n            module.debug('Page finished loading');\n            requestAnimationFrame(module.refresh);\n          },\n          // publishes scrollchange event on one scroll\n          scroll: function () {\n            if (settings.throttle) {\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);\n              }, settings.throttle);\n            } else {\n              requestAnimationFrame(function () {\n                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);\n              });\n            }\n          },\n          // subscribes to scrollchange\n          scrollchange: function (event, scrollPosition) {\n            module.checkVisibility(scrollPosition);\n          }\n        },\n        precache: function (images, callback) {\n          if (!(images instanceof Array)) {\n            images = [images];\n          }\n\n          var imagesLength = images.length,\n              loadedCounter = 0,\n              cache = [],\n              cacheImage = document.createElement('img'),\n              handleLoad = function () {\n            loadedCounter++;\n\n            if (loadedCounter >= images.length) {\n              if ($.isFunction(callback)) {\n                callback();\n              }\n            }\n          };\n\n          while (imagesLength--) {\n            cacheImage = document.createElement('img');\n            cacheImage.onload = handleLoad;\n            cacheImage.onerror = handleLoad;\n            cacheImage.src = images[imagesLength];\n            cache.push(cacheImage);\n          }\n        },\n        enableCallbacks: function () {\n          module.debug('Allowing callbacks to occur');\n          disabled = false;\n        },\n        disableCallbacks: function () {\n          module.debug('Disabling all callbacks temporarily');\n          disabled = true;\n        },\n        should: {\n          trackChanges: function () {\n            if (methodInvoked) {\n              module.debug('One time query, no need to bind events');\n              return false;\n            }\n\n            module.debug('Callbacks being attached');\n            return true;\n          }\n        },\n        setup: {\n          cache: function () {\n            module.cache = {\n              occurred: {},\n              screen: {},\n              element: {}\n            };\n          },\n          image: function () {\n            var src = $module.data(metadata.src);\n\n            if (src) {\n              module.verbose('Lazy loading image', src);\n              settings.once = true;\n              settings.observeChanges = false; // show when top visible\n\n              settings.onOnScreen = function () {\n                module.debug('Image on screen', element);\n                module.precache(src, function () {\n                  module.set.image(src, function () {\n                    loadedCount++;\n\n                    if (loadedCount == moduleCount) {\n                      settings.onAllLoaded.call(this);\n                    }\n\n                    settings.onLoad.call(this);\n                  });\n                });\n              };\n            }\n          },\n          fixed: function () {\n            module.debug('Setting up fixed');\n            settings.once = false;\n            settings.observeChanges = false;\n            settings.initialCheck = true;\n            settings.refreshOnLoad = true;\n\n            if (!parameters.transition) {\n              settings.transition = false;\n            }\n\n            module.create.placeholder();\n            module.debug('Added placeholder', $placeholder);\n\n            settings.onTopPassed = function () {\n              module.debug('Element passed, adding fixed position', $module);\n              module.show.placeholder();\n              module.set.fixed();\n\n              if (settings.transition) {\n                if ($.fn.transition !== undefined) {\n                  $module.transition(settings.transition, settings.duration);\n                }\n              }\n            };\n\n            settings.onTopPassedReverse = function () {\n              module.debug('Element returned to position, removing fixed', $module);\n              module.hide.placeholder();\n              module.remove.fixed();\n            };\n          }\n        },\n        create: {\n          placeholder: function () {\n            module.verbose('Creating fixed position placeholder');\n            $placeholder = $module.clone(false).css('display', 'none').addClass(className.placeholder).insertAfter($module);\n          }\n        },\n        show: {\n          placeholder: function () {\n            module.verbose('Showing placeholder');\n            $placeholder.css('display', 'block').css('visibility', 'hidden');\n          }\n        },\n        hide: {\n          placeholder: function () {\n            module.verbose('Hiding placeholder');\n            $placeholder.css('display', 'none').css('visibility', '');\n          }\n        },\n        set: {\n          fixed: function () {\n            module.verbose('Setting element to fixed position');\n            $module.addClass(className.fixed).css({\n              position: 'fixed',\n              top: settings.offset + 'px',\n              left: 'auto',\n              zIndex: settings.zIndex\n            });\n            settings.onFixed.call(element);\n          },\n          image: function (src, callback) {\n            $module.attr('src', src);\n\n            if (settings.transition) {\n              if ($.fn.transition !== undefined) {\n                if ($module.hasClass(className.visible)) {\n                  module.debug('Transition already occurred on this image, skipping animation');\n                  return;\n                }\n\n                $module.transition(settings.transition, settings.duration, callback);\n              } else {\n                $module.fadeIn(settings.duration, callback);\n              }\n            } else {\n              $module.show();\n            }\n          }\n        },\n        is: {\n          onScreen: function () {\n            var calculations = module.get.elementCalculations();\n            return calculations.onScreen;\n          },\n          offScreen: function () {\n            var calculations = module.get.elementCalculations();\n            return calculations.offScreen;\n          },\n          visible: function () {\n            if (module.cache && module.cache.element) {\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\n            }\n\n            return false;\n          },\n          verticallyScrollableContext: function () {\n            var overflowY = $context.get(0) !== window ? $context.css('overflow-y') : false;\n            return overflowY == 'auto' || overflowY == 'scroll';\n          },\n          horizontallyScrollableContext: function () {\n            var overflowX = $context.get(0) !== window ? $context.css('overflow-x') : false;\n            return overflowX == 'auto' || overflowX == 'scroll';\n          }\n        },\n        refresh: function () {\n          module.debug('Refreshing constants (width/height)');\n\n          if (settings.type == 'fixed') {\n            module.resetFixed();\n          }\n\n          module.reset();\n          module.save.position();\n\n          if (settings.checkOnRefresh) {\n            module.checkVisibility();\n          }\n\n          settings.onRefresh.call(element);\n        },\n        resetFixed: function () {\n          module.remove.fixed();\n          module.remove.occurred();\n        },\n        reset: function () {\n          module.verbose('Resetting all cached values');\n\n          if ($.isPlainObject(module.cache)) {\n            module.cache.screen = {};\n            module.cache.element = {};\n          }\n        },\n        checkVisibility: function (scroll) {\n          module.verbose('Checking visibility of element', module.cache.element);\n\n          if (!disabled && module.is.visible()) {\n            // save scroll position\n            module.save.scroll(scroll); // update calculations derived from scroll\n\n            module.save.calculations(); // percentage\n\n            module.passed(); // reverse (must be first)\n\n            module.passingReverse();\n            module.topVisibleReverse();\n            module.bottomVisibleReverse();\n            module.topPassedReverse();\n            module.bottomPassedReverse(); // one time\n\n            module.onScreen();\n            module.offScreen();\n            module.passing();\n            module.topVisible();\n            module.bottomVisible();\n            module.topPassed();\n            module.bottomPassed(); // on update callback\n\n            if (settings.onUpdate) {\n              settings.onUpdate.call(element, module.get.elementCalculations());\n            }\n          }\n        },\n        passed: function (amount, newCallback) {\n          var calculations = module.get.elementCalculations(),\n              amountInPixels; // assign callback\n\n          if (amount && newCallback) {\n            settings.onPassed[amount] = newCallback;\n          } else if (amount !== undefined) {\n            return module.get.pixelsPassed(amount) > calculations.pixelsPassed;\n          } else if (calculations.passing) {\n            $.each(settings.onPassed, function (amount, callback) {\n              if (calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\n                module.execute(callback, amount);\n              } else if (!settings.once) {\n                module.remove.occurred(callback);\n              }\n            });\n          }\n        },\n        onScreen: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onOnScreen,\n              callbackName = 'onScreen';\n\n          if (newCallback) {\n            module.debug('Adding callback for onScreen', newCallback);\n            settings.onOnScreen = newCallback;\n          }\n\n          if (calculations.onScreen) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.onOnScreen;\n          }\n        },\n        offScreen: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onOffScreen,\n              callbackName = 'offScreen';\n\n          if (newCallback) {\n            module.debug('Adding callback for offScreen', newCallback);\n            settings.onOffScreen = newCallback;\n          }\n\n          if (calculations.offScreen) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.onOffScreen;\n          }\n        },\n        passing: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onPassing,\n              callbackName = 'passing';\n\n          if (newCallback) {\n            module.debug('Adding callback for passing', newCallback);\n            settings.onPassing = newCallback;\n          }\n\n          if (calculations.passing) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.passing;\n          }\n        },\n        topVisible: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopVisible,\n              callbackName = 'topVisible';\n\n          if (newCallback) {\n            module.debug('Adding callback for top visible', newCallback);\n            settings.onTopVisible = newCallback;\n          }\n\n          if (calculations.topVisible) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.topVisible;\n          }\n        },\n        bottomVisible: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomVisible,\n              callbackName = 'bottomVisible';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom visible', newCallback);\n            settings.onBottomVisible = newCallback;\n          }\n\n          if (calculations.bottomVisible) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.bottomVisible;\n          }\n        },\n        topPassed: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopPassed,\n              callbackName = 'topPassed';\n\n          if (newCallback) {\n            module.debug('Adding callback for top passed', newCallback);\n            settings.onTopPassed = newCallback;\n          }\n\n          if (calculations.topPassed) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.topPassed;\n          }\n        },\n        bottomPassed: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomPassed,\n              callbackName = 'bottomPassed';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom passed', newCallback);\n            settings.onBottomPassed = newCallback;\n          }\n\n          if (calculations.bottomPassed) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.bottomPassed;\n          }\n        },\n        passingReverse: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onPassingReverse,\n              callbackName = 'passingReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for passing reverse', newCallback);\n            settings.onPassingReverse = newCallback;\n          }\n\n          if (!calculations.passing) {\n            if (module.get.occurred('passing')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return !calculations.passing;\n          }\n        },\n        topVisibleReverse: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopVisibleReverse,\n              callbackName = 'topVisibleReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for top visible reverse', newCallback);\n            settings.onTopVisibleReverse = newCallback;\n          }\n\n          if (!calculations.topVisible) {\n            if (module.get.occurred('topVisible')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.topVisible;\n          }\n        },\n        bottomVisibleReverse: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomVisibleReverse,\n              callbackName = 'bottomVisibleReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom visible reverse', newCallback);\n            settings.onBottomVisibleReverse = newCallback;\n          }\n\n          if (!calculations.bottomVisible) {\n            if (module.get.occurred('bottomVisible')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.bottomVisible;\n          }\n        },\n        topPassedReverse: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopPassedReverse,\n              callbackName = 'topPassedReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for top passed reverse', newCallback);\n            settings.onTopPassedReverse = newCallback;\n          }\n\n          if (!calculations.topPassed) {\n            if (module.get.occurred('topPassed')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.onTopPassed;\n          }\n        },\n        bottomPassedReverse: function (newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomPassedReverse,\n              callbackName = 'bottomPassedReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom passed reverse', newCallback);\n            settings.onBottomPassedReverse = newCallback;\n          }\n\n          if (!calculations.bottomPassed) {\n            if (module.get.occurred('bottomPassed')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.bottomPassed;\n          }\n        },\n        execute: function (callback, callbackName) {\n          var calculations = module.get.elementCalculations(),\n              screen = module.get.screenCalculations();\n          callback = callback || false;\n\n          if (callback) {\n            if (settings.continuous) {\n              module.debug('Callback being called continuously', callbackName, calculations);\n              callback.call(element, calculations, screen);\n            } else if (!module.get.occurred(callbackName)) {\n              module.debug('Conditions met', callbackName, calculations);\n              callback.call(element, calculations, screen);\n            }\n          }\n\n          module.save.occurred(callbackName);\n        },\n        remove: {\n          fixed: function () {\n            module.debug('Removing fixed position');\n            $module.removeClass(className.fixed).css({\n              position: '',\n              top: '',\n              left: '',\n              zIndex: ''\n            });\n            settings.onUnfixed.call(element);\n          },\n          placeholder: function () {\n            module.debug('Removing placeholder content');\n\n            if ($placeholder) {\n              $placeholder.remove();\n            }\n          },\n          occurred: function (callback) {\n            if (callback) {\n              var occurred = module.cache.occurred;\n\n              if (occurred[callback] !== undefined && occurred[callback] === true) {\n                module.debug('Callback can now be called again', callback);\n                module.cache.occurred[callback] = false;\n              }\n            } else {\n              module.cache.occurred = {};\n            }\n          }\n        },\n        save: {\n          calculations: function () {\n            module.verbose('Saving all calculations necessary to determine positioning');\n            module.save.direction();\n            module.save.screenCalculations();\n            module.save.elementCalculations();\n          },\n          occurred: function (callback) {\n            if (callback) {\n              if (module.cache.occurred[callback] === undefined || module.cache.occurred[callback] !== true) {\n                module.verbose('Saving callback occurred', callback);\n                module.cache.occurred[callback] = true;\n              }\n            }\n          },\n          scroll: function (scrollPosition) {\n            scrollPosition = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\n            module.cache.scroll = scrollPosition;\n          },\n          direction: function () {\n            var scroll = module.get.scroll(),\n                lastScroll = module.get.lastScroll(),\n                direction;\n\n            if (scroll > lastScroll && lastScroll) {\n              direction = 'down';\n            } else if (scroll < lastScroll && lastScroll) {\n              direction = 'up';\n            } else {\n              direction = 'static';\n            }\n\n            module.cache.direction = direction;\n            return module.cache.direction;\n          },\n          elementPosition: function () {\n            var element = module.cache.element,\n                screen = module.get.screenSize();\n            module.verbose('Saving element position'); // (quicker than $.extend)\n\n            element.fits = element.height < screen.height;\n            element.offset = $module.offset();\n            element.width = $module.outerWidth();\n            element.height = $module.outerHeight(); // compensate for scroll in context\n\n            if (module.is.verticallyScrollableContext()) {\n              element.offset.top += $context.scrollTop() - $context.offset().top;\n            }\n\n            if (module.is.horizontallyScrollableContext()) {\n              element.offset.left += $context.scrollLeft - $context.offset().left;\n            } // store\n\n\n            module.cache.element = element;\n            return element;\n          },\n          elementCalculations: function () {\n            var screen = module.get.screenCalculations(),\n                element = module.get.elementPosition(); // offset\n\n            if (settings.includeMargin) {\n              element.margin = {};\n              element.margin.top = parseInt($module.css('margin-top'), 10);\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\n              element.top = element.offset.top - element.margin.top;\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\n            } else {\n              element.top = element.offset.top;\n              element.bottom = element.offset.top + element.height;\n            } // visibility\n\n\n            element.topPassed = screen.top >= element.top;\n            element.bottomPassed = screen.top >= element.bottom;\n            element.topVisible = screen.bottom >= element.top && !element.topPassed;\n            element.bottomVisible = screen.bottom >= element.bottom && !element.bottomPassed;\n            element.pixelsPassed = 0;\n            element.percentagePassed = 0; // meta calculations\n\n            element.onScreen = (element.topVisible || element.passing) && !element.bottomPassed;\n            element.passing = element.topPassed && !element.bottomPassed;\n            element.offScreen = !element.onScreen; // passing calculations\n\n            if (element.passing) {\n              element.pixelsPassed = screen.top - element.top;\n              element.percentagePassed = (screen.top - element.top) / element.height;\n            }\n\n            module.cache.element = element;\n            module.verbose('Updated element calculations', element);\n            return element;\n          },\n          screenCalculations: function () {\n            var scroll = module.get.scroll();\n            module.save.direction();\n            module.cache.screen.top = scroll;\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\n            return module.cache.screen;\n          },\n          screenSize: function () {\n            module.verbose('Saving window position');\n            module.cache.screen = {\n              height: $context.height()\n            };\n          },\n          position: function () {\n            module.save.screenSize();\n            module.save.elementPosition();\n          }\n        },\n        get: {\n          pixelsPassed: function (amount) {\n            var element = module.get.elementCalculations();\n\n            if (amount.search('%') > -1) {\n              return element.height * (parseInt(amount, 10) / 100);\n            }\n\n            return parseInt(amount, 10);\n          },\n          occurred: function (callback) {\n            return module.cache.occurred !== undefined ? module.cache.occurred[callback] || false : false;\n          },\n          direction: function () {\n            if (module.cache.direction === undefined) {\n              module.save.direction();\n            }\n\n            return module.cache.direction;\n          },\n          elementPosition: function () {\n            if (module.cache.element === undefined) {\n              module.save.elementPosition();\n            }\n\n            return module.cache.element;\n          },\n          elementCalculations: function () {\n            if (module.cache.element === undefined) {\n              module.save.elementCalculations();\n            }\n\n            return module.cache.element;\n          },\n          screenCalculations: function () {\n            if (module.cache.screen === undefined) {\n              module.save.screenCalculations();\n            }\n\n            return module.cache.screen;\n          },\n          screenSize: function () {\n            if (module.cache.screen === undefined) {\n              module.save.screenSize();\n            }\n\n            return module.cache.screen;\n          },\n          scroll: function () {\n            if (module.cache.scroll === undefined) {\n              module.save.scroll();\n            }\n\n            return module.cache.scroll;\n          },\n          lastScroll: function () {\n            if (module.cache.screen === undefined) {\n              module.debug('First scroll event, no last scroll could be found');\n              return false;\n            }\n\n            return module.cache.screen.top;\n          }\n        },\n        setting: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function (name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function () {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function () {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function () {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function (message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function () {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function (query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        instance.save.scroll();\n        instance.save.calculations();\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.visibility.settings = {\n    name: 'Visibility',\n    namespace: 'visibility',\n    debug: false,\n    verbose: false,\n    performance: true,\n    // whether to use mutation observers to follow changes\n    observeChanges: true,\n    // check position immediately on init\n    initialCheck: true,\n    // whether to refresh calculations after all page images load\n    refreshOnLoad: true,\n    // whether to refresh calculations after page resize event\n    refreshOnResize: true,\n    // should call callbacks on refresh event (resize, etc)\n    checkOnRefresh: true,\n    // callback should only occur one time\n    once: true,\n    // callback should fire continuously whe evaluates to true\n    continuous: false,\n    // offset to use with scroll top\n    offset: 0,\n    // whether to include margin in elements position\n    includeMargin: false,\n    // scroll context for visibility checks\n    context: window,\n    // visibility check delay in ms (defaults to animationFrame)\n    throttle: false,\n    // special visibility type (image, fixed)\n    type: false,\n    // z-index to use with visibility 'fixed'\n    zIndex: '10',\n    // image only animation settings\n    transition: 'fade in',\n    duration: 1000,\n    // array of callbacks for percentage\n    onPassed: {},\n    // standard callbacks\n    onOnScreen: false,\n    onOffScreen: false,\n    onPassing: false,\n    onTopVisible: false,\n    onBottomVisible: false,\n    onTopPassed: false,\n    onBottomPassed: false,\n    // reverse callbacks\n    onPassingReverse: false,\n    onTopVisibleReverse: false,\n    onBottomVisibleReverse: false,\n    onTopPassedReverse: false,\n    onBottomPassedReverse: false,\n    // special callbacks for image\n    onLoad: function () {},\n    onAllLoaded: function () {},\n    // special callbacks for fixed position\n    onFixed: function () {},\n    onUnfixed: function () {},\n    // utility callbacks\n    onUpdate: false,\n    // disabled by default for performance\n    onRefresh: function () {},\n    metadata: {\n      src: 'src'\n    },\n    className: {\n      fixed: 'fixed',\n      placeholder: 'placeholder',\n      visible: 'visible'\n    },\n    error: {\n      method: 'The method you called is not defined.',\n      visible: 'Element is hidden, you must call refresh after element becomes visible'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"script"}